
lcd_i2c_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac0  08003ac0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ac0  08003ac0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ac0  08003ac0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08003ad4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003ad4  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8f6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1c  00000000  00000000  0002d932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  0002f650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00030368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b945  00000000  00000000  00030f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010124  00000000  00000000  0004c8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a31fe  00000000  00000000  0005ca01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffbff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003710  00000000  00000000  000ffc50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a60 	.word	0x08003a60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a60 	.word	0x08003a60

080001c8 <LCD_delay_ms>:
} LCD_current_pos;

LCD_current_pos lcd_pos;


void LCD_delay_ms(uint32_t us, TIM_HandleTypeDef *htim){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	uint32_t apb_freq = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
	if(htim->Instance == TIM6 || htim->Instance == TIM4 || htim->Instance == TIM3 || htim->Instance == TIM2)
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a19      	ldr	r2, [pc, #100]	; (8000240 <LCD_delay_ms+0x78>)
 80001dc:	4293      	cmp	r3, r2
 80001de:	d00c      	beq.n	80001fa <LCD_delay_ms+0x32>
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d008      	beq.n	80001fa <LCD_delay_ms+0x32>
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d004      	beq.n	80001fa <LCD_delay_ms+0x32>
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80001f8:	d103      	bne.n	8000202 <LCD_delay_ms+0x3a>
		apb_freq = HAL_RCC_GetPCLK1Freq();
 80001fa:	f002 ff95 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	e016      	b.n	8000230 <LCD_delay_ms+0x68>
	else if(htim->Instance == TIM17 || htim->Instance == TIM16 ||htim->Instance == TIM15 || htim->Instance == TIM1)
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <LCD_delay_ms+0x7c>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d00e      	beq.n	800022a <LCD_delay_ms+0x62>
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <LCD_delay_ms+0x80>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d009      	beq.n	800022a <LCD_delay_ms+0x62>
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a0c      	ldr	r2, [pc, #48]	; (800024c <LCD_delay_ms+0x84>)
 800021c:	4293      	cmp	r3, r2
 800021e:	d004      	beq.n	800022a <LCD_delay_ms+0x62>
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LCD_delay_ms+0x88>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d102      	bne.n	8000230 <LCD_delay_ms+0x68>
		apb_freq = HAL_RCC_GetPCLK2Freq();
 800022a:	f002 ff9f 	bl	800316c <HAL_RCC_GetPCLK2Freq>
 800022e:	60f8      	str	r0, [r7, #12]
//	else
//		apb_freq = HAL_RCC_GetHCLKFreq();
	HAL_Delay(1);
 8000230:	2001      	movs	r0, #1
 8000232:	f000 fe39 	bl	8000ea8 <HAL_Delay>
}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40001000 	.word	0x40001000
 8000244:	40014800 	.word	0x40014800
 8000248:	40014400 	.word	0x40014400
 800024c:	40014000 	.word	0x40014000
 8000250:	40012c00 	.word	0x40012c00

08000254 <_LCD_get_young_bits>:


uint8_t _LCD_get_young_bits(uint8_t data){
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	data <<= 4;
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	011b      	lsls	r3, r3, #4
 8000262:	71fb      	strb	r3, [r7, #7]
	data &= 0xF0;
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	f023 030f 	bic.w	r3, r3, #15
 800026a:	71fb      	strb	r3, [r7, #7]
	return data;
 800026c:	79fb      	ldrb	r3, [r7, #7]

}
 800026e:	4618      	mov	r0, r3
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr

0800027a <_LCD_get_old_bits>:


uint8_t _LCD_get_old_bits(uint8_t data){
 800027a:	b480      	push	{r7}
 800027c:	b083      	sub	sp, #12
 800027e:	af00      	add	r7, sp, #0
 8000280:	4603      	mov	r3, r0
 8000282:	71fb      	strb	r3, [r7, #7]
	return data & 0xF0;
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	f023 030f 	bic.w	r3, r3, #15
 800028a:	b2db      	uxtb	r3, r3
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <_LCD_send_command>:

void _LCD_send_command(I2C_HandleTypeDef* hi2c, uint8_t command){
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af02      	add	r7, sp, #8
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	460b      	mov	r3, r1
 80002a2:	70fb      	strb	r3, [r7, #3]
	uint8_t send[4] = {
		_LCD_get_old_bits(command) | E_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to high
 80002a4:	78fb      	ldrb	r3, [r7, #3]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffe7 	bl	800027a <_LCD_get_old_bits>
 80002ac:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80002ae:	f043 030c 	orr.w	r3, r3, #12
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	723b      	strb	r3, [r7, #8]
		_LCD_get_old_bits(command) | BACKLIGHT_ON, // older half of the command byte with E pin set to low
 80002b6:	78fb      	ldrb	r3, [r7, #3]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ffde 	bl	800027a <_LCD_get_old_bits>
 80002be:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80002c0:	f043 0308 	orr.w	r3, r3, #8
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	727b      	strb	r3, [r7, #9]
		_LCD_get_young_bits(command) | E_PIN_MASK | BACKLIGHT_ON, // younger half of the command byte with E pin set to high
 80002c8:	78fb      	ldrb	r3, [r7, #3]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffc2 	bl	8000254 <_LCD_get_young_bits>
 80002d0:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80002d2:	f043 030c 	orr.w	r3, r3, #12
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	72bb      	strb	r3, [r7, #10]
		_LCD_get_young_bits(command) | BACKLIGHT_ON}; // younger half of the command byte with E pin set to low
 80002da:	78fb      	ldrb	r3, [r7, #3]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ffb9 	bl	8000254 <_LCD_get_young_bits>
 80002e2:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80002e4:	f043 0308 	orr.w	r3, r3, #8
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	72fb      	strb	r3, [r7, #11]
	uint16_t send_size = sizeof(send);
 80002ec:	2304      	movs	r3, #4
 80002ee:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, send_size, 100);
 80002f0:	89fb      	ldrh	r3, [r7, #14]
 80002f2:	f107 0208 	add.w	r2, r7, #8
 80002f6:	2164      	movs	r1, #100	; 0x64
 80002f8:	9100      	str	r1, [sp, #0]
 80002fa:	214e      	movs	r1, #78	; 0x4e
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f001 f92f 	bl	8001560 <HAL_I2C_Master_Transmit>
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <_LCD_startup>:

void _LCD_startup(I2C_HandleTypeDef* hi2c){
 800030a:	b580      	push	{r7, lr}
 800030c:	b086      	sub	sp, #24
 800030e:	af02      	add	r7, sp, #8
 8000310:	6078      	str	r0, [r7, #4]
	//startup needs to use standard HAL_Delay(ms) in places where it needs to  due to displays hardware constrains
	uint8_t send[2] = {
 8000312:	f643 033c 	movw	r3, #14396	; 0x383c
 8000316:	81bb      	strh	r3, [r7, #12]
			STARTUP | E_PIN_MASK | BACKLIGHT_ON,
			STARTUP | BACKLIGHT_ON
	};
	HAL_Delay(20);
 8000318:	2014      	movs	r0, #20
 800031a:	f000 fdc5 	bl	8000ea8 <HAL_Delay>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 800031e:	f107 020c 	add.w	r2, r7, #12
 8000322:	2364      	movs	r3, #100	; 0x64
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2302      	movs	r3, #2
 8000328:	214e      	movs	r1, #78	; 0x4e
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f001 f918 	bl	8001560 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000330:	2005      	movs	r0, #5
 8000332:	f000 fdb9 	bl	8000ea8 <HAL_Delay>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 8000336:	f107 020c 	add.w	r2, r7, #12
 800033a:	2364      	movs	r3, #100	; 0x64
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2302      	movs	r3, #2
 8000340:	214e      	movs	r1, #78	; 0x4e
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f001 f90c 	bl	8001560 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000348:	2001      	movs	r0, #1
 800034a:	f000 fdad 	bl	8000ea8 <HAL_Delay>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 800034e:	f107 020c 	add.w	r2, r7, #12
 8000352:	2364      	movs	r3, #100	; 0x64
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2302      	movs	r3, #2
 8000358:	214e      	movs	r1, #78	; 0x4e
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f001 f900 	bl	8001560 <HAL_I2C_Master_Transmit>


}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <_LCD_set_4_bits>:

void _LCD_set_4_bits(I2C_HandleTypeDef* hi2c, uint8_t num_of_lines){
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af02      	add	r7, sp, #8
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] = {
 8000374:	f642 032c 	movw	r3, #10284	; 0x282c
 8000378:	81bb      	strh	r3, [r7, #12]
			FUNCTION_SET_4_BIT_MODE | E_PIN_MASK | BACKLIGHT_ON,
			FUNCTION_SET_4_BIT_MODE | BACKLIGHT_ON};
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS , data, 2, 100);
 800037a:	f107 020c 	add.w	r2, r7, #12
 800037e:	2364      	movs	r3, #100	; 0x64
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	2302      	movs	r3, #2
 8000384:	214e      	movs	r1, #78	; 0x4e
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f001 f8ea 	bl	8001560 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800038c:	2001      	movs	r0, #1
 800038e:	f000 fd8b 	bl	8000ea8 <HAL_Delay>
	if(num_of_lines == 2)
 8000392:	78fb      	ldrb	r3, [r7, #3]
 8000394:	2b02      	cmp	r3, #2
 8000396:	d103      	bne.n	80003a0 <_LCD_set_4_bits+0x38>
		_LCD_send_command(hi2c, FUNCTION_SET_4_BIT_MODE | TWO_LINES_ENABLE);
 8000398:	2128      	movs	r1, #40	; 0x28
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f7ff ff7c 	bl	8000298 <_LCD_send_command>
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <LCD_init>:

void LCD_init(I2C_HandleTypeDef* hi2c, uint8_t num_of_lines){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	_LCD_startup(hi2c);
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ffa8 	bl	800030a <_LCD_startup>
	HAL_Delay(1);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f000 fd74 	bl	8000ea8 <HAL_Delay>
	_LCD_set_4_bits(hi2c, num_of_lines);
 80003c0:	78fb      	ldrb	r3, [r7, #3]
 80003c2:	4619      	mov	r1, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffcf 	bl	8000368 <_LCD_set_4_bits>
	HAL_Delay(1);
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 fd6c 	bl	8000ea8 <HAL_Delay>
	_LCD_send_command(hi2c, DISPLAY_OFF);
 80003d0:	2108      	movs	r1, #8
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f7ff ff60 	bl	8000298 <_LCD_send_command>
	HAL_Delay(1);
 80003d8:	2001      	movs	r0, #1
 80003da:	f000 fd65 	bl	8000ea8 <HAL_Delay>
	_LCD_send_command(hi2c, CLEAR_DISPLAY);
 80003de:	2101      	movs	r1, #1
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f7ff ff59 	bl	8000298 <_LCD_send_command>
	HAL_Delay(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f000 fd5e 	bl	8000ea8 <HAL_Delay>
	_LCD_send_command(hi2c, INCREMENT_NO_SHIFT);
 80003ec:	2106      	movs	r1, #6
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff ff52 	bl	8000298 <_LCD_send_command>
	HAL_Delay(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fd57 	bl	8000ea8 <HAL_Delay>
	_LCD_send_command(hi2c, 0x0C);
 80003fa:	210c      	movs	r1, #12
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ff4b 	bl	8000298 <_LCD_send_command>
	HAL_Delay(1);
 8000402:	2001      	movs	r0, #1
 8000404:	f000 fd50 	bl	8000ea8 <HAL_Delay>

}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <LCD_putchar>:

void LCD_putchar(I2C_HandleTypeDef* hi2c, char data){
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af02      	add	r7, sp, #8
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	70fb      	strb	r3, [r7, #3]
	uint8_t send[4] = {
			_LCD_get_old_bits((uint8_t)data) | E_PIN_MASK | RS_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to high
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff2b 	bl	800027a <_LCD_get_old_bits>
 8000424:	4603      	mov	r3, r0
	uint8_t send[4] = {
 8000426:	f043 030d 	orr.w	r3, r3, #13
 800042a:	b2db      	uxtb	r3, r3
 800042c:	723b      	strb	r3, [r7, #8]
			_LCD_get_old_bits((uint8_t)data) | RS_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to low
 800042e:	78fb      	ldrb	r3, [r7, #3]
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ff22 	bl	800027a <_LCD_get_old_bits>
 8000436:	4603      	mov	r3, r0
	uint8_t send[4] = {
 8000438:	f043 0309 	orr.w	r3, r3, #9
 800043c:	b2db      	uxtb	r3, r3
 800043e:	727b      	strb	r3, [r7, #9]
			_LCD_get_young_bits((uint8_t)data) | E_PIN_MASK | RS_PIN_MASK | BACKLIGHT_ON, // younger half of the command byte with E pin set to high
 8000440:	78fb      	ldrb	r3, [r7, #3]
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ff06 	bl	8000254 <_LCD_get_young_bits>
 8000448:	4603      	mov	r3, r0
	uint8_t send[4] = {
 800044a:	f043 030d 	orr.w	r3, r3, #13
 800044e:	b2db      	uxtb	r3, r3
 8000450:	72bb      	strb	r3, [r7, #10]
			_LCD_get_young_bits((uint8_t)data) | RS_PIN_MASK | BACKLIGHT_ON}; // younger half of the command byte with E pin set to low
 8000452:	78fb      	ldrb	r3, [r7, #3]
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff fefd 	bl	8000254 <_LCD_get_young_bits>
 800045a:	4603      	mov	r3, r0
	uint8_t send[4] = {
 800045c:	f043 0309 	orr.w	r3, r3, #9
 8000460:	b2db      	uxtb	r3, r3
 8000462:	72fb      	strb	r3, [r7, #11]
	int16_t send_size = sizeof(send);
 8000464:	2304      	movs	r3, #4
 8000466:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, send_size, 100);
 8000468:	89fb      	ldrh	r3, [r7, #14]
 800046a:	f107 0208 	add.w	r2, r7, #8
 800046e:	2164      	movs	r1, #100	; 0x64
 8000470:	9100      	str	r1, [sp, #0]
 8000472:	214e      	movs	r1, #78	; 0x4e
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f001 f873 	bl	8001560 <HAL_I2C_Master_Transmit>
}
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <LCD_printf>:

void LCD_printf(I2C_HandleTypeDef* hi2c, char *data){
 8000482:	b580      	push	{r7, lr}
 8000484:	b084      	sub	sp, #16
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
	//IMPLEMENT \n as NEWLINE
	//IMPLEMENT \t as two spaces
	for(char* i = data; *i != '\0'; i++)
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	e008      	b.n	80004a4 <LCD_printf+0x22>
		LCD_putchar(hi2c, *i);
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	4619      	mov	r1, r3
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f7ff ffb9 	bl	8000410 <LCD_putchar>
	for(char* i = data; *i != '\0'; i++)
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3301      	adds	r3, #1
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d1f2      	bne.n	8000492 <LCD_printf+0x10>

}
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <LCD_set_position>:

void LCD_set_position(I2C_HandleTypeDef* hi2c, uint8_t col, uint8_t row){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
 80004c4:	4613      	mov	r3, r2
 80004c6:	70bb      	strb	r3, [r7, #2]
	//rows and columns are 0 indexed
	//function omits positions outside of displays memory
	if((col <= 0x27 && col >= 0) && (row <= 1 && row >=0)){
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b27      	cmp	r3, #39	; 0x27
 80004cc:	d817      	bhi.n	80004fe <LCD_set_position+0x46>
 80004ce:	78bb      	ldrb	r3, [r7, #2]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d814      	bhi.n	80004fe <LCD_set_position+0x46>
		uint8_t address = col + row * 0x40;
 80004d4:	78bb      	ldrb	r3, [r7, #2]
 80004d6:	019b      	lsls	r3, r3, #6
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	4413      	add	r3, r2
 80004de:	73fb      	strb	r3, [r7, #15]
		address |= SET_POSITION_MASK;
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004e6:	73fb      	strb	r3, [r7, #15]
		lcd_pos.current_col = col;
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <LCD_set_position+0x50>)
 80004ea:	78fb      	ldrb	r3, [r7, #3]
 80004ec:	7053      	strb	r3, [r2, #1]
		lcd_pos.current_row = row;
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <LCD_set_position+0x50>)
 80004f0:	78bb      	ldrb	r3, [r7, #2]
 80004f2:	7013      	strb	r3, [r2, #0]
		_LCD_send_command(hi2c, address);
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	4619      	mov	r1, r3
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff fecd 	bl	8000298 <_LCD_send_command>

	}

}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000028 	.word	0x20000028

0800050c <LCD_reset_position>:

void LCD_reset_position(I2C_HandleTypeDef *hi2c){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	LCD_set_position(hi2c, 0, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f7ff ffcd 	bl	80004b8 <LCD_set_position>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <LCD_printf_align>:
	_LCD_send_command(hi2c, 0x0C);
	HAL_Delay(1);
	LCD_set_position(hi2c, lcd_pos.current_col, lcd_pos.current_row);
}

void LCD_printf_align(I2C_HandleTypeDef *hi2c, char *data, uint8_t alignment){
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	4613      	mov	r3, r2
 8000534:	71fb      	strb	r3, [r7, #7]
	//prints given string with left or middle alignment of the text
	//function resets cursor position to (0,0) after execution
	uint16_t len = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	83fb      	strh	r3, [r7, #30]
	for(char* i = data; *i != '\0'; i++, len++);
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	61bb      	str	r3, [r7, #24]
 800053e:	e005      	b.n	800054c <LCD_printf_align+0x24>
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	3301      	adds	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
 8000546:	8bfb      	ldrh	r3, [r7, #30]
 8000548:	3301      	adds	r3, #1
 800054a:	83fb      	strh	r3, [r7, #30]
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1f5      	bne.n	8000540 <LCD_printf_align+0x18>
	switch(alignment){
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d002      	beq.n	8000560 <LCD_printf_align+0x38>
 800055a:	2b02      	cmp	r3, #2
 800055c:	d00c      	beq.n	8000578 <LCD_printf_align+0x50>
 800055e:	e019      	b.n	8000594 <LCD_printf_align+0x6c>
		case ALIGN_RIGHT:
			LCD_set_position(hi2c, MAX_COLUMN - len + 1, lcd_pos.current_row);
 8000560:	8bfb      	ldrh	r3, [r7, #30]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	f1c3 0310 	rsb	r3, r3, #16
 8000568:	b2db      	uxtb	r3, r3
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <LCD_printf_align+0x9c>)
 800056c:	7812      	ldrb	r2, [r2, #0]
 800056e:	4619      	mov	r1, r3
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f7ff ffa1 	bl	80004b8 <LCD_set_position>
			break;
 8000576:	e00d      	b.n	8000594 <LCD_printf_align+0x6c>
		case ALIGN_MIDDLE:
			LCD_set_position(hi2c, (uint8_t)(floor(MAX_COLUMN + 1)/2) - (uint8_t)(len / 2), lcd_pos.current_row);
 8000578:	8bfb      	ldrh	r3, [r7, #30]
 800057a:	085b      	lsrs	r3, r3, #1
 800057c:	b29b      	uxth	r3, r3
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f1c3 0308 	rsb	r3, r3, #8
 8000584:	b2db      	uxtb	r3, r3
 8000586:	4a0f      	ldr	r2, [pc, #60]	; (80005c4 <LCD_printf_align+0x9c>)
 8000588:	7812      	ldrb	r2, [r2, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	68f8      	ldr	r0, [r7, #12]
 800058e:	f7ff ff93 	bl	80004b8 <LCD_set_position>
			break;
 8000592:	bf00      	nop
	}
	for(char* i = data; *i != '\0'; i++)
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	e008      	b.n	80005ac <LCD_printf_align+0x84>
		LCD_putchar(hi2c, *i);
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f7ff ff35 	bl	8000410 <LCD_putchar>
	for(char* i = data; *i != '\0'; i++)
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	3301      	adds	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f2      	bne.n	800059a <LCD_printf_align+0x72>
	LCD_reset_position(hi2c);
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f7ff ffa9 	bl	800050c <LCD_reset_position>

}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028

080005c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]

	  char data = '!';
 80005d2:	2321      	movs	r3, #33	; 0x21
 80005d4:	73fb      	strb	r3, [r7, #15]
	  LCD_putchar(&hi2c3, data);
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	4619      	mov	r1, r3
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x20>)
 80005dc:	f7ff ff18 	bl	8000410 <LCD_putchar>

}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000d4 	.word	0x200000d4

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fbf3 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f839 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f9e5 	bl	80009c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005fe:	f000 f899 	bl	8000734 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000602:	f000 f917 	bl	8000834 <MX_I2C3_Init>
  MX_I2C2_Init();
 8000606:	f000 f8d5 	bl	80007b4 <MX_I2C2_Init>
  MX_TIM1_Init();
 800060a:	f000 f953 	bl	80008b4 <MX_TIM1_Init>
  MX_TIM6_Init();
 800060e:	f000 f9a5 	bl	800095c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  LCD_init(&hi2c3, 2);
 8000612:	2102      	movs	r1, #2
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <main+0x70>)
 8000616:	f7ff fec7 	bl	80003a8 <LCD_init>
  char data[] = "siema";
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <main+0x74>)
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000624:	6018      	str	r0, [r3, #0]
 8000626:	3304      	adds	r3, #4
 8000628:	8019      	strh	r1, [r3, #0]
  char data2[] = "swiat";
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <main+0x78>)
 800062c:	463b      	mov	r3, r7
 800062e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000632:	6018      	str	r0, [r3, #0]
 8000634:	3304      	adds	r3, #4
 8000636:	8019      	strh	r1, [r3, #0]
  LCD_printf(&hi2c3, data);
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	4619      	mov	r1, r3
 800063e:	4807      	ldr	r0, [pc, #28]	; (800065c <main+0x70>)
 8000640:	f7ff ff1f 	bl	8000482 <LCD_printf>
  LCD_printf_align(&hi2c3, data2, ALIGN_RIGHT);
 8000644:	463b      	mov	r3, r7
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <main+0x70>)
 800064c:	f7ff ff6c 	bl	8000528 <LCD_printf_align>
  LCD_delay_ms(1, &htim6);
 8000650:	4905      	ldr	r1, [pc, #20]	; (8000668 <main+0x7c>)
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff fdb8 	bl	80001c8 <LCD_delay_ms>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	e7fe      	b.n	8000658 <main+0x6c>
 800065a:	bf00      	nop
 800065c:	200000d4 	.word	0x200000d4
 8000660:	08003a78 	.word	0x08003a78
 8000664:	08003a80 	.word	0x08003a80
 8000668:	20000174 	.word	0x20000174

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09c      	sub	sp, #112	; 0x70
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000676:	2228      	movs	r2, #40	; 0x28
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 f9e8 	bl	8003a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2234      	movs	r2, #52	; 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 f9da 	bl	8003a50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800069c:	2303      	movs	r3, #3
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2310      	movs	r3, #16
 80006b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fb14 	bl	8001cf4 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006d2:	f000 f9d3 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fb3c 	bl	8002d70 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fe:	f000 f9bd 	bl	8000a7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8000702:	f249 0360 	movw	r3, #36960	; 0x9060
 8000706:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fd48 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000726:	f000 f9a9 	bl	8000a7c <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3770      	adds	r7, #112	; 0x70
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_I2C1_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_I2C1_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <MX_I2C1_Init+0x7c>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_I2C1_Init+0x74>)
 800074c:	2201      	movs	r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000770:	f000 fe5a 	bl	8001428 <HAL_I2C_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800077a:	f000 f97f 	bl	8000a7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000782:	f001 fa1f 	bl	8001bc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800078c:	f000 f976 	bl	8000a7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000794:	f001 fa61 	bl	8001c5a <HAL_I2CEx_ConfigDigitalFilter>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 f96d 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000002c 	.word	0x2000002c
 80007ac:	40005400 	.word	0x40005400
 80007b0:	2000090e 	.word	0x2000090e

080007b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C2_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_I2C2_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_I2C2_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MX_I2C2_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_I2C2_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C2_Init+0x74>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_I2C2_Init+0x74>)
 80007f0:	f000 fe1a 	bl	8001428 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007fa:	f000 f93f 	bl	8000a7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C2_Init+0x74>)
 8000802:	f001 f9df 	bl	8001bc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 f936 	bl	8000a7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2C2_Init+0x74>)
 8000814:	f001 fa21 	bl	8001c5a <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 f92d 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000080 	.word	0x20000080
 800082c:	40005800 	.word	0x40005800
 8000830:	2000090e 	.word	0x2000090e

08000834 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_I2C3_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_I2C3_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_I2C3_Init+0x74>)
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_I2C3_Init+0x7c>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_I2C3_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_I2C3_Init+0x74>)
 800084c:	2201      	movs	r2, #1
 800084e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_I2C3_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_I2C3_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C3_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_I2C3_Init+0x74>)
 8000870:	f000 fdda 	bl	8001428 <HAL_I2C_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800087a:	f000 f8ff 	bl	8000a7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_I2C3_Init+0x74>)
 8000882:	f001 f99f 	bl	8001bc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800088c:	f000 f8f6 	bl	8000a7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2C3_Init+0x74>)
 8000894:	f001 f9e1 	bl	8001c5a <HAL_I2CEx_ConfigDigitalFilter>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 f8ed 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000d4 	.word	0x200000d4
 80008ac:	40007800 	.word	0x40007800
 80008b0:	2000090e 	.word	0x2000090e

080008b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <MX_TIM1_Init+0xa0>)
 80008d4:	4a20      	ldr	r2, [pc, #128]	; (8000958 <MX_TIM1_Init+0xa4>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_TIM1_Init+0xa0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_TIM1_Init+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_TIM1_Init+0xa0>)
 80008e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_TIM1_Init+0xa0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_TIM1_Init+0xa0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_TIM1_Init+0xa0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008fe:	4815      	ldr	r0, [pc, #84]	; (8000954 <MX_TIM1_Init+0xa0>)
 8000900:	f002 fde8 	bl	80034d4 <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800090a:	f000 f8b7 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4619      	mov	r1, r3
 800091a:	480e      	ldr	r0, [pc, #56]	; (8000954 <MX_TIM1_Init+0xa0>)
 800091c:	f002 fe31 	bl	8003582 <HAL_TIM_ConfigClockSource>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000926:	f000 f8a9 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_TIM1_Init+0xa0>)
 800093c:	f002 fffe 	bl	800393c <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000946:	f000 f899 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000128 	.word	0x20000128
 8000958:	40012c00 	.word	0x40012c00

0800095c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_TIM6_Init+0x64>)
 800096e:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <MX_TIM6_Init+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_TIM6_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_TIM6_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_TIM6_Init+0x64>)
 8000980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000984:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_TIM6_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_TIM6_Init+0x64>)
 800098e:	f002 fda1 	bl	80034d4 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000998:	f000 f870 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_TIM6_Init+0x64>)
 80009aa:	f002 ffc7 	bl	800393c <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009b4:	f000 f862 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000174 	.word	0x20000174
 80009c4:	40001000 	.word	0x40001000

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <MX_GPIO_Init+0xac>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a24      	ldr	r2, [pc, #144]	; (8000a74 <MX_GPIO_Init+0xac>)
 80009e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_GPIO_Init+0xac>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_GPIO_Init+0xac>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <MX_GPIO_Init+0xac>)
 80009fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_GPIO_Init+0xac>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_GPIO_Init+0xac>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <MX_GPIO_Init+0xac>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_GPIO_Init+0xac>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_GPIO_Init+0xac>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_GPIO_Init+0xac>)
 8000a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_GPIO_Init+0xac>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_GPIO_Init+0xb0>)
 8000a56:	f000 fb5d 	bl	8001114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2028      	movs	r0, #40	; 0x28
 8000a60:	f000 fb21 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a64:	2028      	movs	r0, #40	; 0x28
 8000a66:	f000 fb3a 	bl	80010de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000800 	.word	0x48000800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x44>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_MspInit+0x44>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x44>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x44>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	61d3      	str	r3, [r2, #28]
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x44>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000abe:	2007      	movs	r0, #7
 8000ac0:	f000 fae6 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b090      	sub	sp, #64	; 0x40
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a64      	ldr	r2, [pc, #400]	; (8000c80 <HAL_I2C_MspInit+0x1b0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d146      	bne.n	8000b80 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a63      	ldr	r2, [pc, #396]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	6153      	str	r3, [r2, #20]
 8000afe:	4b61      	ldr	r3, [pc, #388]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b5e      	ldr	r3, [pc, #376]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a5d      	ldr	r2, [pc, #372]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b14:	6153      	str	r3, [r2, #20]
 8000b16:	4b5b      	ldr	r3, [pc, #364]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b34:	2304      	movs	r3, #4
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f000 fae7 	bl	8001114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4a:	2312      	movs	r3, #18
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b56:	2304      	movs	r3, #4
 8000b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4849      	ldr	r0, [pc, #292]	; (8000c88 <HAL_I2C_MspInit+0x1b8>)
 8000b62:	f000 fad7 	bl	8001114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b66:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a46      	ldr	r2, [pc, #280]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b7e:	e07b      	b.n	8000c78 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a41      	ldr	r2, [pc, #260]	; (8000c8c <HAL_I2C_MspInit+0x1bc>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12a      	bne.n	8000be0 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	4a3d      	ldr	r2, [pc, #244]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	6153      	str	r3, [r2, #20]
 8000b96:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ba2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba8:	2312      	movs	r3, #18
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f000 faa7 	bl	8001114 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000bcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
}
 8000bde:	e04b      	b.n	8000c78 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a2a      	ldr	r2, [pc, #168]	; (8000c90 <HAL_I2C_MspInit+0x1c0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d146      	bne.n	8000c78 <HAL_I2C_MspInit+0x1a8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a25      	ldr	r2, [pc, #148]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c20:	2312      	movs	r3, #18
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c34:	4619      	mov	r1, r3
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <HAL_I2C_MspInit+0x1c4>)
 8000c38:	f000 fa6c 	bl	8001114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c42:	2312      	movs	r3, #18
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 fa5a 	bl	8001114 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000c6a:	61d3      	str	r3, [r2, #28]
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_I2C_MspInit+0x1b4>)
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3740      	adds	r7, #64	; 0x40
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	40005800 	.word	0x40005800
 8000c90:	40007800 	.word	0x40007800
 8000c94:	48000800 	.word	0x48000800

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a13      	ldr	r2, [pc, #76]	; (8000cf4 <HAL_TIM_Base_MspInit+0x5c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10c      	bne.n	8000cc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_TIM_Base_MspInit+0x60>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_TIM_Base_MspInit+0x60>)
 8000cb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_TIM_Base_MspInit+0x60>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cc2:	e010      	b.n	8000ce6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <HAL_TIM_Base_MspInit+0x64>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10b      	bne.n	8000ce6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_TIM_Base_MspInit+0x60>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <HAL_TIM_Base_MspInit+0x60>)
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <HAL_TIM_Base_MspInit+0x60>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40012c00 	.word	0x40012c00
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40001000 	.word	0x40001000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f88c 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d5c:	f000 fb4c 	bl	80013f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff ffea 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	; (8000dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	; (8000dd4 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f002 fe27 	bl	8003a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dba:	f7ff fc17 	bl	80005ec <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dc0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dcc:	08003ac8 	.word	0x08003ac8
  ldr r2, =_sbss
 8000dd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd4:	200001c4 	.word	0x200001c4

08000dd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x28>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_Init+0x28>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f94f 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f808 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fe46 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40022000 	.word	0x40022000

08000e08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f967 	bl	80010fa <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f92f 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	200001c0 	.word	0x200001c0

08000e90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200001c0 	.word	0x200001c0

08000ea8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff ffee 	bl	8000e90 <HAL_GetTick>
 8000eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_Delay+0x44>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ffde 	bl	8000e90 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff29 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff3e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff31 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	e14e      	b.n	80013c2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8140 	beq.w	80013bc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d005      	beq.n	8001154 <HAL_GPIO_Init+0x40>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d130      	bne.n	80011b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118a:	2201      	movs	r2, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	f003 0201 	and.w	r2, r3, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d017      	beq.n	80011f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d123      	bne.n	8001246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	6939      	ldr	r1, [r7, #16]
 8001242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0203 	and.w	r2, r3, #3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 809a 	beq.w	80013bc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001288:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <HAL_GPIO_Init+0x2cc>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a54      	ldr	r2, [pc, #336]	; (80013e0 <HAL_GPIO_Init+0x2cc>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b52      	ldr	r3, [pc, #328]	; (80013e0 <HAL_GPIO_Init+0x2cc>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012a0:	4a50      	ldr	r2, [pc, #320]	; (80013e4 <HAL_GPIO_Init+0x2d0>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ca:	d013      	beq.n	80012f4 <HAL_GPIO_Init+0x1e0>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a46      	ldr	r2, [pc, #280]	; (80013e8 <HAL_GPIO_Init+0x2d4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d00d      	beq.n	80012f0 <HAL_GPIO_Init+0x1dc>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a45      	ldr	r2, [pc, #276]	; (80013ec <HAL_GPIO_Init+0x2d8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d007      	beq.n	80012ec <HAL_GPIO_Init+0x1d8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a44      	ldr	r2, [pc, #272]	; (80013f0 <HAL_GPIO_Init+0x2dc>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d101      	bne.n	80012e8 <HAL_GPIO_Init+0x1d4>
 80012e4:	2303      	movs	r3, #3
 80012e6:	e006      	b.n	80012f6 <HAL_GPIO_Init+0x1e2>
 80012e8:	2305      	movs	r3, #5
 80012ea:	e004      	b.n	80012f6 <HAL_GPIO_Init+0x1e2>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e002      	b.n	80012f6 <HAL_GPIO_Init+0x1e2>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <HAL_GPIO_Init+0x1e2>
 80012f4:	2300      	movs	r3, #0
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	f002 0203 	and.w	r2, r2, #3
 80012fc:	0092      	lsls	r2, r2, #2
 80012fe:	4093      	lsls	r3, r2
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001306:	4937      	ldr	r1, [pc, #220]	; (80013e4 <HAL_GPIO_Init+0x2d0>)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <HAL_GPIO_Init+0x2e0>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001338:	4a2e      	ldr	r2, [pc, #184]	; (80013f4 <HAL_GPIO_Init+0x2e0>)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_GPIO_Init+0x2e0>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001362:	4a24      	ldr	r2, [pc, #144]	; (80013f4 <HAL_GPIO_Init+0x2e0>)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <HAL_GPIO_Init+0x2e0>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_GPIO_Init+0x2e0>)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_GPIO_Init+0x2e0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <HAL_GPIO_Init+0x2e0>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f47f aea9 	bne.w	8001124 <HAL_GPIO_Init+0x10>
  }
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	48000400 	.word	0x48000400
 80013ec:	48000800 	.word	0x48000800
 80013f0:	48000c00 	.word	0x48000c00
 80013f4:	40010400 	.word	0x40010400

080013f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f8d6 	bl	80005c8 <HAL_GPIO_EXTI_Callback>
  }
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e08d      	b.n	8001556 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fb3e 	bl	8000ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2224      	movs	r2, #36	; 0x24
 8001458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001478:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001488:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d107      	bne.n	80014a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	e006      	b.n	80014b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d108      	bne.n	80014ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	e007      	b.n	80014da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69d9      	ldr	r1, [r3, #28]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1a      	ldr	r2, [r3, #32]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af02      	add	r7, sp, #8
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	461a      	mov	r2, r3
 800156c:	460b      	mov	r3, r1
 800156e:	817b      	strh	r3, [r7, #10]
 8001570:	4613      	mov	r3, r2
 8001572:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b20      	cmp	r3, #32
 800157e:	f040 80fd 	bne.w	800177c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_I2C_Master_Transmit+0x30>
 800158c:	2302      	movs	r3, #2
 800158e:	e0f6      	b.n	800177e <HAL_I2C_Master_Transmit+0x21e>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001598:	f7ff fc7a 	bl	8000e90 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2319      	movs	r3, #25
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 f914 	bl	80017d8 <I2C_WaitOnFlagUntilTimeout>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0e1      	b.n	800177e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2221      	movs	r2, #33	; 0x21
 80015be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2210      	movs	r2, #16
 80015c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	893a      	ldrh	r2, [r7, #8]
 80015da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	2bff      	cmp	r3, #255	; 0xff
 80015ea:	d906      	bls.n	80015fa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80015f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	e007      	b.n	800160a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001608:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160e:	2b00      	cmp	r3, #0
 8001610:	d024      	beq.n	800165c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162c:	b29b      	uxth	r3, r3
 800162e:	3b01      	subs	r3, #1
 8001630:	b29a      	uxth	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163a:	3b01      	subs	r3, #1
 800163c:	b29a      	uxth	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001646:	b2db      	uxtb	r3, r3
 8001648:	3301      	adds	r3, #1
 800164a:	b2da      	uxtb	r2, r3
 800164c:	8979      	ldrh	r1, [r7, #10]
 800164e:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <HAL_I2C_Master_Transmit+0x228>)
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 fa83 	bl	8001b60 <I2C_TransferConfig>
 800165a:	e066      	b.n	800172a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001660:	b2da      	uxtb	r2, r3
 8001662:	8979      	ldrh	r1, [r7, #10]
 8001664:	4b48      	ldr	r3, [pc, #288]	; (8001788 <HAL_I2C_Master_Transmit+0x228>)
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 fa78 	bl	8001b60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001670:	e05b      	b.n	800172a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	6a39      	ldr	r1, [r7, #32]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f907 	bl	800188a <I2C_WaitOnTXISFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e07b      	b.n	800177e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d034      	beq.n	800172a <HAL_I2C_Master_Transmit+0x1ca>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d130      	bne.n	800172a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	2200      	movs	r2, #0
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 f880 	bl	80017d8 <I2C_WaitOnFlagUntilTimeout>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e04d      	b.n	800177e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2bff      	cmp	r3, #255	; 0xff
 80016ea:	d90e      	bls.n	800170a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	22ff      	movs	r2, #255	; 0xff
 80016f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	8979      	ldrh	r1, [r7, #10]
 80016fa:	2300      	movs	r3, #0
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fa2c 	bl	8001b60 <I2C_TransferConfig>
 8001708:	e00f      	b.n	800172a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001718:	b2da      	uxtb	r2, r3
 800171a:	8979      	ldrh	r1, [r7, #10]
 800171c:	2300      	movs	r3, #0
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 fa1b 	bl	8001b60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d19e      	bne.n	8001672 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	6a39      	ldr	r1, [r7, #32]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 f8ed 	bl	8001918 <I2C_WaitOnSTOPFlagUntilTimeout>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e01a      	b.n	800177e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2220      	movs	r2, #32
 800174e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6859      	ldr	r1, [r3, #4]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_I2C_Master_Transmit+0x22c>)
 800175c:	400b      	ands	r3, r1
 800175e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2220      	movs	r2, #32
 8001764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e000      	b.n	800177e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800177c:	2302      	movs	r3, #2
  }
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	80002000 	.word	0x80002000
 800178c:	fe00e800 	.word	0xfe00e800

08001790 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d103      	bne.n	80017ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d007      	beq.n	80017cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	619a      	str	r2, [r3, #24]
  }
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	4613      	mov	r3, r2
 80017e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017e8:	e03b      	b.n	8001862 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f8d6 	bl	80019a0 <I2C_IsErrorOccurred>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e041      	b.n	8001882 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d02d      	beq.n	8001862 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001806:	f7ff fb43 	bl	8000e90 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d302      	bcc.n	800181c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d122      	bne.n	8001862 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	4013      	ands	r3, r2
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	429a      	cmp	r2, r3
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	429a      	cmp	r2, r3
 8001838:	d113      	bne.n	8001862 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f043 0220 	orr.w	r2, r3, #32
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699a      	ldr	r2, [r3, #24]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4013      	ands	r3, r2
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	429a      	cmp	r2, r3
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	429a      	cmp	r2, r3
 800187e:	d0b4      	beq.n	80017ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001896:	e033      	b.n	8001900 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f87f 	bl	80019a0 <I2C_IsErrorOccurred>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e031      	b.n	8001910 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b2:	d025      	beq.n	8001900 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b4:	f7ff faec 	bl	8000e90 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d302      	bcc.n	80018ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d11a      	bne.n	8001900 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d013      	beq.n	8001900 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	f043 0220 	orr.w	r2, r3, #32
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2220      	movs	r2, #32
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e007      	b.n	8001910 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b02      	cmp	r3, #2
 800190c:	d1c4      	bne.n	8001898 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001924:	e02f      	b.n	8001986 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f838 	bl	80019a0 <I2C_IsErrorOccurred>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e02d      	b.n	8001996 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193a:	f7ff faa9 	bl	8000e90 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	429a      	cmp	r2, r3
 8001948:	d302      	bcc.n	8001950 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d11a      	bne.n	8001986 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	2b20      	cmp	r3, #32
 800195c:	d013      	beq.n	8001986 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f043 0220 	orr.w	r2, r3, #32
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e007      	b.n	8001996 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	2b20      	cmp	r3, #32
 8001992:	d1c8      	bne.n	8001926 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d068      	beq.n	8001a9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2210      	movs	r2, #16
 80019d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019d4:	e049      	b.n	8001a6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d045      	beq.n	8001a6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019de:	f7ff fa57 	bl	8000e90 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d302      	bcc.n	80019f4 <I2C_IsErrorOccurred+0x54>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d13a      	bne.n	8001a6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a16:	d121      	bne.n	8001a5c <I2C_IsErrorOccurred+0xbc>
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a1e:	d01d      	beq.n	8001a5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001a20:	7cfb      	ldrb	r3, [r7, #19]
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d01a      	beq.n	8001a5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a36:	f7ff fa2b 	bl	8000e90 <HAL_GetTick>
 8001a3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a3c:	e00e      	b.n	8001a5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a3e:	f7ff fa27 	bl	8000e90 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b19      	cmp	r3, #25
 8001a4a:	d907      	bls.n	8001a5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	f043 0320 	orr.w	r3, r3, #32
 8001a52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001a5a:	e006      	b.n	8001a6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d1e9      	bne.n	8001a3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d003      	beq.n	8001a80 <I2C_IsErrorOccurred+0xe0>
 8001a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0aa      	beq.n	80019d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d103      	bne.n	8001a90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00b      	beq.n	8001ac8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00b      	beq.n	8001b0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01c      	beq.n	8001b4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff fe3b 	bl	8001790 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <I2C_IsErrorOccurred+0x1bc>)
 8001b26:	400b      	ands	r3, r1
 8001b28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	fe00e800 	.word	0xfe00e800

08001b60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	817b      	strh	r3, [r7, #10]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b72:	897b      	ldrh	r3, [r7, #10]
 8001b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b78:	7a7b      	ldrb	r3, [r7, #9]
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	0d5b      	lsrs	r3, r3, #21
 8001b9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <I2C_TransferConfig+0x60>)
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	ea02 0103 	and.w	r1, r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bb2:	bf00      	nop
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	03ff63ff 	.word	0x03ff63ff

08001bc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d138      	bne.n	8001c4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e032      	b.n	8001c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2224      	movs	r2, #36	; 0x24
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e000      	b.n	8001c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c4c:	2302      	movs	r3, #2
  }
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d139      	bne.n	8001ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e033      	b.n	8001ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2224      	movs	r2, #36	; 0x24
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0201 	bic.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e000      	b.n	8001ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ce4:	2302      	movs	r3, #2
  }
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f001 b823 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 817d 	beq.w	800202a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d30:	4bbc      	ldr	r3, [pc, #752]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d00c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d3c:	4bb9      	ldr	r3, [pc, #740]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d15c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x10e>
 8001d48:	4bb6      	ldr	r3, [pc, #728]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d155      	bne.n	8001e02 <HAL_RCC_OscConfig+0x10e>
 8001d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_OscConfig+0x94>
 8001d82:	4ba8      	ldr	r3, [pc, #672]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	e015      	b.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001da4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001db0:	4b9c      	ldr	r3, [pc, #624]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001db8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001dbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001dc0:	fa92 f2a2 	rbit	r2, r2
 8001dc4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001dc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001dcc:	fab2 f282 	clz	r2, r2
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	f042 0220 	orr.w	r2, r2, #32
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f002 021f 	and.w	r2, r2, #31
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f202 	lsl.w	r2, r1, r2
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 811f 	beq.w	8002028 <HAL_RCC_OscConfig+0x334>
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 8116 	bne.w	8002028 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f000 bfaf 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12e>
 8001e14:	4b83      	ldr	r3, [pc, #524]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a82      	ldr	r2, [pc, #520]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e036      	b.n	8001e90 <HAL_RCC_OscConfig+0x19c>
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x158>
 8001e32:	4b7c      	ldr	r3, [pc, #496]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7b      	ldr	r2, [pc, #492]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b79      	ldr	r3, [pc, #484]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a78      	ldr	r2, [pc, #480]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e021      	b.n	8001e90 <HAL_RCC_OscConfig+0x19c>
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x184>
 8001e5e:	4b71      	ldr	r3, [pc, #452]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a70      	ldr	r2, [pc, #448]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b6e      	ldr	r3, [pc, #440]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a6d      	ldr	r2, [pc, #436]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x19c>
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a69      	ldr	r2, [pc, #420]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a66      	ldr	r2, [pc, #408]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e90:	4b64      	ldr	r3, [pc, #400]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	f023 020f 	bic.w	r2, r3, #15
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	495f      	ldr	r1, [pc, #380]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d059      	beq.n	8001f6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7fe ffe9 	bl	8000e90 <HAL_GetTick>
 8001ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7fe ffe4 	bl	8000e90 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	; 0x64
 8001ed2:	d902      	bls.n	8001eda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	f000 bf43 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 8001eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ede:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001eee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x218>
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	e015      	b.n	8001f38 <HAL_RCC_OscConfig+0x244>
 8001f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f10:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f24:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f34:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f3c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f44:	fa92 f2a2 	rbit	r2, r2
 8001f48:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f50:	fab2 f282 	clz	r2, r2
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f042 0220 	orr.w	r2, r2, #32
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f002 021f 	and.w	r2, r2, #31
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f202 	lsl.w	r2, r1, r2
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ab      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x1d0>
 8001f6c:	e05d      	b.n	800202a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe ff8f 	bl	8000e90 <HAL_GetTick>
 8001f72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7fe ff8a 	bl	8000e90 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d902      	bls.n	8001f8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	f000 bee9 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 8001f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f92:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001fa2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d102      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x2cc>
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	e015      	b.n	8001fec <HAL_RCC_OscConfig+0x2f8>
 8001fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fdc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_RCC_OscConfig+0x330>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ff0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ff4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ff8:	fa92 f2a2 	rbit	r2, r2
 8001ffc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002000:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002004:	fab2 f282 	clz	r2, r2
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f042 0220 	orr.w	r2, r2, #32
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f002 021f 	and.w	r2, r2, #31
 8002014:	2101      	movs	r1, #1
 8002016:	fa01 f202 	lsl.w	r2, r1, r2
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ab      	bne.n	8001f78 <HAL_RCC_OscConfig+0x284>
 8002020:	e003      	b.n	800202a <HAL_RCC_OscConfig+0x336>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 817d 	beq.w	800233a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002040:	4ba6      	ldr	r3, [pc, #664]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800204c:	4ba3      	ldr	r3, [pc, #652]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b08      	cmp	r3, #8
 8002056:	d172      	bne.n	800213e <HAL_RCC_OscConfig+0x44a>
 8002058:	4ba0      	ldr	r3, [pc, #640]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d16c      	bne.n	800213e <HAL_RCC_OscConfig+0x44a>
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002076:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_RCC_OscConfig+0x3a0>
 800208e:	4b93      	ldr	r3, [pc, #588]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e013      	b.n	80020bc <HAL_RCC_OscConfig+0x3c8>
 8002094:	2302      	movs	r3, #2
 8002096:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80020b8:	4b88      	ldr	r3, [pc, #544]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	2202      	movs	r2, #2
 80020be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80020c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020c6:	fa92 f2a2 	rbit	r2, r2
 80020ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCC_OscConfig+0x410>
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d002      	beq.n	8002104 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	f000 be2e 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b75      	ldr	r3, [pc, #468]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	21f8      	movs	r1, #248	; 0xf8
 800211a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002122:	fa91 f1a1 	rbit	r1, r1
 8002126:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800212a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800212e:	fab1 f181 	clz	r1, r1
 8002132:	b2c9      	uxtb	r1, r1
 8002134:	408b      	lsls	r3, r1
 8002136:	4969      	ldr	r1, [pc, #420]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213c:	e0fd      	b.n	800233a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002142:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8088 	beq.w	8002260 <HAL_RCC_OscConfig+0x56c>
 8002150:	2301      	movs	r3, #1
 8002152:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002162:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002170:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	461a      	mov	r2, r3
 8002178:	2301      	movs	r3, #1
 800217a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe fe88 	bl	8000e90 <HAL_GetTick>
 8002180:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002186:	f7fe fe83 	bl	8000e90 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d902      	bls.n	800219c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	f000 bde2 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 800219c:	2302      	movs	r3, #2
 800219e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d102      	bne.n	80021cc <HAL_RCC_OscConfig+0x4d8>
 80021c6:	4b45      	ldr	r3, [pc, #276]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	e013      	b.n	80021f4 <HAL_RCC_OscConfig+0x500>
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021de:	2302      	movs	r3, #2
 80021e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021f0:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2202      	movs	r2, #2
 80021f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80021fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021fe:	fa92 f2a2 	rbit	r2, r2
 8002202:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002206:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0220 	orr.w	r2, r2, #32
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0af      	beq.n	8002186 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	21f8      	movs	r1, #248	; 0xf8
 800223c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002244:	fa91 f1a1 	rbit	r1, r1
 8002248:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800224c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002250:	fab1 f181 	clz	r1, r1
 8002254:	b2c9      	uxtb	r1, r1
 8002256:	408b      	lsls	r3, r1
 8002258:	4920      	ldr	r1, [pc, #128]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
 800225e:	e06c      	b.n	800233a <HAL_RCC_OscConfig+0x646>
 8002260:	2301      	movs	r3, #1
 8002262:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002272:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002280:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	461a      	mov	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fe00 	bl	8000e90 <HAL_GetTick>
 8002290:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002296:	f7fe fdfb 	bl	8000e90 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d902      	bls.n	80022ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	f000 bd5a 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 80022ac:	2302      	movs	r3, #2
 80022ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80022be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d104      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5ec>
 80022d6:	4b01      	ldr	r3, [pc, #4]	; (80022dc <HAL_RCC_OscConfig+0x5e8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	e015      	b.n	8002308 <HAL_RCC_OscConfig+0x614>
 80022dc:	40021000 	.word	0x40021000
 80022e0:	2302      	movs	r3, #2
 80022e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002304:	4bc8      	ldr	r3, [pc, #800]	; (8002628 <HAL_RCC_OscConfig+0x934>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2202      	movs	r2, #2
 800230a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800230e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002312:	fa92 f2a2 	rbit	r2, r2
 8002316:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800231a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f042 0220 	orr.w	r2, r2, #32
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 021f 	and.w	r2, r2, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ad      	bne.n	8002296 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8110 	beq.w	8002570 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d079      	beq.n	8002454 <HAL_RCC_OscConfig+0x760>
 8002360:	2301      	movs	r3, #1
 8002362:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	4bab      	ldr	r3, [pc, #684]	; (800262c <HAL_RCC_OscConfig+0x938>)
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	461a      	mov	r2, r3
 8002386:	2301      	movs	r3, #1
 8002388:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7fe fd81 	bl	8000e90 <HAL_GetTick>
 800238e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e00a      	b.n	80023aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002394:	f7fe fd7c 	bl	8000e90 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d902      	bls.n	80023aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	f000 bcdb 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023c4:	2202      	movs	r2, #2
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	fa93 f2a3 	rbit	r2, r3
 80023d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023e8:	2202      	movs	r2, #2
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	fa93 f2a3 	rbit	r2, r3
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002402:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002404:	4b88      	ldr	r3, [pc, #544]	; (8002628 <HAL_RCC_OscConfig+0x934>)
 8002406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002410:	2102      	movs	r1, #2
 8002412:	6019      	str	r1, [r3, #0]
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fa93 f1a3 	rbit	r1, r3
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800242a:	6019      	str	r1, [r3, #0]
  return result;
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0a0      	beq.n	8002394 <HAL_RCC_OscConfig+0x6a0>
 8002452:	e08d      	b.n	8002570 <HAL_RCC_OscConfig+0x87c>
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002476:	601a      	str	r2, [r3, #0]
  return result;
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002480:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x938>)
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	461a      	mov	r2, r3
 8002492:	2300      	movs	r3, #0
 8002494:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7fe fcfb 	bl	8000e90 <HAL_GetTick>
 800249a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a0:	f7fe fcf6 	bl	8000e90 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d902      	bls.n	80024b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	f000 bc55 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024be:	2202      	movs	r2, #2
 80024c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024e2:	2202      	movs	r2, #2
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002506:	2202      	movs	r2, #2
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002520:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_OscConfig+0x934>)
 8002524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800252e:	2102      	movs	r1, #2
 8002530:	6019      	str	r1, [r3, #0]
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f1a3 	rbit	r1, r3
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002548:	6019      	str	r1, [r3, #0]
  return result;
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d197      	bne.n	80024a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 81a1 	beq.w	80028c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <HAL_RCC_OscConfig+0x934>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d116      	bne.n	80025c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_RCC_OscConfig+0x934>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	4a22      	ldr	r2, [pc, #136]	; (8002628 <HAL_RCC_OscConfig+0x934>)
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a2:	61d3      	str	r3, [r2, #28]
 80025a4:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_RCC_OscConfig+0x934>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_RCC_OscConfig+0x93c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d11a      	bne.n	8002608 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_RCC_OscConfig+0x93c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a16      	ldr	r2, [pc, #88]	; (8002630 <HAL_RCC_OscConfig+0x93c>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7fe fc57 	bl	8000e90 <HAL_GetTick>
 80025e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	e009      	b.n	80025fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e8:	f7fe fc52 	bl	8000e90 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b64      	cmp	r3, #100	; 0x64
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e3b1      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <HAL_RCC_OscConfig+0x93c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ef      	beq.n	80025e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10d      	bne.n	8002634 <HAL_RCC_OscConfig+0x940>
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCC_OscConfig+0x934>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4a02      	ldr	r2, [pc, #8]	; (8002628 <HAL_RCC_OscConfig+0x934>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6213      	str	r3, [r2, #32]
 8002624:	e03c      	b.n	80026a0 <HAL_RCC_OscConfig+0x9ac>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	10908120 	.word	0x10908120
 8002630:	40007000 	.word	0x40007000
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x96a>
 8002644:	4bc1      	ldr	r3, [pc, #772]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4ac0      	ldr	r2, [pc, #768]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	4bbe      	ldr	r3, [pc, #760]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4abd      	ldr	r2, [pc, #756]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 8002656:	f023 0304 	bic.w	r3, r3, #4
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	e020      	b.n	80026a0 <HAL_RCC_OscConfig+0x9ac>
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x994>
 800266e:	4bb7      	ldr	r3, [pc, #732]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4ab6      	ldr	r2, [pc, #728]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	4bb4      	ldr	r3, [pc, #720]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4ab3      	ldr	r2, [pc, #716]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6213      	str	r3, [r2, #32]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0x9ac>
 8002688:	4bb0      	ldr	r3, [pc, #704]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4aaf      	ldr	r2, [pc, #700]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	4bad      	ldr	r3, [pc, #692]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4aac      	ldr	r2, [pc, #688]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 800269a:	f023 0304 	bic.w	r3, r3, #4
 800269e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8081 	beq.w	80027b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fbed 	bl	8000e90 <HAL_GetTick>
 80026b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fe fbe8 	bl	8000e90 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e345      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026dc:	2202      	movs	r2, #2
 80026de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	fa93 f2a3 	rbit	r2, r3
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002700:	2202      	movs	r2, #2
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800271a:	601a      	str	r2, [r3, #0]
  return result;
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002724:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d102      	bne.n	8002740 <HAL_RCC_OscConfig+0xa4c>
 800273a:	4b84      	ldr	r3, [pc, #528]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	e013      	b.n	8002768 <HAL_RCC_OscConfig+0xa74>
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002748:	2202      	movs	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	4b79      	ldr	r3, [pc, #484]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800276c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002770:	2102      	movs	r1, #2
 8002772:	6011      	str	r1, [r2, #0]
 8002774:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002778:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	fa92 f1a2 	rbit	r1, r2
 8002782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002786:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800278a:	6011      	str	r1, [r2, #0]
  return result;
 800278c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002790:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	fab2 f282 	clz	r2, r2
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	f002 021f 	and.w	r2, r2, #31
 80027a6:	2101      	movs	r1, #1
 80027a8:	fa01 f202 	lsl.w	r2, r1, r2
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d084      	beq.n	80026bc <HAL_RCC_OscConfig+0x9c8>
 80027b2:	e07f      	b.n	80028b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b4:	f7fe fb6c 	bl	8000e90 <HAL_GetTick>
 80027b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027bc:	e00b      	b.n	80027d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe fb67 	bl	8000e90 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e2c4      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027de:	2202      	movs	r2, #2
 80027e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002802:	2202      	movs	r2, #2
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	fa93 f2a3 	rbit	r2, r3
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800281c:	601a      	str	r2, [r3, #0]
  return result;
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002826:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d102      	bne.n	8002842 <HAL_RCC_OscConfig+0xb4e>
 800283c:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	e013      	b.n	800286a <HAL_RCC_OscConfig+0xb76>
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800284a:	2202      	movs	r2, #2
 800284c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	4b39      	ldr	r3, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002872:	2102      	movs	r1, #2
 8002874:	6011      	str	r1, [r2, #0]
 8002876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	fa92 f1a2 	rbit	r1, r2
 8002884:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002888:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800288c:	6011      	str	r1, [r2, #0]
  return result;
 800288e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002892:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	fab2 f282 	clz	r2, r2
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f002 021f 	and.w	r2, r2, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d184      	bne.n	80027be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028bc:	4b23      	ldr	r3, [pc, #140]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 80028c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8242 	beq.w	8002d5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_RCC_OscConfig+0xc58>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	f000 8213 	beq.w	8002d0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	f040 8162 	bne.w	8002bbe <HAL_RCC_OscConfig+0xeca>
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002902:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800291e:	601a      	str	r2, [r3, #0]
  return result;
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002928:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002934:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	461a      	mov	r2, r3
 800293c:	2300      	movs	r3, #0
 800293e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe faa6 	bl	8000e90 <HAL_GetTick>
 8002944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	e00c      	b.n	8002964 <HAL_RCC_OscConfig+0xc70>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fa9e 	bl	8000e90 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1fd      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800296c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002988:	601a      	str	r2, [r3, #0]
  return result;
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002992:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0xcba>
 80029a8:	4bb0      	ldr	r3, [pc, #704]	; (8002c6c <HAL_RCC_OscConfig+0xf78>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	e027      	b.n	80029fe <HAL_RCC_OscConfig+0xd0a>
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fa93 f2a3 	rbit	r2, r3
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	4b9c      	ldr	r3, [pc, #624]	; (8002c6c <HAL_RCC_OscConfig+0xf78>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a02:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a0a:	6011      	str	r1, [r2, #0]
 8002a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a10:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	fa92 f1a2 	rbit	r1, r2
 8002a1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a1e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a22:	6011      	str	r1, [r2, #0]
  return result;
 8002a24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a28:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	fab2 f282 	clz	r2, r2
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	f042 0220 	orr.w	r2, r2, #32
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	f002 021f 	and.w	r2, r2, #31
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f202 	lsl.w	r2, r1, r2
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d182      	bne.n	8002950 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4a:	4b88      	ldr	r3, [pc, #544]	; (8002c6c <HAL_RCC_OscConfig+0xf78>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	497f      	ldr	r1, [pc, #508]	; (8002c6c <HAL_RCC_OscConfig+0xf78>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f2a3 	rbit	r2, r3
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a96:	601a      	str	r2, [r3, #0]
  return result;
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002aa0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe f9ea 	bl	8000e90 <HAL_GetTick>
 8002abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac0:	e009      	b.n	8002ad6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe f9e5 	bl	8000e90 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e144      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fa93 f2a3 	rbit	r2, r3
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002afa:	601a      	str	r2, [r3, #0]
  return result;
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d102      	bne.n	8002b20 <HAL_RCC_OscConfig+0xe2c>
 8002b1a:	4b54      	ldr	r3, [pc, #336]	; (8002c6c <HAL_RCC_OscConfig+0xf78>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	e027      	b.n	8002b70 <HAL_RCC_OscConfig+0xe7c>
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f2a3 	rbit	r2, r3
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <HAL_RCC_OscConfig+0xf78>)
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b74:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b7c:	6011      	str	r1, [r2, #0]
 8002b7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b82:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	fa92 f1a2 	rbit	r1, r2
 8002b8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b94:	6011      	str	r1, [r2, #0]
  return result;
 8002b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b9a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	fab2 f282 	clz	r2, r2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f042 0220 	orr.w	r2, r2, #32
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f002 021f 	and.w	r2, r2, #31
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d082      	beq.n	8002ac2 <HAL_RCC_OscConfig+0xdce>
 8002bbc:	e0cf      	b.n	8002d5e <HAL_RCC_OscConfig+0x106a>
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fa93 f2a3 	rbit	r2, r3
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002be2:	601a      	str	r2, [r3, #0]
  return result;
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2300      	movs	r3, #0
 8002c02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7fe f944 	bl	8000e90 <HAL_GetTick>
 8002c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0c:	e009      	b.n	8002c22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7fe f93f 	bl	8000e90 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e09e      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c46:	601a      	str	r2, [r3, #0]
  return result;
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d104      	bne.n	8002c70 <HAL_RCC_OscConfig+0xf7c>
 8002c66:	4b01      	ldr	r3, [pc, #4]	; (8002c6c <HAL_RCC_OscConfig+0xf78>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	e029      	b.n	8002cc0 <HAL_RCC_OscConfig+0xfcc>
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	fa93 f2a3 	rbit	r2, r3
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_RCC_OscConfig+0x1078>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ccc:	6011      	str	r1, [r2, #0]
 8002cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	fa92 f1a2 	rbit	r1, r2
 8002cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ce4:	6011      	str	r1, [r2, #0]
  return result;
 8002ce6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	fab2 f282 	clz	r2, r2
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f042 0220 	orr.w	r2, r2, #32
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	f002 021f 	and.w	r2, r2, #31
 8002d00:	2101      	movs	r1, #1
 8002d02:	fa01 f202 	lsl.w	r2, r1, r2
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d180      	bne.n	8002c0e <HAL_RCC_OscConfig+0xf1a>
 8002d0c:	e027      	b.n	8002d5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01e      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d22:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_RCC_OscConfig+0x1078>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d10b      	bne.n	8002d5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000

08002d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b09e      	sub	sp, #120	; 0x78
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e162      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d88:	4b90      	ldr	r3, [pc, #576]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d910      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b8d      	ldr	r3, [pc, #564]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0207 	bic.w	r2, r3, #7
 8002d9e:	498b      	ldr	r1, [pc, #556]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e14a      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b82      	ldr	r3, [pc, #520]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	497f      	ldr	r1, [pc, #508]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80dc 	beq.w	8002f9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d13c      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xf6>
 8002dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xa6>
 8002e10:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	e00f      	b.n	8002e36 <HAL_RCC_ClockConfig+0xc6>
 8002e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	667b      	str	r3, [r7, #100]	; 0x64
 8002e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e28:	663b      	str	r3, [r7, #96]	; 0x60
 8002e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e32:	4b67      	ldr	r3, [pc, #412]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e3e:	fa92 f2a2 	rbit	r2, r2
 8002e42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e46:	fab2 f282 	clz	r2, r2
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f042 0220 	orr.w	r2, r2, #32
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 021f 	and.w	r2, r2, #31
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d17b      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0f3      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d13c      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x178>
 8002e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d102      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x128>
 8002e92:	4b4f      	ldr	r3, [pc, #316]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	e00f      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x148>
 8002e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8002eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb4:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ebc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f042 0220 	orr.w	r2, r2, #32
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f002 021f 	and.w	r2, r2, #31
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f202 	lsl.w	r2, r1, r2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d13a      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0b2      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x1a0>
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	e00d      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1bc>
 8002f10:	2302      	movs	r3, #2
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	623b      	str	r3, [r7, #32]
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	61ba      	str	r2, [r7, #24]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	fa92 f2a2 	rbit	r2, r2
 8002f36:	617a      	str	r2, [r7, #20]
  return result;
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	fab2 f282 	clz	r2, r2
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	f042 0220 	orr.w	r2, r2, #32
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f002 021f 	and.w	r2, r2, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e079      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	491a      	ldr	r1, [pc, #104]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f6c:	f7fd ff90 	bl	8000e90 <HAL_GetTick>
 8002f70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7fd ff8c 	bl	8000e90 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e061      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d214      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 0207 	bic.w	r2, r3, #7
 8002fb2:	4906      	ldr	r1, [pc, #24]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e040      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCC_ClockConfig+0x2e8>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	491a      	ldr	r1, [pc, #104]	; (8003058 <HAL_RCC_ClockConfig+0x2e8>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <HAL_RCC_ClockConfig+0x2e8>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4912      	ldr	r1, [pc, #72]	; (8003058 <HAL_RCC_ClockConfig+0x2e8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003012:	f000 f829 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003016:	4601      	mov	r1, r0
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_RCC_ClockConfig+0x2e8>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003020:	22f0      	movs	r2, #240	; 0xf0
 8003022:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	fa92 f2a2 	rbit	r2, r2
 800302a:	60fa      	str	r2, [r7, #12]
  return result;
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	fab2 f282 	clz	r2, r2
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	40d3      	lsrs	r3, r2
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x2ec>)
 8003038:	5cd3      	ldrb	r3, [r2, r3]
 800303a:	fa21 f303 	lsr.w	r3, r1, r3
 800303e:	4a08      	ldr	r2, [pc, #32]	; (8003060 <HAL_RCC_ClockConfig+0x2f0>)
 8003040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_RCC_ClockConfig+0x2f4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fede 	bl	8000e08 <HAL_InitTick>
  
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3778      	adds	r7, #120	; 0x78
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	08003a88 	.word	0x08003a88
 8003060:	20000000 	.word	0x20000000
 8003064:	20000004 	.word	0x20000004

08003068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b04      	cmp	r3, #4
 8003090:	d002      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x30>
 8003092:	2b08      	cmp	r3, #8
 8003094:	d003      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x36>
 8003096:	e026      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_RCC_GetSysClockFreq+0x98>)
 800309a:	613b      	str	r3, [r7, #16]
      break;
 800309c:	e026      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	0c9b      	lsrs	r3, r3, #18
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	4a17      	ldr	r2, [pc, #92]	; (8003104 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030a8:	5cd3      	ldrb	r3, [r2, r3]
 80030aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_RCC_GetSysClockFreq+0x94>)
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030b6:	5cd3      	ldrb	r3, [r2, r3]
 80030b8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030c4:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <HAL_RCC_GetSysClockFreq+0x98>)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e004      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a0c      	ldr	r2, [pc, #48]	; (800310c <HAL_RCC_GetSysClockFreq+0xa4>)
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]
      break;
 80030e4:	e002      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_RCC_GetSysClockFreq+0x98>)
 80030e8:	613b      	str	r3, [r7, #16]
      break;
 80030ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ec:	693b      	ldr	r3, [r7, #16]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	007a1200 	.word	0x007a1200
 8003104:	08003aa0 	.word	0x08003aa0
 8003108:	08003ab0 	.word	0x08003ab0
 800310c:	003d0900 	.word	0x003d0900

08003110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000000 	.word	0x20000000

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800312e:	f7ff ffef 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003132:	4601      	mov	r1, r0
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800313c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003140:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	fa92 f2a2 	rbit	r2, r2
 8003148:	603a      	str	r2, [r7, #0]
  return result;
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	fab2 f282 	clz	r2, r2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	40d3      	lsrs	r3, r2
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000
 8003168:	08003a98 	.word	0x08003a98

0800316c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003172:	f7ff ffcd 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003176:	4601      	mov	r1, r0
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003180:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003184:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	fa92 f2a2 	rbit	r2, r2
 800318c:	603a      	str	r2, [r7, #0]
  return result;
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	fab2 f282 	clz	r2, r2
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	40d3      	lsrs	r3, r2
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800319a:	5cd3      	ldrb	r3, [r2, r3]
 800319c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	08003a98 	.word	0x08003a98

080031b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b092      	sub	sp, #72	; 0x48
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80d4 	beq.w	800337c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d4:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10e      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e0:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ea:	61d3      	str	r3, [r2, #28]
 80031ec:	4b48      	ldr	r3, [pc, #288]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b45      	ldr	r3, [pc, #276]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4b42      	ldr	r3, [pc, #264]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a41      	ldr	r2, [pc, #260]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fd fe3b 	bl	8000e90 <HAL_GetTick>
 800321a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fd fe37 	bl	8000e90 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d901      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e14b      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8084 	beq.w	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003258:	429a      	cmp	r2, r3
 800325a:	d07c      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800325c:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800326a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	461a      	mov	r2, r3
 8003286:	2301      	movs	r3, #1
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800328e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	461a      	mov	r2, r3
 80032aa:	2300      	movs	r3, #0
 80032ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04b      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fd fde7 	bl	8000e90 <HAL_GetTick>
 80032c2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fd fde3 	bl	8000e90 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0f5      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80032dc:	2302      	movs	r3, #2
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
 80032e8:	2302      	movs	r3, #2
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	61fb      	str	r3, [r7, #28]
  return result;
 80032f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d108      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800330a:	4b01      	ldr	r3, [pc, #4]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	e00d      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
 8003318:	10908100 	.word	0x10908100
 800331c:	2302      	movs	r3, #2
 800331e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	4b69      	ldr	r3, [pc, #420]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2202      	movs	r2, #2
 800332e:	613a      	str	r2, [r7, #16]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	60fa      	str	r2, [r7, #12]
  return result;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0b7      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003356:	4b5e      	ldr	r3, [pc, #376]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	495b      	ldr	r1, [pc, #364]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003364:	4313      	orrs	r3, r2
 8003366:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003368:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003370:	4b57      	ldr	r3, [pc, #348]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4a56      	ldr	r2, [pc, #344]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003388:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f023 0203 	bic.w	r2, r3, #3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	494e      	ldr	r1, [pc, #312]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003396:	4313      	orrs	r3, r2
 8003398:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033a6:	4b4a      	ldr	r3, [pc, #296]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f023 0210 	bic.w	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4947      	ldr	r1, [pc, #284]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033c4:	4b42      	ldr	r3, [pc, #264]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	493f      	ldr	r1, [pc, #252]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f023 0220 	bic.w	r2, r3, #32
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	4938      	ldr	r1, [pc, #224]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003400:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	4930      	ldr	r1, [pc, #192]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800340e:	4313      	orrs	r3, r2
 8003410:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800341e:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4929      	ldr	r1, [pc, #164]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800343c:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	4921      	ldr	r1, [pc, #132]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800344a:	4313      	orrs	r3, r2
 800344c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	491a      	ldr	r1, [pc, #104]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003468:	4313      	orrs	r3, r2
 800346a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	4912      	ldr	r1, [pc, #72]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003486:	4313      	orrs	r3, r2
 8003488:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	490b      	ldr	r1, [pc, #44]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3748      	adds	r7, #72	; 0x48
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000

080034d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e049      	b.n	800357a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fbcc 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f000 f8fe 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_TIM_ConfigClockSource+0x1c>
 800359a:	2302      	movs	r3, #2
 800359c:	e0b6      	b.n	800370c <HAL_TIM_ConfigClockSource+0x18a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035da:	d03e      	beq.n	800365a <HAL_TIM_ConfigClockSource+0xd8>
 80035dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e0:	f200 8087 	bhi.w	80036f2 <HAL_TIM_ConfigClockSource+0x170>
 80035e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e8:	f000 8086 	beq.w	80036f8 <HAL_TIM_ConfigClockSource+0x176>
 80035ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f0:	d87f      	bhi.n	80036f2 <HAL_TIM_ConfigClockSource+0x170>
 80035f2:	2b70      	cmp	r3, #112	; 0x70
 80035f4:	d01a      	beq.n	800362c <HAL_TIM_ConfigClockSource+0xaa>
 80035f6:	2b70      	cmp	r3, #112	; 0x70
 80035f8:	d87b      	bhi.n	80036f2 <HAL_TIM_ConfigClockSource+0x170>
 80035fa:	2b60      	cmp	r3, #96	; 0x60
 80035fc:	d050      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x11e>
 80035fe:	2b60      	cmp	r3, #96	; 0x60
 8003600:	d877      	bhi.n	80036f2 <HAL_TIM_ConfigClockSource+0x170>
 8003602:	2b50      	cmp	r3, #80	; 0x50
 8003604:	d03c      	beq.n	8003680 <HAL_TIM_ConfigClockSource+0xfe>
 8003606:	2b50      	cmp	r3, #80	; 0x50
 8003608:	d873      	bhi.n	80036f2 <HAL_TIM_ConfigClockSource+0x170>
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d058      	beq.n	80036c0 <HAL_TIM_ConfigClockSource+0x13e>
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d86f      	bhi.n	80036f2 <HAL_TIM_ConfigClockSource+0x170>
 8003612:	2b30      	cmp	r3, #48	; 0x30
 8003614:	d064      	beq.n	80036e0 <HAL_TIM_ConfigClockSource+0x15e>
 8003616:	2b30      	cmp	r3, #48	; 0x30
 8003618:	d86b      	bhi.n	80036f2 <HAL_TIM_ConfigClockSource+0x170>
 800361a:	2b20      	cmp	r3, #32
 800361c:	d060      	beq.n	80036e0 <HAL_TIM_ConfigClockSource+0x15e>
 800361e:	2b20      	cmp	r3, #32
 8003620:	d867      	bhi.n	80036f2 <HAL_TIM_ConfigClockSource+0x170>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d05c      	beq.n	80036e0 <HAL_TIM_ConfigClockSource+0x15e>
 8003626:	2b10      	cmp	r3, #16
 8003628:	d05a      	beq.n	80036e0 <HAL_TIM_ConfigClockSource+0x15e>
 800362a:	e062      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6899      	ldr	r1, [r3, #8]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f000 f95e 	bl	80038fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800364e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	609a      	str	r2, [r3, #8]
      break;
 8003658:	e04f      	b.n	80036fa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6899      	ldr	r1, [r3, #8]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f000 f947 	bl	80038fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800367c:	609a      	str	r2, [r3, #8]
      break;
 800367e:	e03c      	b.n	80036fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	461a      	mov	r2, r3
 800368e:	f000 f8bb 	bl	8003808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2150      	movs	r1, #80	; 0x50
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f914 	bl	80038c6 <TIM_ITRx_SetConfig>
      break;
 800369e:	e02c      	b.n	80036fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f000 f8da 	bl	8003866 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2160      	movs	r1, #96	; 0x60
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f904 	bl	80038c6 <TIM_ITRx_SetConfig>
      break;
 80036be:	e01c      	b.n	80036fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	461a      	mov	r2, r3
 80036ce:	f000 f89b 	bl	8003808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2140      	movs	r1, #64	; 0x40
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 f8f4 	bl	80038c6 <TIM_ITRx_SetConfig>
      break;
 80036de:	e00c      	b.n	80036fa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f000 f8eb 	bl	80038c6 <TIM_ITRx_SetConfig>
      break;
 80036f0:	e003      	b.n	80036fa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      break;
 80036f6:	e000      	b.n	80036fa <HAL_TIM_ConfigClockSource+0x178>
      break;
 80036f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a34      	ldr	r2, [pc, #208]	; (80037f8 <TIM_Base_SetConfig+0xe4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_Base_SetConfig+0x20>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d108      	bne.n	8003746 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <TIM_Base_SetConfig+0xe4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00f      	beq.n	800376e <TIM_Base_SetConfig+0x5a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d00b      	beq.n	800376e <TIM_Base_SetConfig+0x5a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a28      	ldr	r2, [pc, #160]	; (80037fc <TIM_Base_SetConfig+0xe8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <TIM_Base_SetConfig+0x5a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a27      	ldr	r2, [pc, #156]	; (8003800 <TIM_Base_SetConfig+0xec>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <TIM_Base_SetConfig+0x5a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a26      	ldr	r2, [pc, #152]	; (8003804 <TIM_Base_SetConfig+0xf0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d108      	bne.n	8003780 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <TIM_Base_SetConfig+0xe4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00b      	beq.n	80037c4 <TIM_Base_SetConfig+0xb0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a13      	ldr	r2, [pc, #76]	; (80037fc <TIM_Base_SetConfig+0xe8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <TIM_Base_SetConfig+0xb0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <TIM_Base_SetConfig+0xec>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_Base_SetConfig+0xb0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a11      	ldr	r2, [pc, #68]	; (8003804 <TIM_Base_SetConfig+0xf0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d103      	bne.n	80037cc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d105      	bne.n	80037ea <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f023 0201 	bic.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]
  }
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800

08003808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f023 0201 	bic.w	r2, r3, #1
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f023 030a 	bic.w	r3, r3, #10
 8003844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	621a      	str	r2, [r3, #32]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003866:	b480      	push	{r7}
 8003868:	b087      	sub	sp, #28
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f023 0210 	bic.w	r2, r3, #16
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	031b      	lsls	r3, r3, #12
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b085      	sub	sp, #20
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f043 0307 	orr.w	r3, r3, #7
 80038e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	609a      	str	r2, [r3, #8]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	021a      	lsls	r2, r3, #8
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	431a      	orrs	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	609a      	str	r2, [r3, #8]
}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003950:	2302      	movs	r3, #2
 8003952:	e04f      	b.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d108      	bne.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003984:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d009      	beq.n	80039c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039bc:	d004      	beq.n	80039c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d10c      	bne.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40014000 	.word	0x40014000

08003a08 <__libc_init_array>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	4d0d      	ldr	r5, [pc, #52]	; (8003a40 <__libc_init_array+0x38>)
 8003a0c:	4c0d      	ldr	r4, [pc, #52]	; (8003a44 <__libc_init_array+0x3c>)
 8003a0e:	1b64      	subs	r4, r4, r5
 8003a10:	10a4      	asrs	r4, r4, #2
 8003a12:	2600      	movs	r6, #0
 8003a14:	42a6      	cmp	r6, r4
 8003a16:	d109      	bne.n	8003a2c <__libc_init_array+0x24>
 8003a18:	4d0b      	ldr	r5, [pc, #44]	; (8003a48 <__libc_init_array+0x40>)
 8003a1a:	4c0c      	ldr	r4, [pc, #48]	; (8003a4c <__libc_init_array+0x44>)
 8003a1c:	f000 f820 	bl	8003a60 <_init>
 8003a20:	1b64      	subs	r4, r4, r5
 8003a22:	10a4      	asrs	r4, r4, #2
 8003a24:	2600      	movs	r6, #0
 8003a26:	42a6      	cmp	r6, r4
 8003a28:	d105      	bne.n	8003a36 <__libc_init_array+0x2e>
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a30:	4798      	blx	r3
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7ee      	b.n	8003a14 <__libc_init_array+0xc>
 8003a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3a:	4798      	blx	r3
 8003a3c:	3601      	adds	r6, #1
 8003a3e:	e7f2      	b.n	8003a26 <__libc_init_array+0x1e>
 8003a40:	08003ac0 	.word	0x08003ac0
 8003a44:	08003ac0 	.word	0x08003ac0
 8003a48:	08003ac0 	.word	0x08003ac0
 8003a4c:	08003ac4 	.word	0x08003ac4

08003a50 <memset>:
 8003a50:	4402      	add	r2, r0
 8003a52:	4603      	mov	r3, r0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d100      	bne.n	8003a5a <memset+0xa>
 8003a58:	4770      	bx	lr
 8003a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5e:	e7f9      	b.n	8003a54 <memset+0x4>

08003a60 <_init>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr

08003a6c <_fini>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr

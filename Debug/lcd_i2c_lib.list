
lcd_i2c_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c4  080032c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032c4  080032c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032c4  080032c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c4  080032c4  000132c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  080032d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080032d8  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008824  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d5  00000000  00000000  00028860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0002a038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  0002a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa39  00000000  00000000  0002aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a866  00000000  00000000  000458d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099403  00000000  00000000  0005013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9542  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db4  00000000  00000000  000e9594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800326c 	.word	0x0800326c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800326c 	.word	0x0800326c

080001c8 <_LCD_get_young_bits>:
} LCD_current_pos;

LCD_current_pos lcd_pos;


uint8_t _LCD_get_young_bits(uint8_t data){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	data <<= 4;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	011b      	lsls	r3, r3, #4
 80001d6:	71fb      	strb	r3, [r7, #7]
	data &= 0xF0;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f023 030f 	bic.w	r3, r3, #15
 80001de:	71fb      	strb	r3, [r7, #7]
	return data;
 80001e0:	79fb      	ldrb	r3, [r7, #7]

}
 80001e2:	4618      	mov	r0, r3
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <_LCD_get_old_bits>:


uint8_t _LCD_get_old_bits(uint8_t data){
 80001ee:	b480      	push	{r7}
 80001f0:	b083      	sub	sp, #12
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	4603      	mov	r3, r0
 80001f6:	71fb      	strb	r3, [r7, #7]
	return data & 0xF0;
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	f023 030f 	bic.w	r3, r3, #15
 80001fe:	b2db      	uxtb	r3, r3
}
 8000200:	4618      	mov	r0, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <_LCD_send_command>:

void _LCD_send_command(I2C_HandleTypeDef* hi2c, uint8_t command){
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af02      	add	r7, sp, #8
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	460b      	mov	r3, r1
 8000216:	70fb      	strb	r3, [r7, #3]
	uint8_t send[4] = {
		_LCD_get_old_bits(command) | E_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to high
 8000218:	78fb      	ldrb	r3, [r7, #3]
 800021a:	4618      	mov	r0, r3
 800021c:	f7ff ffe7 	bl	80001ee <_LCD_get_old_bits>
 8000220:	4603      	mov	r3, r0
	uint8_t send[4] = {
 8000222:	f043 030c 	orr.w	r3, r3, #12
 8000226:	b2db      	uxtb	r3, r3
 8000228:	723b      	strb	r3, [r7, #8]
		_LCD_get_old_bits(command) | BACKLIGHT_ON, // older half of the command byte with E pin set to low
 800022a:	78fb      	ldrb	r3, [r7, #3]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffde 	bl	80001ee <_LCD_get_old_bits>
 8000232:	4603      	mov	r3, r0
	uint8_t send[4] = {
 8000234:	f043 0308 	orr.w	r3, r3, #8
 8000238:	b2db      	uxtb	r3, r3
 800023a:	727b      	strb	r3, [r7, #9]
		_LCD_get_young_bits(command) | E_PIN_MASK | BACKLIGHT_ON, // younger half of the command byte with E pin set to high
 800023c:	78fb      	ldrb	r3, [r7, #3]
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ffc2 	bl	80001c8 <_LCD_get_young_bits>
 8000244:	4603      	mov	r3, r0
	uint8_t send[4] = {
 8000246:	f043 030c 	orr.w	r3, r3, #12
 800024a:	b2db      	uxtb	r3, r3
 800024c:	72bb      	strb	r3, [r7, #10]
		_LCD_get_young_bits(command) | BACKLIGHT_ON}; // younger half of the command byte with E pin set to low
 800024e:	78fb      	ldrb	r3, [r7, #3]
 8000250:	4618      	mov	r0, r3
 8000252:	f7ff ffb9 	bl	80001c8 <_LCD_get_young_bits>
 8000256:	4603      	mov	r3, r0
	uint8_t send[4] = {
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	72fb      	strb	r3, [r7, #11]
	uint16_t send_size = sizeof(send);
 8000260:	2304      	movs	r3, #4
 8000262:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, send_size, 100);
 8000264:	89fb      	ldrh	r3, [r7, #14]
 8000266:	f107 0208 	add.w	r2, r7, #8
 800026a:	2164      	movs	r1, #100	; 0x64
 800026c:	9100      	str	r1, [sp, #0]
 800026e:	214e      	movs	r1, #78	; 0x4e
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f001 f865 	bl	8001340 <HAL_I2C_Master_Transmit>
}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <_LCD_startup>:

void _LCD_startup(I2C_HandleTypeDef* hi2c){
 800027e:	b580      	push	{r7, lr}
 8000280:	b086      	sub	sp, #24
 8000282:	af02      	add	r7, sp, #8
 8000284:	6078      	str	r0, [r7, #4]
	uint8_t send[2] = {
 8000286:	f643 033c 	movw	r3, #14396	; 0x383c
 800028a:	81bb      	strh	r3, [r7, #12]
			STARTUP | E_PIN_MASK | BACKLIGHT_ON,
			STARTUP | BACKLIGHT_ON
	};
	HAL_Delay(20);
 800028c:	2014      	movs	r0, #20
 800028e:	f000 fcfb 	bl	8000c88 <HAL_Delay>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 8000292:	f107 020c 	add.w	r2, r7, #12
 8000296:	2364      	movs	r3, #100	; 0x64
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2302      	movs	r3, #2
 800029c:	214e      	movs	r1, #78	; 0x4e
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f001 f84e 	bl	8001340 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80002a4:	2005      	movs	r0, #5
 80002a6:	f000 fcef 	bl	8000c88 <HAL_Delay>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 80002aa:	f107 020c 	add.w	r2, r7, #12
 80002ae:	2364      	movs	r3, #100	; 0x64
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2302      	movs	r3, #2
 80002b4:	214e      	movs	r1, #78	; 0x4e
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f001 f842 	bl	8001340 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 fce3 	bl	8000c88 <HAL_Delay>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 80002c2:	f107 020c 	add.w	r2, r7, #12
 80002c6:	2364      	movs	r3, #100	; 0x64
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2302      	movs	r3, #2
 80002cc:	214e      	movs	r1, #78	; 0x4e
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f001 f836 	bl	8001340 <HAL_I2C_Master_Transmit>


}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <_LCD_set_4_bits>:

void _LCD_set_4_bits(I2C_HandleTypeDef* hi2c, uint8_t num_of_lines){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af02      	add	r7, sp, #8
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	460b      	mov	r3, r1
 80002e6:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] = {
 80002e8:	f642 032c 	movw	r3, #10284	; 0x282c
 80002ec:	81bb      	strh	r3, [r7, #12]
			FUNCTION_SET_4_BIT_MODE | E_PIN_MASK | BACKLIGHT_ON,
			FUNCTION_SET_4_BIT_MODE | BACKLIGHT_ON};
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS , data, 2, 100);
 80002ee:	f107 020c 	add.w	r2, r7, #12
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	2302      	movs	r3, #2
 80002f8:	214e      	movs	r1, #78	; 0x4e
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f001 f820 	bl	8001340 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000300:	2001      	movs	r0, #1
 8000302:	f000 fcc1 	bl	8000c88 <HAL_Delay>
	if(num_of_lines == 2)
 8000306:	78fb      	ldrb	r3, [r7, #3]
 8000308:	2b02      	cmp	r3, #2
 800030a:	d103      	bne.n	8000314 <_LCD_set_4_bits+0x38>
		_LCD_send_command(hi2c, FUNCTION_SET_4_BIT_MODE | TWO_LINES_ENABLE);
 800030c:	2128      	movs	r1, #40	; 0x28
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	f7ff ff7c 	bl	800020c <_LCD_send_command>
}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <LCD_init>:

void LCD_init(I2C_HandleTypeDef* hi2c, uint8_t num_of_lines){
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	70fb      	strb	r3, [r7, #3]
	_LCD_startup(hi2c);
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f7ff ffa8 	bl	800027e <_LCD_startup>
	HAL_Delay(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f000 fcaa 	bl	8000c88 <HAL_Delay>
	_LCD_set_4_bits(hi2c, num_of_lines);
 8000334:	78fb      	ldrb	r3, [r7, #3]
 8000336:	4619      	mov	r1, r3
 8000338:	6878      	ldr	r0, [r7, #4]
 800033a:	f7ff ffcf 	bl	80002dc <_LCD_set_4_bits>
	HAL_Delay(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f000 fca2 	bl	8000c88 <HAL_Delay>
	_LCD_send_command(hi2c, DISPLAY_OFF);
 8000344:	2108      	movs	r1, #8
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f7ff ff60 	bl	800020c <_LCD_send_command>
	HAL_Delay(1);
 800034c:	2001      	movs	r0, #1
 800034e:	f000 fc9b 	bl	8000c88 <HAL_Delay>
	_LCD_send_command(hi2c, CLEAR_DISPLAY);
 8000352:	2101      	movs	r1, #1
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f7ff ff59 	bl	800020c <_LCD_send_command>
	HAL_Delay(1);
 800035a:	2001      	movs	r0, #1
 800035c:	f000 fc94 	bl	8000c88 <HAL_Delay>
	_LCD_send_command(hi2c, INCREMENT_NO_SHIFT);
 8000360:	2106      	movs	r1, #6
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f7ff ff52 	bl	800020c <_LCD_send_command>
	HAL_Delay(1);
 8000368:	2001      	movs	r0, #1
 800036a:	f000 fc8d 	bl	8000c88 <HAL_Delay>
	_LCD_send_command(hi2c, 0x0C);
 800036e:	210c      	movs	r1, #12
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff ff4b 	bl	800020c <_LCD_send_command>
	HAL_Delay(1);
 8000376:	2001      	movs	r0, #1
 8000378:	f000 fc86 	bl	8000c88 <HAL_Delay>

}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <LCD_putchar>:

void LCD_putchar(I2C_HandleTypeDef* hi2c, char data){
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af02      	add	r7, sp, #8
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
	uint8_t send[4] = {
			_LCD_get_old_bits((uint8_t)data) | E_PIN_MASK | RS_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to high
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff2b 	bl	80001ee <_LCD_get_old_bits>
 8000398:	4603      	mov	r3, r0
	uint8_t send[4] = {
 800039a:	f043 030d 	orr.w	r3, r3, #13
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	723b      	strb	r3, [r7, #8]
			_LCD_get_old_bits((uint8_t)data) | RS_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to low
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff22 	bl	80001ee <_LCD_get_old_bits>
 80003aa:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80003ac:	f043 0309 	orr.w	r3, r3, #9
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	727b      	strb	r3, [r7, #9]
			_LCD_get_young_bits((uint8_t)data) | E_PIN_MASK | RS_PIN_MASK | BACKLIGHT_ON, // younger half of the command byte with E pin set to high
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff06 	bl	80001c8 <_LCD_get_young_bits>
 80003bc:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80003be:	f043 030d 	orr.w	r3, r3, #13
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	72bb      	strb	r3, [r7, #10]
			_LCD_get_young_bits((uint8_t)data) | RS_PIN_MASK | BACKLIGHT_ON}; // younger half of the command byte with E pin set to low
 80003c6:	78fb      	ldrb	r3, [r7, #3]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff fefd 	bl	80001c8 <_LCD_get_young_bits>
 80003ce:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80003d0:	f043 0309 	orr.w	r3, r3, #9
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	72fb      	strb	r3, [r7, #11]
	int16_t send_size = sizeof(send);
 80003d8:	2304      	movs	r3, #4
 80003da:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, send_size, 100);
 80003dc:	89fb      	ldrh	r3, [r7, #14]
 80003de:	f107 0208 	add.w	r2, r7, #8
 80003e2:	2164      	movs	r1, #100	; 0x64
 80003e4:	9100      	str	r1, [sp, #0]
 80003e6:	214e      	movs	r1, #78	; 0x4e
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f000 ffa9 	bl	8001340 <HAL_I2C_Master_Transmit>
}
 80003ee:	bf00      	nop
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <LCD_printf>:

void LCD_printf(I2C_HandleTypeDef* hi2c, char *data){
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b084      	sub	sp, #16
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
	//IMPLEMENT \n as NEWLINE
	//IMPLEMENT \t as two spaces
	for(char* i = data; *i != '\0'; i++)
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	e008      	b.n	8000418 <LCD_printf+0x22>
		LCD_putchar(hi2c, *i);
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	4619      	mov	r1, r3
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f7ff ffb9 	bl	8000384 <LCD_putchar>
	for(char* i = data; *i != '\0'; i++)
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3301      	adds	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d1f2      	bne.n	8000406 <LCD_printf+0x10>

}
 8000420:	bf00      	nop
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <LCD_set_position>:

void LCD_set_position(I2C_HandleTypeDef* hi2c, uint8_t col, uint8_t row){
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	460b      	mov	r3, r1
 8000436:	70fb      	strb	r3, [r7, #3]
 8000438:	4613      	mov	r3, r2
 800043a:	70bb      	strb	r3, [r7, #2]
	//rows and columns are 0 indexed
	//function omits positions outside of displays memory
	if((col <= 0x27 && col >= 0) && (row <= 1 && row >=0)){
 800043c:	78fb      	ldrb	r3, [r7, #3]
 800043e:	2b27      	cmp	r3, #39	; 0x27
 8000440:	d817      	bhi.n	8000472 <LCD_set_position+0x46>
 8000442:	78bb      	ldrb	r3, [r7, #2]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d814      	bhi.n	8000472 <LCD_set_position+0x46>
		uint8_t address = col + row * 0x40;
 8000448:	78bb      	ldrb	r3, [r7, #2]
 800044a:	019b      	lsls	r3, r3, #6
 800044c:	b2da      	uxtb	r2, r3
 800044e:	78fb      	ldrb	r3, [r7, #3]
 8000450:	4413      	add	r3, r2
 8000452:	73fb      	strb	r3, [r7, #15]
		address |= SET_POSITION_MASK;
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800045a:	73fb      	strb	r3, [r7, #15]
		lcd_pos.current_col = col;
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <LCD_set_position+0x50>)
 800045e:	78fb      	ldrb	r3, [r7, #3]
 8000460:	7053      	strb	r3, [r2, #1]
		lcd_pos.current_row = row;
 8000462:	4a06      	ldr	r2, [pc, #24]	; (800047c <LCD_set_position+0x50>)
 8000464:	78bb      	ldrb	r3, [r7, #2]
 8000466:	7013      	strb	r3, [r2, #0]
		_LCD_send_command(hi2c, address);
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	4619      	mov	r1, r3
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f7ff fecd 	bl	800020c <_LCD_send_command>

	}

}
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000028 	.word	0x20000028

08000480 <LCD_reset_position>:

void LCD_reset_position(I2C_HandleTypeDef *hi2c){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	LCD_set_position(hi2c, 0, 0);
 8000488:	2200      	movs	r2, #0
 800048a:	2100      	movs	r1, #0
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f7ff ffcd 	bl	800042c <LCD_set_position>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <LCD_printf_align>:
	_LCD_send_command(hi2c, 0x0C);
	HAL_Delay(1);
	LCD_set_position(hi2c, lcd_pos.current_col, lcd_pos.current_row);
}

void LCD_printf_align(I2C_HandleTypeDef *hi2c, char *data, uint8_t alignment){
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	4613      	mov	r3, r2
 80004a8:	71fb      	strb	r3, [r7, #7]
	//prints given string with left or middle alignment of the text
	//function resets cursor position to (0,0) after execution
	uint16_t len = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	83fb      	strh	r3, [r7, #30]
	for(char* i = data; *i != '\0'; i++, len++);
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	61bb      	str	r3, [r7, #24]
 80004b2:	e005      	b.n	80004c0 <LCD_printf_align+0x24>
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	3301      	adds	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
 80004ba:	8bfb      	ldrh	r3, [r7, #30]
 80004bc:	3301      	adds	r3, #1
 80004be:	83fb      	strh	r3, [r7, #30]
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f5      	bne.n	80004b4 <LCD_printf_align+0x18>
	switch(alignment){
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d002      	beq.n	80004d4 <LCD_printf_align+0x38>
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d00c      	beq.n	80004ec <LCD_printf_align+0x50>
 80004d2:	e019      	b.n	8000508 <LCD_printf_align+0x6c>
		case ALIGN_RIGHT:
			LCD_set_position(hi2c, MAX_COLUMN - len + 1, lcd_pos.current_row);
 80004d4:	8bfb      	ldrh	r3, [r7, #30]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	f1c3 0310 	rsb	r3, r3, #16
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	4a16      	ldr	r2, [pc, #88]	; (8000538 <LCD_printf_align+0x9c>)
 80004e0:	7812      	ldrb	r2, [r2, #0]
 80004e2:	4619      	mov	r1, r3
 80004e4:	68f8      	ldr	r0, [r7, #12]
 80004e6:	f7ff ffa1 	bl	800042c <LCD_set_position>
			break;
 80004ea:	e00d      	b.n	8000508 <LCD_printf_align+0x6c>
		case ALIGN_MIDDLE:
			LCD_set_position(hi2c, (uint8_t)(floor(MAX_COLUMN + 1)/2) - (uint8_t)(len / 2), lcd_pos.current_row);
 80004ec:	8bfb      	ldrh	r3, [r7, #30]
 80004ee:	085b      	lsrs	r3, r3, #1
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	f1c3 0308 	rsb	r3, r3, #8
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <LCD_printf_align+0x9c>)
 80004fc:	7812      	ldrb	r2, [r2, #0]
 80004fe:	4619      	mov	r1, r3
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	f7ff ff93 	bl	800042c <LCD_set_position>
			break;
 8000506:	bf00      	nop
	}
	for(char* i = data; *i != '\0'; i++)
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	e008      	b.n	8000520 <LCD_printf_align+0x84>
		LCD_putchar(hi2c, *i);
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	68f8      	ldr	r0, [r7, #12]
 8000516:	f7ff ff35 	bl	8000384 <LCD_putchar>
	for(char* i = data; *i != '\0'; i++)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d1f2      	bne.n	800050e <LCD_printf_align+0x72>
	LCD_reset_position(hi2c);
 8000528:	68f8      	ldr	r0, [r7, #12]
 800052a:	f7ff ffa9 	bl	8000480 <LCD_reset_position>

}
 800052e:	bf00      	nop
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028

0800053c <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]

	  char data = '!';
 8000546:	2321      	movs	r3, #33	; 0x21
 8000548:	73fb      	strb	r3, [r7, #15]
	  LCD_putchar(&hi2c3, data);
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	4619      	mov	r1, r3
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <HAL_GPIO_EXTI_Callback+0x20>)
 8000550:	f7ff ff18 	bl	8000384 <LCD_putchar>

}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200000d4 	.word	0x200000d4

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fb29 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f82f 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f94f 	bl	8000810 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000572:	f000 f88d 	bl	8000690 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000576:	f000 f90b 	bl	8000790 <MX_I2C3_Init>
  MX_I2C2_Init();
 800057a:	f000 f8c9 	bl	8000710 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LCD_init(&hi2c3, 2);
 800057e:	2102      	movs	r1, #2
 8000580:	480f      	ldr	r0, [pc, #60]	; (80005c0 <main+0x60>)
 8000582:	f7ff fecb 	bl	800031c <LCD_init>
  char data[] = "siema";
 8000586:	4a0f      	ldr	r2, [pc, #60]	; (80005c4 <main+0x64>)
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	6018      	str	r0, [r3, #0]
 8000592:	3304      	adds	r3, #4
 8000594:	8019      	strh	r1, [r3, #0]
  char data2[] = "swiat";
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <main+0x68>)
 8000598:	463b      	mov	r3, r7
 800059a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800059e:	6018      	str	r0, [r3, #0]
 80005a0:	3304      	adds	r3, #4
 80005a2:	8019      	strh	r1, [r3, #0]
  LCD_printf(&hi2c3, data);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	4619      	mov	r1, r3
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <main+0x60>)
 80005ac:	f7ff ff23 	bl	80003f6 <LCD_printf>
  LCD_printf_align(&hi2c3, data2, ALIGN_RIGHT);
 80005b0:	463b      	mov	r3, r7
 80005b2:	2201      	movs	r2, #1
 80005b4:	4619      	mov	r1, r3
 80005b6:	4802      	ldr	r0, [pc, #8]	; (80005c0 <main+0x60>)
 80005b8:	f7ff ff70 	bl	800049c <LCD_printf_align>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x5c>
 80005be:	bf00      	nop
 80005c0:	200000d4 	.word	0x200000d4
 80005c4:	08003284 	.word	0x08003284
 80005c8:	0800328c 	.word	0x0800328c

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09c      	sub	sp, #112	; 0x70
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005d6:	2228      	movs	r2, #40	; 0x28
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fe3e 	bl	800325c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fe30 	bl	800325c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005fc:	2303      	movs	r3, #3
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	2301      	movs	r3, #1
 800060c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800061c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000620:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fa54 	bl	8001ad4 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000632:	f000 f947 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fa7c 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065e:	f000 f931 	bl	80008c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8000662:	f248 0360 	movw	r3, #32864	; 0x8060
 8000666:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fc3a 	bl	8002ef0 <HAL_RCCEx_PeriphCLKConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000682:	f000 f91f 	bl	80008c4 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3770      	adds	r7, #112	; 0x70
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_I2C1_Init+0x74>)
 8000696:	4a1c      	ldr	r2, [pc, #112]	; (8000708 <MX_I2C1_Init+0x78>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_I2C1_Init+0x74>)
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <MX_I2C1_Init+0x7c>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_I2C1_Init+0x74>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_I2C1_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_I2C1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <MX_I2C1_Init+0x74>)
 80006cc:	f000 fd9c 	bl	8001208 <HAL_I2C_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006d6:	f000 f8f5 	bl	80008c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <MX_I2C1_Init+0x74>)
 80006de:	f001 f961 	bl	80019a4 <HAL_I2CEx_ConfigAnalogFilter>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e8:	f000 f8ec 	bl	80008c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_I2C1_Init+0x74>)
 80006f0:	f001 f9a3 	bl	8001a3a <HAL_I2CEx_ConfigDigitalFilter>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006fa:	f000 f8e3 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000002c 	.word	0x2000002c
 8000708:	40005400 	.word	0x40005400
 800070c:	2000090e 	.word	0x2000090e

08000710 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_I2C2_Init+0x74>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_I2C2_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_I2C2_Init+0x74>)
 800071c:	4a1b      	ldr	r2, [pc, #108]	; (800078c <MX_I2C2_Init+0x7c>)
 800071e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_I2C2_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_I2C2_Init+0x74>)
 8000728:	2201      	movs	r2, #1
 800072a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_I2C2_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_I2C2_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_I2C2_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_I2C2_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_I2C2_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <MX_I2C2_Init+0x74>)
 800074c:	f000 fd5c 	bl	8001208 <HAL_I2C_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000756:	f000 f8b5 	bl	80008c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <MX_I2C2_Init+0x74>)
 800075e:	f001 f921 	bl	80019a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000768:	f000 f8ac 	bl	80008c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_I2C2_Init+0x74>)
 8000770:	f001 f963 	bl	8001a3a <HAL_I2CEx_ConfigDigitalFilter>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800077a:	f000 f8a3 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000080 	.word	0x20000080
 8000788:	40005800 	.word	0x40005800
 800078c:	2000090e 	.word	0x2000090e

08000790 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_I2C3_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_I2C3_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_I2C3_Init+0x74>)
 800079c:	4a1b      	ldr	r2, [pc, #108]	; (800080c <MX_I2C3_Init+0x7c>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_I2C3_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_I2C3_Init+0x74>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_I2C3_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_I2C3_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C3_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2C3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007ca:	480e      	ldr	r0, [pc, #56]	; (8000804 <MX_I2C3_Init+0x74>)
 80007cc:	f000 fd1c 	bl	8001208 <HAL_I2C_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007d6:	f000 f875 	bl	80008c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <MX_I2C3_Init+0x74>)
 80007de:	f001 f8e1 	bl	80019a4 <HAL_I2CEx_ConfigAnalogFilter>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007e8:	f000 f86c 	bl	80008c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_I2C3_Init+0x74>)
 80007f0:	f001 f923 	bl	8001a3a <HAL_I2CEx_ConfigDigitalFilter>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 f863 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000d4 	.word	0x200000d4
 8000808:	40007800 	.word	0x40007800
 800080c:	2000090e 	.word	0x2000090e

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b25      	ldr	r3, [pc, #148]	; (80008bc <MX_GPIO_Init+0xac>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a24      	ldr	r2, [pc, #144]	; (80008bc <MX_GPIO_Init+0xac>)
 800082c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_GPIO_Init+0xac>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_GPIO_Init+0xac>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <MX_GPIO_Init+0xac>)
 8000844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000848:	6153      	str	r3, [r2, #20]
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_GPIO_Init+0xac>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_GPIO_Init+0xac>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <MX_GPIO_Init+0xac>)
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_GPIO_Init+0xac>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_GPIO_Init+0xac>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_GPIO_Init+0xac>)
 8000874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_GPIO_Init+0xac>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <MX_GPIO_Init+0xb0>)
 800089e:	f000 fb29 	bl	8000ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2028      	movs	r0, #40	; 0x28
 80008a8:	f000 faed 	bl	8000e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ac:	2028      	movs	r0, #40	; 0x28
 80008ae:	f000 fb06 	bl	8000ebe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x44>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x44>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x44>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x44>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x44>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x44>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000906:	2007      	movs	r0, #7
 8000908:	f000 fab2 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b090      	sub	sp, #64	; 0x40
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a64      	ldr	r2, [pc, #400]	; (8000ac8 <HAL_I2C_MspInit+0x1b0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d146      	bne.n	80009c8 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b64      	ldr	r3, [pc, #400]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a63      	ldr	r2, [pc, #396]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	4b61      	ldr	r3, [pc, #388]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000950:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b5e      	ldr	r3, [pc, #376]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a5d      	ldr	r2, [pc, #372]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800096a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000970:	2312      	movs	r3, #18
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800097c:	2304      	movs	r3, #4
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f000 fab3 	bl	8000ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000992:	2312      	movs	r3, #18
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099e:	2304      	movs	r3, #4
 80009a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a6:	4619      	mov	r1, r3
 80009a8:	4849      	ldr	r0, [pc, #292]	; (8000ad0 <HAL_I2C_MspInit+0x1b8>)
 80009aa:	f000 faa3 	bl	8000ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ae:	4b47      	ldr	r3, [pc, #284]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a46      	ldr	r2, [pc, #280]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 80009b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b44      	ldr	r3, [pc, #272]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c2:	623b      	str	r3, [r7, #32]
 80009c4:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80009c6:	e07b      	b.n	8000ac0 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a41      	ldr	r2, [pc, #260]	; (8000ad4 <HAL_I2C_MspInit+0x1bc>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12a      	bne.n	8000a28 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a3d      	ldr	r2, [pc, #244]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f0:	2312      	movs	r3, #18
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009fc:	2304      	movs	r3, #4
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f000 fa73 	bl	8000ef4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a2e      	ldr	r2, [pc, #184]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	69bb      	ldr	r3, [r7, #24]
}
 8000a26:	e04b      	b.n	8000ac0 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C3)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a2a      	ldr	r2, [pc, #168]	; (8000ad8 <HAL_I2C_MspInit+0x1c0>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d146      	bne.n	8000ac0 <HAL_I2C_MspInit+0x1a8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a25      	ldr	r2, [pc, #148]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a3c:	6153      	str	r3, [r2, #20]
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a68:	2312      	movs	r3, #18
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8000a74:	2303      	movs	r3, #3
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4817      	ldr	r0, [pc, #92]	; (8000adc <HAL_I2C_MspInit+0x1c4>)
 8000a80:	f000 fa38 	bl	8000ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8a:	2312      	movs	r3, #18
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8000a96:	2303      	movs	r3, #3
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 fa26 	bl	8000ef4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000aae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ab2:	61d3      	str	r3, [r2, #28]
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_I2C_MspInit+0x1b4>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3740      	adds	r7, #64	; 0x40
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000400 	.word	0x48000400
 8000ad4:	40005800 	.word	0x40005800
 8000ad8:	40007800 	.word	0x40007800
 8000adc:	48000800 	.word	0x48000800

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f88c 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b3c:	f000 fb4c 	bl	80011d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b6c:	f7ff ffea 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	; (8000ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <LoopForever+0xe>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	; (8000bb4 <LoopForever+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b96:	f002 fb3d 	bl	8003214 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9a:	f7ff fce1 	bl	8000560 <main>

08000b9e <LoopForever>:

LoopForever:
    b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ba0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bac:	080032cc 	.word	0x080032cc
  ldr r2, =_sbss
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb4:	2000012c 	.word	0x2000012c

08000bb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x28>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x28>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f94f 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe7a 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f967 	bl	8000eda <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f92f 	bl	8000e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000128 	.word	0x20000128

08000c70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000128 	.word	0x20000128

08000c88 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffde 	bl	8000c70 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e3c:	d301      	bcc.n	8000e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00f      	b.n	8000e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <SysTick_Config+0x40>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f7ff ff8e 	bl	8000d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <SysTick_Config+0x40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <SysTick_Config+0x40>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff29 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e98:	f7ff ff3e 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff ff8e 	bl	8000dc4 <NVIC_EncodePriority>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff5d 	bl	8000d70 <__NVIC_SetPriority>
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff31 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffa2 	bl	8000e2c <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e14e      	b.n	80011a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8140 	beq.w	800119c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d005      	beq.n	8000f34 <HAL_GPIO_Init+0x40>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d130      	bne.n	8000f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	f003 0201 	and.w	r2, r3, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d017      	beq.n	8000fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d123      	bne.n	8001026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0203 	and.w	r2, r3, #3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 809a 	beq.w	800119c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001068:	4b55      	ldr	r3, [pc, #340]	; (80011c0 <HAL_GPIO_Init+0x2cc>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a54      	ldr	r2, [pc, #336]	; (80011c0 <HAL_GPIO_Init+0x2cc>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <HAL_GPIO_Init+0x2cc>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001080:	4a50      	ldr	r2, [pc, #320]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010aa:	d013      	beq.n	80010d4 <HAL_GPIO_Init+0x1e0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HAL_GPIO_Init+0x2d4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d00d      	beq.n	80010d0 <HAL_GPIO_Init+0x1dc>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a45      	ldr	r2, [pc, #276]	; (80011cc <HAL_GPIO_Init+0x2d8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d007      	beq.n	80010cc <HAL_GPIO_Init+0x1d8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a44      	ldr	r2, [pc, #272]	; (80011d0 <HAL_GPIO_Init+0x2dc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d101      	bne.n	80010c8 <HAL_GPIO_Init+0x1d4>
 80010c4:	2303      	movs	r3, #3
 80010c6:	e006      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010c8:	2305      	movs	r3, #5
 80010ca:	e004      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010d4:	2300      	movs	r3, #0
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	f002 0203 	and.w	r2, r2, #3
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	4093      	lsls	r3, r2
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e6:	4937      	ldr	r1, [pc, #220]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f4:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001118:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001142:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f47f aea9 	bne.w	8000f04 <HAL_GPIO_Init+0x10>
  }
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000
 80011c8:	48000400 	.word	0x48000400
 80011cc:	48000800 	.word	0x48000800
 80011d0:	48000c00 	.word	0x48000c00
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9a0 	bl	800053c <HAL_GPIO_EXTI_Callback>
  }
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40010400 	.word	0x40010400

08001208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e08d      	b.n	8001336 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fb72 	bl	8000918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2224      	movs	r2, #36	; 0x24
 8001238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001258:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001268:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	e006      	b.n	8001290 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800128e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d108      	bne.n	80012aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	e007      	b.n	80012ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69d9      	ldr	r1, [r3, #28]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1a      	ldr	r2, [r3, #32]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2220      	movs	r2, #32
 8001322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af02      	add	r7, sp, #8
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	461a      	mov	r2, r3
 800134c:	460b      	mov	r3, r1
 800134e:	817b      	strh	r3, [r7, #10]
 8001350:	4613      	mov	r3, r2
 8001352:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b20      	cmp	r3, #32
 800135e:	f040 80fd 	bne.w	800155c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_I2C_Master_Transmit+0x30>
 800136c:	2302      	movs	r3, #2
 800136e:	e0f6      	b.n	800155e <HAL_I2C_Master_Transmit+0x21e>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001378:	f7ff fc7a 	bl	8000c70 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2319      	movs	r3, #25
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 f914 	bl	80015b8 <I2C_WaitOnFlagUntilTimeout>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0e1      	b.n	800155e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2221      	movs	r2, #33	; 0x21
 800139e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2210      	movs	r2, #16
 80013a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	893a      	ldrh	r2, [r7, #8]
 80013ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	2bff      	cmp	r3, #255	; 0xff
 80013ca:	d906      	bls.n	80013da <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	22ff      	movs	r2, #255	; 0xff
 80013d0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80013d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e007      	b.n	80013ea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013de:	b29a      	uxth	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80013e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d024      	beq.n	800143c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141a:	3b01      	subs	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001426:	b2db      	uxtb	r3, r3
 8001428:	3301      	adds	r3, #1
 800142a:	b2da      	uxtb	r2, r3
 800142c:	8979      	ldrh	r1, [r7, #10]
 800142e:	4b4e      	ldr	r3, [pc, #312]	; (8001568 <HAL_I2C_Master_Transmit+0x228>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fa83 	bl	8001940 <I2C_TransferConfig>
 800143a:	e066      	b.n	800150a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001440:	b2da      	uxtb	r2, r3
 8001442:	8979      	ldrh	r1, [r7, #10]
 8001444:	4b48      	ldr	r3, [pc, #288]	; (8001568 <HAL_I2C_Master_Transmit+0x228>)
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 fa78 	bl	8001940 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001450:	e05b      	b.n	800150a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	6a39      	ldr	r1, [r7, #32]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f907 	bl	800166a <I2C_WaitOnTXISFlagUntilTimeout>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e07b      	b.n	800155e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001480:	b29b      	uxth	r3, r3
 8001482:	3b01      	subs	r3, #1
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148e:	3b01      	subs	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149a:	b29b      	uxth	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d034      	beq.n	800150a <HAL_I2C_Master_Transmit+0x1ca>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d130      	bne.n	800150a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	2200      	movs	r2, #0
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 f880 	bl	80015b8 <I2C_WaitOnFlagUntilTimeout>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e04d      	b.n	800155e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2bff      	cmp	r3, #255	; 0xff
 80014ca:	d90e      	bls.n	80014ea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	8979      	ldrh	r1, [r7, #10]
 80014da:	2300      	movs	r3, #0
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 fa2c 	bl	8001940 <I2C_TransferConfig>
 80014e8:	e00f      	b.n	800150a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	8979      	ldrh	r1, [r7, #10]
 80014fc:	2300      	movs	r3, #0
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 fa1b 	bl	8001940 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150e:	b29b      	uxth	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d19e      	bne.n	8001452 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	6a39      	ldr	r1, [r7, #32]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f8ed 	bl	80016f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e01a      	b.n	800155e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2220      	movs	r2, #32
 800152e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_I2C_Master_Transmit+0x22c>)
 800153c:	400b      	ands	r3, r1
 800153e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2220      	movs	r2, #32
 8001544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	e000      	b.n	800155e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800155c:	2302      	movs	r3, #2
  }
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	80002000 	.word	0x80002000
 800156c:	fe00e800 	.word	0xfe00e800

08001570 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b02      	cmp	r3, #2
 8001584:	d103      	bne.n	800158e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b01      	cmp	r3, #1
 800159a:	d007      	beq.n	80015ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	619a      	str	r2, [r3, #24]
  }
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015c8:	e03b      	b.n	8001642 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	6839      	ldr	r1, [r7, #0]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 f8d6 	bl	8001780 <I2C_IsErrorOccurred>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e041      	b.n	8001662 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d02d      	beq.n	8001642 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015e6:	f7ff fb43 	bl	8000c70 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d302      	bcc.n	80015fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d122      	bne.n	8001642 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699a      	ldr	r2, [r3, #24]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	4013      	ands	r3, r2
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	429a      	cmp	r2, r3
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	429a      	cmp	r2, r3
 8001618:	d113      	bne.n	8001642 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f043 0220 	orr.w	r2, r3, #32
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2220      	movs	r2, #32
 800162a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4013      	ands	r3, r2
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	429a      	cmp	r2, r3
 8001650:	bf0c      	ite	eq
 8001652:	2301      	moveq	r3, #1
 8001654:	2300      	movne	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	429a      	cmp	r2, r3
 800165e:	d0b4      	beq.n	80015ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001676:	e033      	b.n	80016e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f87f 	bl	8001780 <I2C_IsErrorOccurred>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e031      	b.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001692:	d025      	beq.n	80016e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001694:	f7ff faec 	bl	8000c70 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d302      	bcc.n	80016aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11a      	bne.n	80016e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d013      	beq.n	80016e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f043 0220 	orr.w	r2, r3, #32
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e007      	b.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d1c4      	bne.n	8001678 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001704:	e02f      	b.n	8001766 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f838 	bl	8001780 <I2C_IsErrorOccurred>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e02d      	b.n	8001776 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171a:	f7ff faa9 	bl	8000c70 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	429a      	cmp	r2, r3
 8001728:	d302      	bcc.n	8001730 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d11a      	bne.n	8001766 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	2b20      	cmp	r3, #32
 800173c:	d013      	beq.n	8001766 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f043 0220 	orr.w	r2, r3, #32
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2220      	movs	r2, #32
 800174e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e007      	b.n	8001776 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	2b20      	cmp	r3, #32
 8001772:	d1c8      	bne.n	8001706 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d068      	beq.n	800187e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2210      	movs	r2, #16
 80017b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017b4:	e049      	b.n	800184a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d045      	beq.n	800184a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017be:	f7ff fa57 	bl	8000c70 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d302      	bcc.n	80017d4 <I2C_IsErrorOccurred+0x54>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d13a      	bne.n	800184a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80017e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017f6:	d121      	bne.n	800183c <I2C_IsErrorOccurred+0xbc>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017fe:	d01d      	beq.n	800183c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001800:	7cfb      	ldrb	r3, [r7, #19]
 8001802:	2b20      	cmp	r3, #32
 8001804:	d01a      	beq.n	800183c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001814:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001816:	f7ff fa2b 	bl	8000c70 <HAL_GetTick>
 800181a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800181c:	e00e      	b.n	800183c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800181e:	f7ff fa27 	bl	8000c70 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b19      	cmp	r3, #25
 800182a:	d907      	bls.n	800183c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	f043 0320 	orr.w	r3, r3, #32
 8001832:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800183a:	e006      	b.n	800184a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b20      	cmp	r3, #32
 8001848:	d1e9      	bne.n	800181e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	2b20      	cmp	r3, #32
 8001856:	d003      	beq.n	8001860 <I2C_IsErrorOccurred+0xe0>
 8001858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0aa      	beq.n	80017b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001864:	2b00      	cmp	r3, #0
 8001866:	d103      	bne.n	8001870 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2220      	movs	r2, #32
 800186e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00b      	beq.n	80018a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00b      	beq.n	80018ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80018ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d01c      	beq.n	800192e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f7ff fe3b 	bl	8001570 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <I2C_IsErrorOccurred+0x1bc>)
 8001906:	400b      	ands	r3, r1
 8001908:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	431a      	orrs	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2220      	movs	r2, #32
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800192e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001932:	4618      	mov	r0, r3
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	fe00e800 	.word	0xfe00e800

08001940 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	817b      	strh	r3, [r7, #10]
 800194e:	4613      	mov	r3, r2
 8001950:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001952:	897b      	ldrh	r3, [r7, #10]
 8001954:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001958:	7a7b      	ldrb	r3, [r7, #9]
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001960:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	4313      	orrs	r3, r2
 800196a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800196e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	0d5b      	lsrs	r3, r3, #21
 800197a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <I2C_TransferConfig+0x60>)
 8001980:	430b      	orrs	r3, r1
 8001982:	43db      	mvns	r3, r3
 8001984:	ea02 0103 	and.w	r1, r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001992:	bf00      	nop
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	03ff63ff 	.word	0x03ff63ff

080019a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b20      	cmp	r3, #32
 80019b8:	d138      	bne.n	8001a2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e032      	b.n	8001a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e000      	b.n	8001a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a2c:	2302      	movs	r3, #2
  }
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d139      	bne.n	8001ac4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e033      	b.n	8001ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2224      	movs	r2, #36	; 0x24
 8001a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e000      	b.n	8001ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ac4:	2302      	movs	r3, #2
  }
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f001 b823 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 817d 	beq.w	8001e0a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b10:	4bbc      	ldr	r3, [pc, #752]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d00c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b1c:	4bb9      	ldr	r3, [pc, #740]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d15c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x10e>
 8001b28:	4bb6      	ldr	r3, [pc, #728]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b34:	d155      	bne.n	8001be2 <HAL_RCC_OscConfig+0x10e>
 8001b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_OscConfig+0x94>
 8001b62:	4ba8      	ldr	r3, [pc, #672]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	e015      	b.n	8001b94 <HAL_RCC_OscConfig+0xc0>
 8001b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b90:	4b9c      	ldr	r3, [pc, #624]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b98:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ba0:	fa92 f2a2 	rbit	r2, r2
 8001ba4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ba8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 811f 	beq.w	8001e08 <HAL_RCC_OscConfig+0x334>
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 8116 	bne.w	8001e08 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f000 bfaf 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12e>
 8001bf4:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a82      	ldr	r2, [pc, #520]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e036      	b.n	8001c70 <HAL_RCC_OscConfig+0x19c>
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x158>
 8001c12:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7b      	ldr	r2, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a78      	ldr	r2, [pc, #480]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e021      	b.n	8001c70 <HAL_RCC_OscConfig+0x19c>
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x184>
 8001c3e:	4b71      	ldr	r3, [pc, #452]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a70      	ldr	r2, [pc, #448]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6e      	ldr	r3, [pc, #440]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6d      	ldr	r2, [pc, #436]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0x19c>
 8001c58:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c70:	4b64      	ldr	r3, [pc, #400]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f023 020f 	bic.w	r2, r3, #15
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	495f      	ldr	r1, [pc, #380]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d059      	beq.n	8001d4e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7fe ffe9 	bl	8000c70 <HAL_GetTick>
 8001c9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7fe ffe4 	bl	8000c70 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	; 0x64
 8001cb2:	d902      	bls.n	8001cba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f000 bf43 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 8001cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001cce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	095b      	lsrs	r3, r3, #5
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_RCC_OscConfig+0x218>
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	e015      	b.n	8001d18 <HAL_RCC_OscConfig+0x244>
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d04:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d1c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d24:	fa92 f2a2 	rbit	r2, r2
 8001d28:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f002 021f 	and.w	r2, r2, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ab      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x1d0>
 8001d4c:	e05d      	b.n	8001e0a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe ff8f 	bl	8000c70 <HAL_GetTick>
 8001d52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d58:	f7fe ff8a 	bl	8000c70 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d902      	bls.n	8001d6e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f000 bee9 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 8001d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d72:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d102      	bne.n	8001da0 <HAL_RCC_OscConfig+0x2cc>
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e015      	b.n	8001dcc <HAL_RCC_OscConfig+0x2f8>
 8001da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001dbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dd0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001dd4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001dd8:	fa92 f2a2 	rbit	r2, r2
 8001ddc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001de0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001de4:	fab2 f282 	clz	r2, r2
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f002 021f 	and.w	r2, r2, #31
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1ab      	bne.n	8001d58 <HAL_RCC_OscConfig+0x284>
 8001e00:	e003      	b.n	8001e0a <HAL_RCC_OscConfig+0x336>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 817d 	beq.w	800211a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e20:	4ba6      	ldr	r3, [pc, #664]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e2c:	4ba3      	ldr	r3, [pc, #652]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d172      	bne.n	8001f1e <HAL_RCC_OscConfig+0x44a>
 8001e38:	4ba0      	ldr	r3, [pc, #640]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d16c      	bne.n	8001f1e <HAL_RCC_OscConfig+0x44a>
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_OscConfig+0x3a0>
 8001e6e:	4b93      	ldr	r3, [pc, #588]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e013      	b.n	8001e9c <HAL_RCC_OscConfig+0x3c8>
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e98:	4b88      	ldr	r3, [pc, #544]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ea2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ea6:	fa92 f2a2 	rbit	r2, r2
 8001eaa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001eae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001eb2:	fab2 f282 	clz	r2, r2
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00a      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x410>
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d002      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f000 be2e 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	21f8      	movs	r1, #248	; 0xf8
 8001efa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f02:	fa91 f1a1 	rbit	r1, r1
 8001f06:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f0a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f0e:	fab1 f181 	clz	r1, r1
 8001f12:	b2c9      	uxtb	r1, r1
 8001f14:	408b      	lsls	r3, r1
 8001f16:	4969      	ldr	r1, [pc, #420]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1c:	e0fd      	b.n	800211a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8088 	beq.w	8002040 <HAL_RCC_OscConfig+0x56c>
 8001f30:	2301      	movs	r3, #1
 8001f32:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	461a      	mov	r2, r3
 8001f58:	2301      	movs	r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fe88 	bl	8000c70 <HAL_GetTick>
 8001f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f66:	f7fe fe83 	bl	8000c70 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d902      	bls.n	8001f7c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	f000 bde2 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x4d8>
 8001fa6:	4b45      	ldr	r3, [pc, #276]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e013      	b.n	8001fd4 <HAL_RCC_OscConfig+0x500>
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fc4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001fda:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fde:	fa92 f2a2 	rbit	r2, r2
 8001fe2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001fe6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001fea:	fab2 f282 	clz	r2, r2
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f042 0220 	orr.w	r2, r2, #32
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f002 021f 	and.w	r2, r2, #31
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0af      	beq.n	8001f66 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	21f8      	movs	r1, #248	; 0xf8
 800201c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002024:	fa91 f1a1 	rbit	r1, r1
 8002028:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800202c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002030:	fab1 f181 	clz	r1, r1
 8002034:	b2c9      	uxtb	r1, r1
 8002036:	408b      	lsls	r3, r1
 8002038:	4920      	ldr	r1, [pc, #128]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
 800203e:	e06c      	b.n	800211a <HAL_RCC_OscConfig+0x646>
 8002040:	2301      	movs	r3, #1
 8002042:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002052:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002060:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	461a      	mov	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe fe00 	bl	8000c70 <HAL_GetTick>
 8002070:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002076:	f7fe fdfb 	bl	8000c70 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d902      	bls.n	800208c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	f000 bd5a 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800209e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d104      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5ec>
 80020b6:	4b01      	ldr	r3, [pc, #4]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	e015      	b.n	80020e8 <HAL_RCC_OscConfig+0x614>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	2302      	movs	r3, #2
 80020c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020e4:	4bc8      	ldr	r3, [pc, #800]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	2202      	movs	r2, #2
 80020ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80020ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020f2:	fa92 f2a2 	rbit	r2, r2
 80020f6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80020fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ad      	bne.n	8002076 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8110 	beq.w	8002350 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d079      	beq.n	8002234 <HAL_RCC_OscConfig+0x760>
 8002140:	2301      	movs	r3, #1
 8002142:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4bab      	ldr	r3, [pc, #684]	; (800240c <HAL_RCC_OscConfig+0x938>)
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	461a      	mov	r2, r3
 8002166:	2301      	movs	r3, #1
 8002168:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe fd81 	bl	8000c70 <HAL_GetTick>
 800216e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002174:	f7fe fd7c 	bl	8000c70 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d902      	bls.n	800218a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	f000 bcdb 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800219c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021a4:	2202      	movs	r2, #2
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	fa93 f2a3 	rbit	r2, r3
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021c8:	2202      	movs	r2, #2
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e4:	4b88      	ldr	r3, [pc, #544]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 80021e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021f0:	2102      	movs	r1, #2
 80021f2:	6019      	str	r1, [r3, #0]
 80021f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f1a3 	rbit	r1, r3
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800220a:	6019      	str	r1, [r3, #0]
  return result;
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0a0      	beq.n	8002174 <HAL_RCC_OscConfig+0x6a0>
 8002232:	e08d      	b.n	8002350 <HAL_RCC_OscConfig+0x87c>
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002244:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f2a3 	rbit	r2, r3
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002256:	601a      	str	r2, [r3, #0]
  return result;
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002260:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	4b68      	ldr	r3, [pc, #416]	; (800240c <HAL_RCC_OscConfig+0x938>)
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	461a      	mov	r2, r3
 8002272:	2300      	movs	r3, #0
 8002274:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7fe fcfb 	bl	8000c70 <HAL_GetTick>
 800227a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002280:	f7fe fcf6 	bl	8000c70 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d902      	bls.n	8002296 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	f000 bc55 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800229e:	2202      	movs	r2, #2
 80022a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022c2:	2202      	movs	r2, #2
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa93 f2a3 	rbit	r2, r3
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022e6:	2202      	movs	r2, #2
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	fa93 f2a3 	rbit	r2, r3
 80022f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002300:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002302:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 8002304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800230e:	2102      	movs	r1, #2
 8002310:	6019      	str	r1, [r3, #0]
 8002312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002316:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f1a3 	rbit	r1, r3
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002328:	6019      	str	r1, [r3, #0]
  return result;
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d197      	bne.n	8002280 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 81a1 	beq.w	80026a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d116      	bne.n	80023a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	4a22      	ldr	r2, [pc, #136]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 800237e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002382:	61d3      	str	r3, [r2, #28]
 8002384:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800239e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_RCC_OscConfig+0x93c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_RCC_OscConfig+0x93c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_RCC_OscConfig+0x93c>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023be:	f7fe fc57 	bl	8000c70 <HAL_GetTick>
 80023c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	e009      	b.n	80023dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe fc52 	bl	8000c70 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e3b1      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_OscConfig+0x93c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ef      	beq.n	80023c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10d      	bne.n	8002414 <HAL_RCC_OscConfig+0x940>
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a02      	ldr	r2, [pc, #8]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e03c      	b.n	8002480 <HAL_RCC_OscConfig+0x9ac>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	10908120 	.word	0x10908120
 8002410:	40007000 	.word	0x40007000
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10c      	bne.n	800243e <HAL_RCC_OscConfig+0x96a>
 8002424:	4bc1      	ldr	r3, [pc, #772]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4ac0      	ldr	r2, [pc, #768]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	4bbe      	ldr	r3, [pc, #760]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4abd      	ldr	r2, [pc, #756]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002436:	f023 0304 	bic.w	r3, r3, #4
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e020      	b.n	8002480 <HAL_RCC_OscConfig+0x9ac>
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x994>
 800244e:	4bb7      	ldr	r3, [pc, #732]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4ab6      	ldr	r2, [pc, #728]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4bb4      	ldr	r3, [pc, #720]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4ab3      	ldr	r2, [pc, #716]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0x9ac>
 8002468:	4bb0      	ldr	r3, [pc, #704]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4aaf      	ldr	r2, [pc, #700]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	4bad      	ldr	r3, [pc, #692]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4aac      	ldr	r2, [pc, #688]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800247a:	f023 0304 	bic.w	r3, r3, #4
 800247e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8081 	beq.w	8002594 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe fbed 	bl	8000c70 <HAL_GetTick>
 8002496:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7fe fbe8 	bl	8000c70 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e345      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024bc:	2202      	movs	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024e0:	2202      	movs	r2, #2
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024fa:	601a      	str	r2, [r3, #0]
  return result;
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002504:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	095b      	lsrs	r3, r3, #5
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d102      	bne.n	8002520 <HAL_RCC_OscConfig+0xa4c>
 800251a:	4b84      	ldr	r3, [pc, #528]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	e013      	b.n	8002548 <HAL_RCC_OscConfig+0xa74>
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002528:	2202      	movs	r2, #2
 800252a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002530:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	fa93 f2a3 	rbit	r2, r3
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	4b79      	ldr	r3, [pc, #484]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800254c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002550:	2102      	movs	r1, #2
 8002552:	6011      	str	r1, [r2, #0]
 8002554:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002558:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	fa92 f1a2 	rbit	r1, r2
 8002562:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002566:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800256a:	6011      	str	r1, [r2, #0]
  return result;
 800256c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002570:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	fab2 f282 	clz	r2, r2
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	f002 021f 	and.w	r2, r2, #31
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d084      	beq.n	800249c <HAL_RCC_OscConfig+0x9c8>
 8002592:	e07f      	b.n	8002694 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002594:	f7fe fb6c 	bl	8000c70 <HAL_GetTick>
 8002598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259c:	e00b      	b.n	80025b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe fb67 	bl	8000c70 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e2c4      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025be:	2202      	movs	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025e2:	2202      	movs	r2, #2
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025fc:	601a      	str	r2, [r3, #0]
  return result;
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002606:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d102      	bne.n	8002622 <HAL_RCC_OscConfig+0xb4e>
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	e013      	b.n	800264a <HAL_RCC_OscConfig+0xb76>
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800262a:	2202      	movs	r2, #2
 800262c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002640:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800264e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002652:	2102      	movs	r1, #2
 8002654:	6011      	str	r1, [r2, #0]
 8002656:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	fa92 f1a2 	rbit	r1, r2
 8002664:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002668:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800266c:	6011      	str	r1, [r2, #0]
  return result;
 800266e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002672:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	fab2 f282 	clz	r2, r2
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f002 021f 	and.w	r2, r2, #31
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d184      	bne.n	800259e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002694:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 80026a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8242 	beq.w	8002b3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ba:	4b1c      	ldr	r3, [pc, #112]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	f000 8213 	beq.w	8002aee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 8162 	bne.w	800299e <HAL_RCC_OscConfig+0xeca>
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	fa93 f2a3 	rbit	r2, r3
 80026f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026fe:	601a      	str	r2, [r3, #0]
  return result;
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002708:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002714:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	461a      	mov	r2, r3
 800271c:	2300      	movs	r3, #0
 800271e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe faa6 	bl	8000c70 <HAL_GetTick>
 8002724:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002728:	e00c      	b.n	8002744 <HAL_RCC_OscConfig+0xc70>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fa9e 	bl	8000c70 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1fd      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800274c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002768:	601a      	str	r2, [r3, #0]
  return result;
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002772:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d102      	bne.n	800278e <HAL_RCC_OscConfig+0xcba>
 8002788:	4bb0      	ldr	r3, [pc, #704]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	e027      	b.n	80027de <HAL_RCC_OscConfig+0xd0a>
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002796:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fa93 f2a3 	rbit	r2, r3
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	4b9c      	ldr	r3, [pc, #624]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027ea:	6011      	str	r1, [r2, #0]
 80027ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	fa92 f1a2 	rbit	r1, r2
 80027fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002802:	6011      	str	r1, [r2, #0]
  return result;
 8002804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002808:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	fab2 f282 	clz	r2, r2
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f042 0220 	orr.w	r2, r2, #32
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f002 021f 	and.w	r2, r2, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f202 	lsl.w	r2, r1, r2
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d182      	bne.n	8002730 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282a:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	430b      	orrs	r3, r1
 800284c:	497f      	ldr	r1, [pc, #508]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800285a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800285e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa93 f2a3 	rbit	r2, r3
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002876:	601a      	str	r2, [r3, #0]
  return result;
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002880:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800288c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	461a      	mov	r2, r3
 8002894:	2301      	movs	r3, #1
 8002896:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe f9ea 	bl	8000c70 <HAL_GetTick>
 800289c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a0:	e009      	b.n	80028b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe f9e5 	bl	8000c70 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e144      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fa93 f2a3 	rbit	r2, r3
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028da:	601a      	str	r2, [r3, #0]
  return result;
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d102      	bne.n	8002900 <HAL_RCC_OscConfig+0xe2c>
 80028fa:	4b54      	ldr	r3, [pc, #336]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	e027      	b.n	8002950 <HAL_RCC_OscConfig+0xe7c>
 8002900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002904:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800292e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002954:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002958:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800295c:	6011      	str	r1, [r2, #0]
 800295e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002962:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	fa92 f1a2 	rbit	r1, r2
 800296c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002970:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002974:	6011      	str	r1, [r2, #0]
  return result;
 8002976:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800297a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	fab2 f282 	clz	r2, r2
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f002 021f 	and.w	r2, r2, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d082      	beq.n	80028a2 <HAL_RCC_OscConfig+0xdce>
 800299c:	e0cf      	b.n	8002b3e <HAL_RCC_OscConfig+0x106a>
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	fa93 f2a3 	rbit	r2, r3
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029c2:	601a      	str	r2, [r3, #0]
  return result;
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	461a      	mov	r2, r3
 80029e0:	2300      	movs	r3, #0
 80029e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fe f944 	bl	8000c70 <HAL_GetTick>
 80029e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ec:	e009      	b.n	8002a02 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe f93f 	bl	8000c70 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e09e      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f2a3 	rbit	r2, r3
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a26:	601a      	str	r2, [r3, #0]
  return result;
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d104      	bne.n	8002a50 <HAL_RCC_OscConfig+0xf7c>
 8002a46:	4b01      	ldr	r3, [pc, #4]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	e029      	b.n	8002aa0 <HAL_RCC_OscConfig+0xfcc>
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fa93 f2a3 	rbit	r2, r3
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f2a3 	rbit	r2, r3
 8002a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCC_OscConfig+0x1078>)
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002aa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002aac:	6011      	str	r1, [r2, #0]
 8002aae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	fa92 f1a2 	rbit	r1, r2
 8002abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ac0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ac4:	6011      	str	r1, [r2, #0]
  return result;
 8002ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	fab2 f282 	clz	r2, r2
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	f042 0220 	orr.w	r2, r2, #32
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f002 021f 	and.w	r2, r2, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d180      	bne.n	80029ee <HAL_RCC_OscConfig+0xf1a>
 8002aec:	e027      	b.n	8002b3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e01e      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_RCC_OscConfig+0x1078>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d10b      	bne.n	8002b3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b09e      	sub	sp, #120	; 0x78
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e162      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b90      	ldr	r3, [pc, #576]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d910      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b8d      	ldr	r3, [pc, #564]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0207 	bic.w	r2, r3, #7
 8002b7e:	498b      	ldr	r1, [pc, #556]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b89      	ldr	r3, [pc, #548]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e14a      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b82      	ldr	r3, [pc, #520]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	497f      	ldr	r1, [pc, #508]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80dc 	beq.w	8002d7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d13c      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xf6>
 8002bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xa6>
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	e00f      	b.n	8002c16 <HAL_RCC_ClockConfig+0xc6>
 8002bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	667b      	str	r3, [r7, #100]	; 0x64
 8002c04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c08:	663b      	str	r3, [r7, #96]	; 0x60
 8002c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c12:	4b67      	ldr	r3, [pc, #412]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c26:	fab2 f282 	clz	r2, r2
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f042 0220 	orr.w	r2, r2, #32
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f002 021f 	and.w	r2, r2, #31
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d17b      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0f3      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d13c      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x178>
 8002c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d102      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x128>
 8002c72:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	e00f      	b.n	8002c98 <HAL_RCC_ClockConfig+0x148>
 8002c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
 8002c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c94:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ca0:	fa92 f2a2 	rbit	r2, r2
 8002ca4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca8:	fab2 f282 	clz	r2, r2
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f042 0220 	orr.w	r2, r2, #32
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f002 021f 	and.w	r2, r2, #31
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d13a      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0b2      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x1a0>
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	e00d      	b.n	8002d0c <HAL_RCC_ClockConfig+0x1bc>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	61ba      	str	r2, [r7, #24]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	fa92 f2a2 	rbit	r2, r2
 8002d16:	617a      	str	r2, [r7, #20]
  return result;
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	fab2 f282 	clz	r2, r2
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	f042 0220 	orr.w	r2, r2, #32
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	f002 021f 	and.w	r2, r2, #31
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e079      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	491a      	ldr	r1, [pc, #104]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d4c:	f7fd ff90 	bl	8000c70 <HAL_GetTick>
 8002d50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fd ff8c 	bl	8000c70 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e061      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d214      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 0207 	bic.w	r2, r3, #7
 8002d92:	4906      	ldr	r1, [pc, #24]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e040      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	491a      	ldr	r1, [pc, #104]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4912      	ldr	r1, [pc, #72]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002df2:	f000 f829 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002df6:	4601      	mov	r1, r0
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e00:	22f0      	movs	r2, #240	; 0xf0
 8002e02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	fa92 f2a2 	rbit	r2, r2
 8002e0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	fab2 f282 	clz	r2, r2
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	40d3      	lsrs	r3, r2
 8002e16:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x2ec>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_RCC_ClockConfig+0x2f0>)
 8002e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_ClockConfig+0x2f4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fede 	bl	8000be8 <HAL_InitTick>
  
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3778      	adds	r7, #120	; 0x78
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08003294 	.word	0x08003294
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e62:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d002      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x30>
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_GetSysClockFreq+0x36>
 8002e76:	e026      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e7a:	613b      	str	r3, [r7, #16]
      break;
 8002e7c:	e026      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	0c9b      	lsrs	r3, r3, #18
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e88:	5cd3      	ldrb	r3, [r2, r3]
 8002e8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e004      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	613b      	str	r3, [r7, #16]
      break;
 8002ec4:	e002      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ec8:	613b      	str	r3, [r7, #16]
      break;
 8002eca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ecc:	693b      	ldr	r3, [r7, #16]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	007a1200 	.word	0x007a1200
 8002ee4:	080032a4 	.word	0x080032a4
 8002ee8:	080032b4 	.word	0x080032b4
 8002eec:	003d0900 	.word	0x003d0900

08002ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b092      	sub	sp, #72	; 0x48
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80d4 	beq.w	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f14:	4b4e      	ldr	r3, [pc, #312]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10e      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	61d3      	str	r3, [r2, #28]
 8002f2c:	4b48      	ldr	r3, [pc, #288]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b45      	ldr	r3, [pc, #276]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b42      	ldr	r3, [pc, #264]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a41      	ldr	r2, [pc, #260]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7fd fe8b 	bl	8000c70 <HAL_GetTick>
 8002f5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fd fe87 	bl	8000c70 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e14b      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7c:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8084 	beq.w	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d07c      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f9c:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2300      	movs	r3, #0
 8002fec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04b      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fd fe37 	bl	8000c70 <HAL_GetTick>
 8003002:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	e00a      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fd fe33 	bl	8000c70 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	; 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e0f5      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800301c:	2302      	movs	r3, #2
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
 8003028:	2302      	movs	r3, #2
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	61fb      	str	r3, [r7, #28]
  return result;
 8003034:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d108      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800304a:	4b01      	ldr	r3, [pc, #4]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	e00d      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
 8003058:	10908100 	.word	0x10908100
 800305c:	2302      	movs	r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	4b69      	ldr	r3, [pc, #420]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	2202      	movs	r2, #2
 800306e:	613a      	str	r2, [r7, #16]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	fa92 f2a2 	rbit	r2, r2
 8003076:	60fa      	str	r2, [r7, #12]
  return result;
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	fab2 f282 	clz	r2, r2
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	f002 021f 	and.w	r2, r2, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0b7      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003096:	4b5e      	ldr	r3, [pc, #376]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	495b      	ldr	r1, [pc, #364]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b0:	4b57      	ldr	r3, [pc, #348]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4a56      	ldr	r2, [pc, #344]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c8:	4b51      	ldr	r3, [pc, #324]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f023 0203 	bic.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	494e      	ldr	r1, [pc, #312]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f023 0210 	bic.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	4947      	ldr	r1, [pc, #284]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003104:	4b42      	ldr	r3, [pc, #264]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	493f      	ldr	r1, [pc, #252]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f023 0220 	bic.w	r2, r3, #32
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	4938      	ldr	r1, [pc, #224]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003130:	4313      	orrs	r3, r2
 8003132:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003140:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	4930      	ldr	r1, [pc, #192]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800314e:	4313      	orrs	r3, r2
 8003150:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800315e:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4929      	ldr	r1, [pc, #164]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800317c:	4b24      	ldr	r3, [pc, #144]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	4921      	ldr	r1, [pc, #132]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800318a:	4313      	orrs	r3, r2
 800318c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	491a      	ldr	r1, [pc, #104]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	4912      	ldr	r1, [pc, #72]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	490b      	ldr	r1, [pc, #44]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003202:	4313      	orrs	r3, r2
 8003204:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3748      	adds	r7, #72	; 0x48
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000

08003214 <__libc_init_array>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	4d0d      	ldr	r5, [pc, #52]	; (800324c <__libc_init_array+0x38>)
 8003218:	4c0d      	ldr	r4, [pc, #52]	; (8003250 <__libc_init_array+0x3c>)
 800321a:	1b64      	subs	r4, r4, r5
 800321c:	10a4      	asrs	r4, r4, #2
 800321e:	2600      	movs	r6, #0
 8003220:	42a6      	cmp	r6, r4
 8003222:	d109      	bne.n	8003238 <__libc_init_array+0x24>
 8003224:	4d0b      	ldr	r5, [pc, #44]	; (8003254 <__libc_init_array+0x40>)
 8003226:	4c0c      	ldr	r4, [pc, #48]	; (8003258 <__libc_init_array+0x44>)
 8003228:	f000 f820 	bl	800326c <_init>
 800322c:	1b64      	subs	r4, r4, r5
 800322e:	10a4      	asrs	r4, r4, #2
 8003230:	2600      	movs	r6, #0
 8003232:	42a6      	cmp	r6, r4
 8003234:	d105      	bne.n	8003242 <__libc_init_array+0x2e>
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	f855 3b04 	ldr.w	r3, [r5], #4
 800323c:	4798      	blx	r3
 800323e:	3601      	adds	r6, #1
 8003240:	e7ee      	b.n	8003220 <__libc_init_array+0xc>
 8003242:	f855 3b04 	ldr.w	r3, [r5], #4
 8003246:	4798      	blx	r3
 8003248:	3601      	adds	r6, #1
 800324a:	e7f2      	b.n	8003232 <__libc_init_array+0x1e>
 800324c:	080032c4 	.word	0x080032c4
 8003250:	080032c4 	.word	0x080032c4
 8003254:	080032c4 	.word	0x080032c4
 8003258:	080032c8 	.word	0x080032c8

0800325c <memset>:
 800325c:	4402      	add	r2, r0
 800325e:	4603      	mov	r3, r0
 8003260:	4293      	cmp	r3, r2
 8003262:	d100      	bne.n	8003266 <memset+0xa>
 8003264:	4770      	bx	lr
 8003266:	f803 1b01 	strb.w	r1, [r3], #1
 800326a:	e7f9      	b.n	8003260 <memset+0x4>

0800326c <_init>:
 800326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326e:	bf00      	nop
 8003270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003272:	bc08      	pop	{r3}
 8003274:	469e      	mov	lr, r3
 8003276:	4770      	bx	lr

08003278 <_fini>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	bf00      	nop
 800327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327e:	bc08      	pop	{r3}
 8003280:	469e      	mov	lr, r3
 8003282:	4770      	bx	lr

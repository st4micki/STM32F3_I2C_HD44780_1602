
lcd_i2c_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc4  08003bc4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc4  08003bc4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08003c3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003c3c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087fe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001882  00000000  00000000  0002889e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0002a120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab07  00000000  00000000  0002af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab52  00000000  00000000  00045a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009901e  00000000  00000000  000505d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e95ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002170  00000000  00000000  000e9640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b38 	.word	0x08003b38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003b38 	.word	0x08003b38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_LCD_get_young_bits>:
#define INCREMENT_NO_SHIFT		0x06
#define BACKLIGHT_ON			0x08



uint8_t _LCD_get_young_bits(uint8_t data){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	data <<= 4;
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	011b      	lsls	r3, r3, #4
 800027e:	71fb      	strb	r3, [r7, #7]
	data &= 0xF0;
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	f023 030f 	bic.w	r3, r3, #15
 8000286:	71fb      	strb	r3, [r7, #7]
	return data;
 8000288:	79fb      	ldrb	r3, [r7, #7]

}
 800028a:	4618      	mov	r0, r3
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <_LCD_get_old_bits>:


uint8_t _LCD_get_old_bits(uint8_t data){
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	4603      	mov	r3, r0
 800029e:	71fb      	strb	r3, [r7, #7]
	return data & 0xF0;
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	f023 030f 	bic.w	r3, r3, #15
 80002a6:	b2db      	uxtb	r3, r3
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <_LCD_send_command>:

void _LCD_send_command(I2C_HandleTypeDef* hi2c, uint8_t command){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af02      	add	r7, sp, #8
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	70fb      	strb	r3, [r7, #3]
	uint8_t send[4];
	send[0] = _LCD_get_old_bits(command) | E_PIN_MASK | BACKLIGHT_ON; // older half of the command byte with E pin set to high
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ffe7 	bl	8000296 <_LCD_get_old_bits>
 80002c8:	4603      	mov	r3, r0
 80002ca:	f043 030c 	orr.w	r3, r3, #12
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	723b      	strb	r3, [r7, #8]
	send[1] = _LCD_get_old_bits(command) | BACKLIGHT_ON; // older half of the command byte with E pin set to low
 80002d2:	78fb      	ldrb	r3, [r7, #3]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ffde 	bl	8000296 <_LCD_get_old_bits>
 80002da:	4603      	mov	r3, r0
 80002dc:	f043 0308 	orr.w	r3, r3, #8
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	727b      	strb	r3, [r7, #9]
	send[2] = _LCD_get_young_bits(command) | E_PIN_MASK | BACKLIGHT_ON; // younger half of the command byte with E pin set to high
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ffc2 	bl	8000270 <_LCD_get_young_bits>
 80002ec:	4603      	mov	r3, r0
 80002ee:	f043 030c 	orr.w	r3, r3, #12
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	72bb      	strb	r3, [r7, #10]
	send[3] = _LCD_get_young_bits(command) | BACKLIGHT_ON; // younger half of the command byte with E pin set to low
 80002f6:	78fb      	ldrb	r3, [r7, #3]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ffb9 	bl	8000270 <_LCD_get_young_bits>
 80002fe:	4603      	mov	r3, r0
 8000300:	f043 0308 	orr.w	r3, r3, #8
 8000304:	b2db      	uxtb	r3, r3
 8000306:	72fb      	strb	r3, [r7, #11]
	uint16_t send_size = sizeof(send);
 8000308:	2304      	movs	r3, #4
 800030a:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, send_size, 100);
 800030c:	89fb      	ldrh	r3, [r7, #14]
 800030e:	f107 0208 	add.w	r2, r7, #8
 8000312:	2164      	movs	r1, #100	; 0x64
 8000314:	9100      	str	r1, [sp, #0]
 8000316:	214e      	movs	r1, #78	; 0x4e
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f001 f803 	bl	8001324 <HAL_I2C_Master_Transmit>

}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <_LCD_startup>:

void _LCD_startup(I2C_HandleTypeDef* hi2c){
 8000326:	b580      	push	{r7, lr}
 8000328:	b086      	sub	sp, #24
 800032a:	af02      	add	r7, sp, #8
 800032c:	6078      	str	r0, [r7, #4]
	uint8_t send[2] = {
 800032e:	f643 033c 	movw	r3, #14396	; 0x383c
 8000332:	81bb      	strh	r3, [r7, #12]
			STARTUP | E_PIN_MASK | BACKLIGHT_ON,
			STARTUP | BACKLIGHT_ON
	};
	HAL_Delay(20);
 8000334:	2014      	movs	r0, #20
 8000336:	f000 fc99 	bl	8000c6c <HAL_Delay>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 800033a:	f107 020c 	add.w	r2, r7, #12
 800033e:	2364      	movs	r3, #100	; 0x64
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2302      	movs	r3, #2
 8000344:	214e      	movs	r1, #78	; 0x4e
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f000 ffec 	bl	8001324 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800034c:	2005      	movs	r0, #5
 800034e:	f000 fc8d 	bl	8000c6c <HAL_Delay>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 8000352:	f107 020c 	add.w	r2, r7, #12
 8000356:	2364      	movs	r3, #100	; 0x64
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	2302      	movs	r3, #2
 800035c:	214e      	movs	r1, #78	; 0x4e
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f000 ffe0 	bl	8001324 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000364:	2001      	movs	r0, #1
 8000366:	f000 fc81 	bl	8000c6c <HAL_Delay>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 800036a:	f107 020c 	add.w	r2, r7, #12
 800036e:	2364      	movs	r3, #100	; 0x64
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	2302      	movs	r3, #2
 8000374:	214e      	movs	r1, #78	; 0x4e
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f000 ffd4 	bl	8001324 <HAL_I2C_Master_Transmit>


}
 800037c:	bf00      	nop
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <_LCD_set_4_bits>:

void _LCD_set_4_bits(I2C_HandleTypeDef* hi2c, uint8_t num_of_lines){
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af02      	add	r7, sp, #8
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] = {
 8000390:	f642 032c 	movw	r3, #10284	; 0x282c
 8000394:	81bb      	strh	r3, [r7, #12]
			FUNCTION_SET_4_BIT_MODE | E_PIN_MASK | BACKLIGHT_ON,
			FUNCTION_SET_4_BIT_MODE | BACKLIGHT_ON
	};
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS , data, 2, 100);
 8000396:	f107 020c 	add.w	r2, r7, #12
 800039a:	2364      	movs	r3, #100	; 0x64
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2302      	movs	r3, #2
 80003a0:	214e      	movs	r1, #78	; 0x4e
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f000 ffbe 	bl	8001324 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80003a8:	2001      	movs	r0, #1
 80003aa:	f000 fc5f 	bl	8000c6c <HAL_Delay>
	if(num_of_lines == 2)
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	d103      	bne.n	80003bc <_LCD_set_4_bits+0x38>
		_LCD_send_command(hi2c, FUNCTION_SET_4_BIT_MODE | TWO_LINES_ENABLE);
 80003b4:	2128      	movs	r1, #40	; 0x28
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f7ff ff7c 	bl	80002b4 <_LCD_send_command>
}
 80003bc:	bf00      	nop
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <LCD_init>:

void LCD_init(I2C_HandleTypeDef* hi2c, uint8_t num_of_lines){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
	_LCD_startup(hi2c);
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f7ff ffa8 	bl	8000326 <_LCD_startup>
	HAL_Delay(1);
 80003d6:	2001      	movs	r0, #1
 80003d8:	f000 fc48 	bl	8000c6c <HAL_Delay>
	_LCD_set_4_bits(hi2c, num_of_lines);
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	4619      	mov	r1, r3
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f7ff ffcf 	bl	8000384 <_LCD_set_4_bits>
	HAL_Delay(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f000 fc40 	bl	8000c6c <HAL_Delay>
	_LCD_send_command(hi2c, DISPLAY_OFF);
 80003ec:	2108      	movs	r1, #8
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff ff60 	bl	80002b4 <_LCD_send_command>
	HAL_Delay(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fc39 	bl	8000c6c <HAL_Delay>
	_LCD_send_command(hi2c, CLEAR_DISPLAY);
 80003fa:	2101      	movs	r1, #1
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ff59 	bl	80002b4 <_LCD_send_command>
	HAL_Delay(1);
 8000402:	2001      	movs	r0, #1
 8000404:	f000 fc32 	bl	8000c6c <HAL_Delay>
	_LCD_send_command(hi2c, INCREMENT_NO_SHIFT);
 8000408:	2106      	movs	r1, #6
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ff52 	bl	80002b4 <_LCD_send_command>
	HAL_Delay(1);
 8000410:	2001      	movs	r0, #1
 8000412:	f000 fc2b 	bl	8000c6c <HAL_Delay>
	_LCD_send_command(hi2c, 0x0C);
 8000416:	210c      	movs	r1, #12
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f7ff ff4b 	bl	80002b4 <_LCD_send_command>
	HAL_Delay(1);
 800041e:	2001      	movs	r0, #1
 8000420:	f000 fc24 	bl	8000c6c <HAL_Delay>

}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <LCD_putchar>:

void LCD_putchar(I2C_HandleTypeDef* hi2c, char data){
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af02      	add	r7, sp, #8
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	460b      	mov	r3, r1
 8000436:	70fb      	strb	r3, [r7, #3]
	uint8_t send[4];
	send[0] = _LCD_get_old_bits((uint8_t)data) | E_PIN_MASK | RS_PIN_MASK | BACKLIGHT_ON; // older half of the command byte with E pin set to high
 8000438:	78fb      	ldrb	r3, [r7, #3]
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff2b 	bl	8000296 <_LCD_get_old_bits>
 8000440:	4603      	mov	r3, r0
 8000442:	f043 030d 	orr.w	r3, r3, #13
 8000446:	b2db      	uxtb	r3, r3
 8000448:	723b      	strb	r3, [r7, #8]
	send[1] = _LCD_get_old_bits((uint8_t)data) | RS_PIN_MASK | BACKLIGHT_ON; // older half of the command byte with E pin set to low
 800044a:	78fb      	ldrb	r3, [r7, #3]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff22 	bl	8000296 <_LCD_get_old_bits>
 8000452:	4603      	mov	r3, r0
 8000454:	f043 0309 	orr.w	r3, r3, #9
 8000458:	b2db      	uxtb	r3, r3
 800045a:	727b      	strb	r3, [r7, #9]
	send[2] = _LCD_get_young_bits((uint8_t)data) | E_PIN_MASK | RS_PIN_MASK | BACKLIGHT_ON; // younger half of the command byte with E pin set to high
 800045c:	78fb      	ldrb	r3, [r7, #3]
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff06 	bl	8000270 <_LCD_get_young_bits>
 8000464:	4603      	mov	r3, r0
 8000466:	f043 030d 	orr.w	r3, r3, #13
 800046a:	b2db      	uxtb	r3, r3
 800046c:	72bb      	strb	r3, [r7, #10]
	send[3] = _LCD_get_young_bits((uint8_t)data) | RS_PIN_MASK | BACKLIGHT_ON; // younger half of the command byte with E pin set to low
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fefd 	bl	8000270 <_LCD_get_young_bits>
 8000476:	4603      	mov	r3, r0
 8000478:	f043 0309 	orr.w	r3, r3, #9
 800047c:	b2db      	uxtb	r3, r3
 800047e:	72fb      	strb	r3, [r7, #11]
	int16_t send_size = sizeof(send);
 8000480:	2304      	movs	r3, #4
 8000482:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, send_size, 100);
 8000484:	89fb      	ldrh	r3, [r7, #14]
 8000486:	f107 0208 	add.w	r2, r7, #8
 800048a:	2164      	movs	r1, #100	; 0x64
 800048c:	9100      	str	r1, [sp, #0]
 800048e:	214e      	movs	r1, #78	; 0x4e
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 ff47 	bl	8001324 <HAL_I2C_Master_Transmit>

}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <LCD_printf>:

void LCD_printf(I2C_HandleTypeDef* hi2c, char *data){
 800049e:	b580      	push	{r7, lr}
 80004a0:	b084      	sub	sp, #16
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
 80004a6:	6039      	str	r1, [r7, #0]
	for(char* i = data; *i != '\0'; i++){
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	e008      	b.n	80004c0 <LCD_printf+0x22>
		LCD_putchar(hi2c, *i);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	4619      	mov	r1, r3
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f7ff ffb9 	bl	800042c <LCD_putchar>
	for(char* i = data; *i != '\0'; i++){
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	3301      	adds	r3, #1
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f2      	bne.n	80004ae <LCD_printf+0x10>
	}
}
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <HAL_GPIO_EXTI_Callback>:
//}




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	4603      	mov	r3, r0
 80004da:	80fb      	strh	r3, [r7, #6]

}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fb57 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f827 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f947 	bl	8000788 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004fa:	f000 f885 	bl	8000608 <MX_I2C1_Init>
  MX_I2C3_Init();
 80004fe:	f000 f903 	bl	8000708 <MX_I2C3_Init>
  MX_I2C2_Init();
 8000502:	f000 f8c1 	bl	8000688 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LCD_init(&hi2c3, 2);
 8000506:	2102      	movs	r1, #2
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <main+0x54>)
 800050a:	f7ff ff5b 	bl	80003c4 <LCD_init>
  int year = 2024;
 800050e:	f44f 63fd 	mov.w	r3, #2024	; 0x7e8
 8000512:	617b      	str	r3, [r7, #20]
//  char send[] = "hello world";
  char buf[20] = {0};
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
  sprintf(buf, "Hello World%d%d", year, year);
 8000524:	4638      	mov	r0, r7
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	4905      	ldr	r1, [pc, #20]	; (8000540 <main+0x58>)
 800052c:	f002 fe96 	bl	800325c <siprintf>
  LCD_printf(&hi2c3, buf);
 8000530:	463b      	mov	r3, r7
 8000532:	4619      	mov	r1, r3
 8000534:	4801      	ldr	r0, [pc, #4]	; (800053c <main+0x54>)
 8000536:	f7ff ffb2 	bl	800049e <LCD_printf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x52>
 800053c:	20000134 	.word	0x20000134
 8000540:	08003b50 	.word	0x08003b50

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b09c      	sub	sp, #112	; 0x70
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800054e:	2228      	movs	r2, #40	; 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fe7a 	bl	800324c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000568:	463b      	mov	r3, r7
 800056a:	2234      	movs	r2, #52	; 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fe6c 	bl	800324c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000574:	2303      	movs	r3, #3
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000592:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000594:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000598:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fa8a 	bl	8001ab8 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005aa:	f000 f947 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fab2 	bl	8002b34 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d6:	f000 f931 	bl	800083c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 80005da:	f248 0360 	movw	r3, #32864	; 0x8060
 80005de:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fc70 	bl	8002ed4 <HAL_RCCEx_PeriphCLKConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005fa:	f000 f91f 	bl	800083c <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3770      	adds	r7, #112	; 0x70
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_I2C1_Init+0x74>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <MX_I2C1_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_I2C1_Init+0x74>)
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <MX_I2C1_Init+0x7c>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_I2C1_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000642:	480e      	ldr	r0, [pc, #56]	; (800067c <MX_I2C1_Init+0x74>)
 8000644:	f000 fdd2 	bl	80011ec <HAL_I2C_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064e:	f000 f8f5 	bl	800083c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	4809      	ldr	r0, [pc, #36]	; (800067c <MX_I2C1_Init+0x74>)
 8000656:	f001 f997 	bl	8001988 <HAL_I2CEx_ConfigAnalogFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000660:	f000 f8ec 	bl	800083c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000664:	2100      	movs	r1, #0
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_I2C1_Init+0x74>)
 8000668:	f001 f9d9 	bl	8001a1e <HAL_I2CEx_ConfigDigitalFilter>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f8e3 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000008c 	.word	0x2000008c
 8000680:	40005400 	.word	0x40005400
 8000684:	2000090e 	.word	0x2000090e

08000688 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_I2C2_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_I2C2_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_I2C2_Init+0x74>)
 8000694:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <MX_I2C2_Init+0x7c>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_I2C2_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_I2C2_Init+0x74>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_I2C2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_I2C2_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C2_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C2_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <MX_I2C2_Init+0x74>)
 80006c4:	f000 fd92 	bl	80011ec <HAL_I2C_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006ce:	f000 f8b5 	bl	800083c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <MX_I2C2_Init+0x74>)
 80006d6:	f001 f957 	bl	8001988 <HAL_I2CEx_ConfigAnalogFilter>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006e0:	f000 f8ac 	bl	800083c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_I2C2_Init+0x74>)
 80006e8:	f001 f999 	bl	8001a1e <HAL_I2CEx_ConfigDigitalFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 f8a3 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000e0 	.word	0x200000e0
 8000700:	40005800 	.word	0x40005800
 8000704:	2000090e 	.word	0x2000090e

08000708 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_I2C3_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_I2C3_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_I2C3_Init+0x74>)
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <MX_I2C3_Init+0x7c>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_I2C3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_I2C3_Init+0x74>)
 8000720:	2201      	movs	r2, #1
 8000722:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_I2C3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_I2C3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C3_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C3_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <MX_I2C3_Init+0x74>)
 8000744:	f000 fd52 	bl	80011ec <HAL_I2C_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800074e:	f000 f875 	bl	800083c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <MX_I2C3_Init+0x74>)
 8000756:	f001 f917 	bl	8001988 <HAL_I2CEx_ConfigAnalogFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 f86c 	bl	800083c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_I2C3_Init+0x74>)
 8000768:	f001 f959 	bl	8001a1e <HAL_I2CEx_ConfigDigitalFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f863 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000134 	.word	0x20000134
 8000780:	40007800 	.word	0x40007800
 8000784:	2000090e 	.word	0x2000090e

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_GPIO_Init+0xac>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a24      	ldr	r2, [pc, #144]	; (8000834 <MX_GPIO_Init+0xac>)
 80007a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <MX_GPIO_Init+0xac>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_GPIO_Init+0xac>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <MX_GPIO_Init+0xac>)
 80007bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_GPIO_Init+0xac>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_GPIO_Init+0xac>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_GPIO_Init+0xac>)
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_GPIO_Init+0xac>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_GPIO_Init+0xac>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_GPIO_Init+0xac>)
 80007ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_GPIO_Init+0xac>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000804:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080a:	2301      	movs	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <MX_GPIO_Init+0xb0>)
 8000816:	f000 fb5f 	bl	8000ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2028      	movs	r0, #40	; 0x28
 8000820:	f000 fb23 	bl	8000e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000824:	2028      	movs	r0, #40	; 0x28
 8000826:	f000 fb3c 	bl	8000ea2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000
 8000838:	48000800 	.word	0x48000800

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x44>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_MspInit+0x44>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x44>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x44>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x44>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x44>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800087e:	2007      	movs	r0, #7
 8000880:	f000 fae8 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b090      	sub	sp, #64	; 0x40
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a64      	ldr	r2, [pc, #400]	; (8000a40 <HAL_I2C_MspInit+0x1b0>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d146      	bne.n	8000940 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b64      	ldr	r3, [pc, #400]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a63      	ldr	r2, [pc, #396]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b61      	ldr	r3, [pc, #388]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80008c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b5e      	ldr	r3, [pc, #376]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a5d      	ldr	r2, [pc, #372]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80008d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b5b      	ldr	r3, [pc, #364]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e8:	2312      	movs	r3, #18
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f4:	2304      	movs	r3, #4
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f000 fae9 	bl	8000ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090a:	2312      	movs	r3, #18
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000916:	2304      	movs	r3, #4
 8000918:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091e:	4619      	mov	r1, r3
 8000920:	4849      	ldr	r0, [pc, #292]	; (8000a48 <HAL_I2C_MspInit+0x1b8>)
 8000922:	f000 fad9 	bl	8000ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000926:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a46      	ldr	r2, [pc, #280]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 800092c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800093e:	e07b      	b.n	8000a38 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a41      	ldr	r2, [pc, #260]	; (8000a4c <HAL_I2C_MspInit+0x1bc>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d12a      	bne.n	80009a0 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a3d      	ldr	r2, [pc, #244]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	61fb      	str	r3, [r7, #28]
 8000960:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000962:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000968:	2312      	movs	r3, #18
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000974:	2304      	movs	r3, #4
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097c:	4619      	mov	r1, r3
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f000 faa9 	bl	8000ed8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000986:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 800098c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	69bb      	ldr	r3, [r7, #24]
}
 800099e:	e04b      	b.n	8000a38 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C3)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a2a      	ldr	r2, [pc, #168]	; (8000a50 <HAL_I2C_MspInit+0x1c0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d146      	bne.n	8000a38 <HAL_I2C_MspInit+0x1a8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a25      	ldr	r2, [pc, #148]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80009b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e0:	2312      	movs	r3, #18
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80009ec:	2303      	movs	r3, #3
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f4:	4619      	mov	r1, r3
 80009f6:	4817      	ldr	r0, [pc, #92]	; (8000a54 <HAL_I2C_MspInit+0x1c4>)
 80009f8:	f000 fa6e 	bl	8000ed8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a02:	2312      	movs	r3, #18
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fa5c 	bl	8000ed8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 8000a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a2a:	61d3      	str	r3, [r2, #28]
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_I2C_MspInit+0x1b4>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3740      	adds	r7, #64	; 0x40
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40005400 	.word	0x40005400
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	40005800 	.word	0x40005800
 8000a50:	40007800 	.word	0x40007800
 8000a54:	48000800 	.word	0x48000800

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f8c2 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ab0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ab4:	f000 fb82 	bl	80011bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <_sbrk+0x5c>)
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <_sbrk+0x60>)
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <_sbrk+0x64>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <_sbrk+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d207      	bcs.n	8000afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aec:	f002 fb84 	bl	80031f8 <__errno>
 8000af0:	4603      	mov	r3, r0
 8000af2:	220c      	movs	r2, #12
 8000af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	e009      	b.n	8000b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <_sbrk+0x64>)
 8000b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20004000 	.word	0x20004000
 8000b1c:	00000400 	.word	0x00000400
 8000b20:	20000188 	.word	0x20000188
 8000b24:	200001a0 	.word	0x200001a0

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b84 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b50:	f7ff ffea 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	; (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f002 fb43 	bl	8003204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7e:	f7ff fcb3 	bl	80004e8 <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b84:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b90:	08003bcc 	.word	0x08003bcc
  ldr r2, =_sbss
 8000b94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b98:	200001a0 	.word	0x200001a0

08000b9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_Init+0x28>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_Init+0x28>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f94f 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fe44 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f967 	bl	8000ebe <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f92f 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	2000018c 	.word	0x2000018c

08000c54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000018c 	.word	0x2000018c

08000c6c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff ffee 	bl	8000c54 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffde 	bl	8000c54 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff3e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff31 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	e14e      	b.n	8001186 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2101      	movs	r1, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8140 	beq.w	8001180 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d005      	beq.n	8000f18 <HAL_GPIO_Init+0x40>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d130      	bne.n	8000f7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	f003 0201 	and.w	r2, r3, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d017      	beq.n	8000fb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d123      	bne.n	800100a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	691a      	ldr	r2, [r3, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	6939      	ldr	r1, [r7, #16]
 8001006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0203 	and.w	r2, r3, #3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 809a 	beq.w	8001180 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104c:	4b55      	ldr	r3, [pc, #340]	; (80011a4 <HAL_GPIO_Init+0x2cc>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a54      	ldr	r2, [pc, #336]	; (80011a4 <HAL_GPIO_Init+0x2cc>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b52      	ldr	r3, [pc, #328]	; (80011a4 <HAL_GPIO_Init+0x2cc>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001064:	4a50      	ldr	r2, [pc, #320]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800108e:	d013      	beq.n	80010b8 <HAL_GPIO_Init+0x1e0>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a46      	ldr	r2, [pc, #280]	; (80011ac <HAL_GPIO_Init+0x2d4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d00d      	beq.n	80010b4 <HAL_GPIO_Init+0x1dc>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a45      	ldr	r2, [pc, #276]	; (80011b0 <HAL_GPIO_Init+0x2d8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d007      	beq.n	80010b0 <HAL_GPIO_Init+0x1d8>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a44      	ldr	r2, [pc, #272]	; (80011b4 <HAL_GPIO_Init+0x2dc>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d101      	bne.n	80010ac <HAL_GPIO_Init+0x1d4>
 80010a8:	2303      	movs	r3, #3
 80010aa:	e006      	b.n	80010ba <HAL_GPIO_Init+0x1e2>
 80010ac:	2305      	movs	r3, #5
 80010ae:	e004      	b.n	80010ba <HAL_GPIO_Init+0x1e2>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_Init+0x1e2>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_GPIO_Init+0x1e2>
 80010b8:	2300      	movs	r3, #0
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	f002 0203 	and.w	r2, r2, #3
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	4093      	lsls	r3, r2
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ca:	4937      	ldr	r1, [pc, #220]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d8:	4b37      	ldr	r3, [pc, #220]	; (80011b8 <HAL_GPIO_Init+0x2e0>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010fc:	4a2e      	ldr	r2, [pc, #184]	; (80011b8 <HAL_GPIO_Init+0x2e0>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <HAL_GPIO_Init+0x2e0>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001126:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <HAL_GPIO_Init+0x2e0>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_GPIO_Init+0x2e0>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001150:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <HAL_GPIO_Init+0x2e0>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_GPIO_Init+0x2e0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <HAL_GPIO_Init+0x2e0>)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa22 f303 	lsr.w	r3, r2, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	f47f aea9 	bne.w	8000ee8 <HAL_GPIO_Init+0x10>
  }
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000
 80011ac:	48000400 	.word	0x48000400
 80011b0:	48000800 	.word	0x48000800
 80011b4:	48000c00 	.word	0x48000c00
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d006      	beq.n	80011e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f979 	bl	80004d2 <HAL_GPIO_EXTI_Callback>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e08d      	b.n	800131a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d106      	bne.n	8001218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fb3c 	bl	8000890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2224      	movs	r2, #36	; 0x24
 800121c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800123c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800124c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d107      	bne.n	8001266 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	e006      	b.n	8001274 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001272:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d108      	bne.n	800128e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	e007      	b.n	800129e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800129c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691a      	ldr	r2, [r3, #16]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69d9      	ldr	r1, [r3, #28]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2220      	movs	r2, #32
 8001306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	461a      	mov	r2, r3
 8001330:	460b      	mov	r3, r1
 8001332:	817b      	strh	r3, [r7, #10]
 8001334:	4613      	mov	r3, r2
 8001336:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b20      	cmp	r3, #32
 8001342:	f040 80fd 	bne.w	8001540 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_I2C_Master_Transmit+0x30>
 8001350:	2302      	movs	r3, #2
 8001352:	e0f6      	b.n	8001542 <HAL_I2C_Master_Transmit+0x21e>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800135c:	f7ff fc7a 	bl	8000c54 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2319      	movs	r3, #25
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 f914 	bl	800159c <I2C_WaitOnFlagUntilTimeout>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e0e1      	b.n	8001542 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2221      	movs	r2, #33	; 0x21
 8001382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2210      	movs	r2, #16
 800138a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	893a      	ldrh	r2, [r7, #8]
 800139e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	2bff      	cmp	r3, #255	; 0xff
 80013ae:	d906      	bls.n	80013be <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	22ff      	movs	r2, #255	; 0xff
 80013b4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80013b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e007      	b.n	80013ce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80013c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d024      	beq.n	8001420 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fe:	3b01      	subs	r3, #1
 8001400:	b29a      	uxth	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140a:	b2db      	uxtb	r3, r3
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	8979      	ldrh	r1, [r7, #10]
 8001412:	4b4e      	ldr	r3, [pc, #312]	; (800154c <HAL_I2C_Master_Transmit+0x228>)
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 fa83 	bl	8001924 <I2C_TransferConfig>
 800141e:	e066      	b.n	80014ee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001424:	b2da      	uxtb	r2, r3
 8001426:	8979      	ldrh	r1, [r7, #10]
 8001428:	4b48      	ldr	r3, [pc, #288]	; (800154c <HAL_I2C_Master_Transmit+0x228>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 fa78 	bl	8001924 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001434:	e05b      	b.n	80014ee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	6a39      	ldr	r1, [r7, #32]
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 f907 	bl	800164e <I2C_WaitOnTXISFlagUntilTimeout>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e07b      	b.n	8001542 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001464:	b29b      	uxth	r3, r3
 8001466:	3b01      	subs	r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001472:	3b01      	subs	r3, #1
 8001474:	b29a      	uxth	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147e:	b29b      	uxth	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d034      	beq.n	80014ee <HAL_I2C_Master_Transmit+0x1ca>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001488:	2b00      	cmp	r3, #0
 800148a:	d130      	bne.n	80014ee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2200      	movs	r2, #0
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 f880 	bl	800159c <I2C_WaitOnFlagUntilTimeout>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e04d      	b.n	8001542 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	2bff      	cmp	r3, #255	; 0xff
 80014ae:	d90e      	bls.n	80014ce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	22ff      	movs	r2, #255	; 0xff
 80014b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	8979      	ldrh	r1, [r7, #10]
 80014be:	2300      	movs	r3, #0
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 fa2c 	bl	8001924 <I2C_TransferConfig>
 80014cc:	e00f      	b.n	80014ee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	8979      	ldrh	r1, [r7, #10]
 80014e0:	2300      	movs	r3, #0
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fa1b 	bl	8001924 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d19e      	bne.n	8001436 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	6a39      	ldr	r1, [r7, #32]
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 f8ed 	bl	80016dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e01a      	b.n	8001542 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2220      	movs	r2, #32
 8001512:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6859      	ldr	r1, [r3, #4]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_I2C_Master_Transmit+0x22c>)
 8001520:	400b      	ands	r3, r1
 8001522:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2220      	movs	r2, #32
 8001528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	e000      	b.n	8001542 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001540:	2302      	movs	r3, #2
  }
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	80002000 	.word	0x80002000
 8001550:	fe00e800 	.word	0xfe00e800

08001554 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b02      	cmp	r3, #2
 8001568:	d103      	bne.n	8001572 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b01      	cmp	r3, #1
 800157e:	d007      	beq.n	8001590 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	619a      	str	r2, [r3, #24]
  }
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015ac:	e03b      	b.n	8001626 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	6839      	ldr	r1, [r7, #0]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 f8d6 	bl	8001764 <I2C_IsErrorOccurred>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e041      	b.n	8001646 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d02d      	beq.n	8001626 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ca:	f7ff fb43 	bl	8000c54 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d302      	bcc.n	80015e0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d122      	bne.n	8001626 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	4013      	ands	r3, r2
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	bf0c      	ite	eq
 80015f0:	2301      	moveq	r3, #1
 80015f2:	2300      	movne	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d113      	bne.n	8001626 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f043 0220 	orr.w	r2, r3, #32
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699a      	ldr	r2, [r3, #24]
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4013      	ands	r3, r2
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	429a      	cmp	r2, r3
 8001634:	bf0c      	ite	eq
 8001636:	2301      	moveq	r3, #1
 8001638:	2300      	movne	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	429a      	cmp	r2, r3
 8001642:	d0b4      	beq.n	80015ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800165a:	e033      	b.n	80016c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f87f 	bl	8001764 <I2C_IsErrorOccurred>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e031      	b.n	80016d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001676:	d025      	beq.n	80016c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001678:	f7ff faec 	bl	8000c54 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	429a      	cmp	r2, r3
 8001686:	d302      	bcc.n	800168e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d11a      	bne.n	80016c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b02      	cmp	r3, #2
 800169a:	d013      	beq.n	80016c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f043 0220 	orr.w	r2, r3, #32
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2220      	movs	r2, #32
 80016ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e007      	b.n	80016d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d1c4      	bne.n	800165c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016e8:	e02f      	b.n	800174a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f838 	bl	8001764 <I2C_IsErrorOccurred>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e02d      	b.n	800175a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016fe:	f7ff faa9 	bl	8000c54 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	429a      	cmp	r2, r3
 800170c:	d302      	bcc.n	8001714 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d11a      	bne.n	800174a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 0320 	and.w	r3, r3, #32
 800171e:	2b20      	cmp	r3, #32
 8001720:	d013      	beq.n	800174a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f043 0220 	orr.w	r2, r3, #32
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2220      	movs	r2, #32
 8001732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e007      	b.n	800175a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	2b20      	cmp	r3, #32
 8001756:	d1c8      	bne.n	80016ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b00      	cmp	r3, #0
 800178e:	d068      	beq.n	8001862 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2210      	movs	r2, #16
 8001796:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001798:	e049      	b.n	800182e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a0:	d045      	beq.n	800182e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017a2:	f7ff fa57 	bl	8000c54 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d302      	bcc.n	80017b8 <I2C_IsErrorOccurred+0x54>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d13a      	bne.n	800182e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80017ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017da:	d121      	bne.n	8001820 <I2C_IsErrorOccurred+0xbc>
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e2:	d01d      	beq.n	8001820 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80017e4:	7cfb      	ldrb	r3, [r7, #19]
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	d01a      	beq.n	8001820 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80017fa:	f7ff fa2b 	bl	8000c54 <HAL_GetTick>
 80017fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001800:	e00e      	b.n	8001820 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001802:	f7ff fa27 	bl	8000c54 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b19      	cmp	r3, #25
 800180e:	d907      	bls.n	8001820 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	f043 0320 	orr.w	r3, r3, #32
 8001816:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800181e:	e006      	b.n	800182e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	2b20      	cmp	r3, #32
 800182c:	d1e9      	bne.n	8001802 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b20      	cmp	r3, #32
 800183a:	d003      	beq.n	8001844 <I2C_IsErrorOccurred+0xe0>
 800183c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0aa      	beq.n	800179a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001848:	2b00      	cmp	r3, #0
 800184a:	d103      	bne.n	8001854 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2220      	movs	r2, #32
 8001852:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00b      	beq.n	800188c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001884:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00b      	beq.n	80018d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80018d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01c      	beq.n	8001912 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f7ff fe3b 	bl	8001554 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <I2C_IsErrorOccurred+0x1bc>)
 80018ea:	400b      	ands	r3, r1
 80018ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2220      	movs	r2, #32
 80018fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001916:	4618      	mov	r0, r3
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	fe00e800 	.word	0xfe00e800

08001924 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	817b      	strh	r3, [r7, #10]
 8001932:	4613      	mov	r3, r2
 8001934:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001936:	897b      	ldrh	r3, [r7, #10]
 8001938:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800193c:	7a7b      	ldrb	r3, [r7, #9]
 800193e:	041b      	lsls	r3, r3, #16
 8001940:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001944:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	4313      	orrs	r3, r2
 800194e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001952:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	0d5b      	lsrs	r3, r3, #21
 800195e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <I2C_TransferConfig+0x60>)
 8001964:	430b      	orrs	r3, r1
 8001966:	43db      	mvns	r3, r3
 8001968:	ea02 0103 	and.w	r1, r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	430a      	orrs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001976:	bf00      	nop
 8001978:	371c      	adds	r7, #28
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	03ff63ff 	.word	0x03ff63ff

08001988 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b20      	cmp	r3, #32
 800199c:	d138      	bne.n	8001a10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e032      	b.n	8001a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2224      	movs	r2, #36	; 0x24
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6819      	ldr	r1, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e000      	b.n	8001a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a10:	2302      	movs	r3, #2
  }
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	d139      	bne.n	8001aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e033      	b.n	8001aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2224      	movs	r2, #36	; 0x24
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f001 b823 	b.w	8002b24 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 817d 	beq.w	8001dee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001af4:	4bbc      	ldr	r3, [pc, #752]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d00c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b00:	4bb9      	ldr	r3, [pc, #740]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d15c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x10e>
 8001b0c:	4bb6      	ldr	r3, [pc, #728]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d155      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x10e>
 8001b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b2e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	095b      	lsrs	r3, r3, #5
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_OscConfig+0x94>
 8001b46:	4ba8      	ldr	r3, [pc, #672]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e015      	b.n	8001b78 <HAL_RCC_OscConfig+0xc0>
 8001b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b50:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b64:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b68:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b74:	4b9c      	ldr	r3, [pc, #624]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b7c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b80:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b84:	fa92 f2a2 	rbit	r2, r2
 8001b88:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b8c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b90:	fab2 f282 	clz	r2, r2
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f042 0220 	orr.w	r2, r2, #32
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	f002 021f 	and.w	r2, r2, #31
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 811f 	beq.w	8001dec <HAL_RCC_OscConfig+0x334>
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 8116 	bne.w	8001dec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f000 bfaf 	b.w	8002b24 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12e>
 8001bd8:	4b83      	ldr	r3, [pc, #524]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a82      	ldr	r2, [pc, #520]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e036      	b.n	8001c54 <HAL_RCC_OscConfig+0x19c>
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x158>
 8001bf6:	4b7c      	ldr	r3, [pc, #496]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7b      	ldr	r2, [pc, #492]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b79      	ldr	r3, [pc, #484]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a78      	ldr	r2, [pc, #480]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e021      	b.n	8001c54 <HAL_RCC_OscConfig+0x19c>
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x184>
 8001c22:	4b71      	ldr	r3, [pc, #452]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a70      	ldr	r2, [pc, #448]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b6e      	ldr	r3, [pc, #440]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a6d      	ldr	r2, [pc, #436]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e00b      	b.n	8001c54 <HAL_RCC_OscConfig+0x19c>
 8001c3c:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a69      	ldr	r2, [pc, #420]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a66      	ldr	r2, [pc, #408]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c52:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c54:	4b64      	ldr	r3, [pc, #400]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	f023 020f 	bic.w	r2, r3, #15
 8001c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	495f      	ldr	r1, [pc, #380]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d059      	beq.n	8001d32 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7fe ffe9 	bl	8000c54 <HAL_GetTick>
 8001c82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c88:	f7fe ffe4 	bl	8000c54 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	; 0x64
 8001c96:	d902      	bls.n	8001c9e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f000 bf43 	b.w	8002b24 <HAL_RCC_OscConfig+0x106c>
 8001c9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001cb2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x218>
 8001cca:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	e015      	b.n	8001cfc <HAL_RCC_OscConfig+0x244>
 8001cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d00:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d04:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d08:	fa92 f2a2 	rbit	r2, r2
 8001d0c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d10:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d14:	fab2 f282 	clz	r2, r2
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f042 0220 	orr.w	r2, r2, #32
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f002 021f 	and.w	r2, r2, #31
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0ab      	beq.n	8001c88 <HAL_RCC_OscConfig+0x1d0>
 8001d30:	e05d      	b.n	8001dee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7fe ff8f 	bl	8000c54 <HAL_GetTick>
 8001d36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7fe ff8a 	bl	8000c54 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d902      	bls.n	8001d52 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	f000 bee9 	b.w	8002b24 <HAL_RCC_OscConfig+0x106c>
 8001d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d56:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2cc>
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	e015      	b.n	8001db0 <HAL_RCC_OscConfig+0x2f8>
 8001d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d88:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d9c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001da0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_RCC_OscConfig+0x330>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001db4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001db8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001dbc:	fa92 f2a2 	rbit	r2, r2
 8001dc0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001dc4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f042 0220 	orr.w	r2, r2, #32
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f002 021f 	and.w	r2, r2, #31
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f202 	lsl.w	r2, r1, r2
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ab      	bne.n	8001d3c <HAL_RCC_OscConfig+0x284>
 8001de4:	e003      	b.n	8001dee <HAL_RCC_OscConfig+0x336>
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 817d 	beq.w	80020fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e04:	4ba6      	ldr	r3, [pc, #664]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00b      	beq.n	8001e28 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e10:	4ba3      	ldr	r3, [pc, #652]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d172      	bne.n	8001f02 <HAL_RCC_OscConfig+0x44a>
 8001e1c:	4ba0      	ldr	r3, [pc, #640]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d16c      	bne.n	8001f02 <HAL_RCC_OscConfig+0x44a>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	095b      	lsrs	r3, r3, #5
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d102      	bne.n	8001e58 <HAL_RCC_OscConfig+0x3a0>
 8001e52:	4b93      	ldr	r3, [pc, #588]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	e013      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c8>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e7c:	4b88      	ldr	r3, [pc, #544]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2202      	movs	r2, #2
 8001e82:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e86:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e92:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e96:	fab2 f282 	clz	r2, r2
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f042 0220 	orr.w	r2, r2, #32
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f002 021f 	and.w	r2, r2, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x410>
 8001eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d002      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f000 be2e 	b.w	8002b24 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec8:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	21f8      	movs	r1, #248	; 0xf8
 8001ede:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ee6:	fa91 f1a1 	rbit	r1, r1
 8001eea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001eee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ef2:	fab1 f181 	clz	r1, r1
 8001ef6:	b2c9      	uxtb	r1, r1
 8001ef8:	408b      	lsls	r3, r1
 8001efa:	4969      	ldr	r1, [pc, #420]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f00:	e0fd      	b.n	80020fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8088 	beq.w	8002024 <HAL_RCC_OscConfig+0x56c>
 8001f14:	2301      	movs	r3, #1
 8001f16:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f26:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7fe fe88 	bl	8000c54 <HAL_GetTick>
 8001f44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7fe fe83 	bl	8000c54 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d902      	bls.n	8001f60 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	f000 bde2 	b.w	8002b24 <HAL_RCC_OscConfig+0x106c>
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_OscConfig+0x4d8>
 8001f8a:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e013      	b.n	8001fb8 <HAL_RCC_OscConfig+0x500>
 8001f90:	2302      	movs	r3, #2
 8001f92:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fa8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001fbe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fc2:	fa92 f2a2 	rbit	r2, r2
 8001fc6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001fca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001fce:	fab2 f282 	clz	r2, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f042 0220 	orr.w	r2, r2, #32
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f002 021f 	and.w	r2, r2, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0af      	beq.n	8001f4a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	21f8      	movs	r1, #248	; 0xf8
 8002000:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002008:	fa91 f1a1 	rbit	r1, r1
 800200c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002010:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002014:	fab1 f181 	clz	r1, r1
 8002018:	b2c9      	uxtb	r1, r1
 800201a:	408b      	lsls	r3, r1
 800201c:	4920      	ldr	r1, [pc, #128]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
 8002022:	e06c      	b.n	80020fe <HAL_RCC_OscConfig+0x646>
 8002024:	2301      	movs	r3, #1
 8002026:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002036:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	461a      	mov	r2, r3
 800204c:	2300      	movs	r3, #0
 800204e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7fe fe00 	bl	8000c54 <HAL_GetTick>
 8002054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205a:	f7fe fdfb 	bl	8000c54 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d902      	bls.n	8002070 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	f000 bd5a 	b.w	8002b24 <HAL_RCC_OscConfig+0x106c>
 8002070:	2302      	movs	r3, #2
 8002072:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d104      	bne.n	80020a4 <HAL_RCC_OscConfig+0x5ec>
 800209a:	4b01      	ldr	r3, [pc, #4]	; (80020a0 <HAL_RCC_OscConfig+0x5e8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e015      	b.n	80020cc <HAL_RCC_OscConfig+0x614>
 80020a0:	40021000 	.word	0x40021000
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020c8:	4bc8      	ldr	r3, [pc, #800]	; (80023ec <HAL_RCC_OscConfig+0x934>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2202      	movs	r2, #2
 80020ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80020d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020d6:	fa92 f2a2 	rbit	r2, r2
 80020da:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80020de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ad      	bne.n	800205a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8110 	beq.w	8002334 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d079      	beq.n	8002218 <HAL_RCC_OscConfig+0x760>
 8002124:	2301      	movs	r3, #1
 8002126:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	4bab      	ldr	r3, [pc, #684]	; (80023f0 <HAL_RCC_OscConfig+0x938>)
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	461a      	mov	r2, r3
 800214a:	2301      	movs	r3, #1
 800214c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214e:	f7fe fd81 	bl	8000c54 <HAL_GetTick>
 8002152:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002158:	f7fe fd7c 	bl	8000c54 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d902      	bls.n	800216e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	f000 bcdb 	b.w	8002b24 <HAL_RCC_OscConfig+0x106c>
 800216e:	2302      	movs	r3, #2
 8002170:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002188:	2202      	movs	r2, #2
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	fa93 f2a3 	rbit	r2, r3
 800219a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021ac:	2202      	movs	r2, #2
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c8:	4b88      	ldr	r3, [pc, #544]	; (80023ec <HAL_RCC_OscConfig+0x934>)
 80021ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021d4:	2102      	movs	r1, #2
 80021d6:	6019      	str	r1, [r3, #0]
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	fa93 f1a3 	rbit	r1, r3
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021ee:	6019      	str	r1, [r3, #0]
  return result;
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0a0      	beq.n	8002158 <HAL_RCC_OscConfig+0x6a0>
 8002216:	e08d      	b.n	8002334 <HAL_RCC_OscConfig+0x87c>
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800223a:	601a      	str	r2, [r3, #0]
  return result;
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002244:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x938>)
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	461a      	mov	r2, r3
 8002256:	2300      	movs	r3, #0
 8002258:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7fe fcfb 	bl	8000c54 <HAL_GetTick>
 800225e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002262:	e00a      	b.n	800227a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002264:	f7fe fcf6 	bl	8000c54 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d902      	bls.n	800227a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	f000 bc55 	b.w	8002b24 <HAL_RCC_OscConfig+0x106c>
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002282:	2202      	movs	r2, #2
 8002284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022a6:	2202      	movs	r2, #2
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	fa93 f2a3 	rbit	r2, r3
 80022b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022ca:	2202      	movs	r2, #2
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f2a3 	rbit	r2, r3
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80022e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <HAL_RCC_OscConfig+0x934>)
 80022e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022f2:	2102      	movs	r1, #2
 80022f4:	6019      	str	r1, [r3, #0]
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	fa93 f1a3 	rbit	r1, r3
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800230c:	6019      	str	r1, [r3, #0]
  return result;
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d197      	bne.n	8002264 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 81a1 	beq.w	800268c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002350:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_RCC_OscConfig+0x934>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d116      	bne.n	800238a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b23      	ldr	r3, [pc, #140]	; (80023ec <HAL_RCC_OscConfig+0x934>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	4a22      	ldr	r2, [pc, #136]	; (80023ec <HAL_RCC_OscConfig+0x934>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002366:	61d3      	str	r3, [r2, #28]
 8002368:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_RCC_OscConfig+0x934>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002382:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002384:	2301      	movs	r3, #1
 8002386:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_RCC_OscConfig+0x93c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11a      	bne.n	80023cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_RCC_OscConfig+0x93c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <HAL_RCC_OscConfig+0x93c>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7fe fc57 	bl	8000c54 <HAL_GetTick>
 80023a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	e009      	b.n	80023c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7fe fc52 	bl	8000c54 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e3b1      	b.n	8002b24 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_RCC_OscConfig+0x93c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ef      	beq.n	80023ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d10d      	bne.n	80023f8 <HAL_RCC_OscConfig+0x940>
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_RCC_OscConfig+0x934>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a02      	ldr	r2, [pc, #8]	; (80023ec <HAL_RCC_OscConfig+0x934>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	e03c      	b.n	8002464 <HAL_RCC_OscConfig+0x9ac>
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	10908120 	.word	0x10908120
 80023f4:	40007000 	.word	0x40007000
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x96a>
 8002408:	4bc1      	ldr	r3, [pc, #772]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4ac0      	ldr	r2, [pc, #768]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	4bbe      	ldr	r3, [pc, #760]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4abd      	ldr	r2, [pc, #756]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 800241a:	f023 0304 	bic.w	r3, r3, #4
 800241e:	6213      	str	r3, [r2, #32]
 8002420:	e020      	b.n	8002464 <HAL_RCC_OscConfig+0x9ac>
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x994>
 8002432:	4bb7      	ldr	r3, [pc, #732]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4ab6      	ldr	r2, [pc, #728]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6213      	str	r3, [r2, #32]
 800243e:	4bb4      	ldr	r3, [pc, #720]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4ab3      	ldr	r2, [pc, #716]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6213      	str	r3, [r2, #32]
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0x9ac>
 800244c:	4bb0      	ldr	r3, [pc, #704]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4aaf      	ldr	r2, [pc, #700]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	6213      	str	r3, [r2, #32]
 8002458:	4bad      	ldr	r3, [pc, #692]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4aac      	ldr	r2, [pc, #688]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 800245e:	f023 0304 	bic.w	r3, r3, #4
 8002462:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8081 	beq.w	8002578 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe fbed 	bl	8000c54 <HAL_GetTick>
 800247a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7fe fbe8 	bl	8000c54 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e345      	b.n	8002b24 <HAL_RCC_OscConfig+0x106c>
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024a0:	2202      	movs	r2, #2
 80024a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024c4:	2202      	movs	r2, #2
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024de:	601a      	str	r2, [r3, #0]
  return result;
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_OscConfig+0xa4c>
 80024fe:	4b84      	ldr	r3, [pc, #528]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	e013      	b.n	800252c <HAL_RCC_OscConfig+0xa74>
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800250c:	2202      	movs	r2, #2
 800250e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002514:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	fa93 f2a3 	rbit	r2, r3
 800251e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002522:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	4b79      	ldr	r3, [pc, #484]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002530:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002534:	2102      	movs	r1, #2
 8002536:	6011      	str	r1, [r2, #0]
 8002538:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800253c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	fa92 f1a2 	rbit	r1, r2
 8002546:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800254a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800254e:	6011      	str	r1, [r2, #0]
  return result;
 8002550:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002554:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	fab2 f282 	clz	r2, r2
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f002 021f 	and.w	r2, r2, #31
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d084      	beq.n	8002480 <HAL_RCC_OscConfig+0x9c8>
 8002576:	e07f      	b.n	8002678 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7fe fb6c 	bl	8000c54 <HAL_GetTick>
 800257c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	e00b      	b.n	800259a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fb67 	bl	8000c54 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e2c4      	b.n	8002b24 <HAL_RCC_OscConfig+0x106c>
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025a2:	2202      	movs	r2, #2
 80025a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	fa93 f2a3 	rbit	r2, r3
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025c6:	2202      	movs	r2, #2
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	fa93 f2a3 	rbit	r2, r3
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025e0:	601a      	str	r2, [r3, #0]
  return result;
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d102      	bne.n	8002606 <HAL_RCC_OscConfig+0xb4e>
 8002600:	4b43      	ldr	r3, [pc, #268]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	e013      	b.n	800262e <HAL_RCC_OscConfig+0xb76>
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800260e:	2202      	movs	r2, #2
 8002610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	fa93 f2a3 	rbit	r2, r3
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002632:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002636:	2102      	movs	r1, #2
 8002638:	6011      	str	r1, [r2, #0]
 800263a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800263e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	fa92 f1a2 	rbit	r1, r2
 8002648:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800264c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002650:	6011      	str	r1, [r2, #0]
  return result;
 8002652:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002656:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	fab2 f282 	clz	r2, r2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f002 021f 	and.w	r2, r2, #31
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d184      	bne.n	8002582 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002678:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002680:	4b23      	ldr	r3, [pc, #140]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	4a22      	ldr	r2, [pc, #136]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 8002686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002690:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 8242 	beq.w	8002b22 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_RCC_OscConfig+0xc58>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	f000 8213 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	f040 8162 	bne.w	8002982 <HAL_RCC_OscConfig+0xeca>
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	fa93 f2a3 	rbit	r2, r3
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026e2:	601a      	str	r2, [r3, #0]
  return result;
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	461a      	mov	r2, r3
 8002700:	2300      	movs	r3, #0
 8002702:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe faa6 	bl	8000c54 <HAL_GetTick>
 8002708:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270c:	e00c      	b.n	8002728 <HAL_RCC_OscConfig+0xc70>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe fa9e 	bl	8000c54 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e1fd      	b.n	8002b24 <HAL_RCC_OscConfig+0x106c>
 8002728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	fa93 f2a3 	rbit	r2, r3
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800274c:	601a      	str	r2, [r3, #0]
  return result;
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002756:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d102      	bne.n	8002772 <HAL_RCC_OscConfig+0xcba>
 800276c:	4bb0      	ldr	r3, [pc, #704]	; (8002a30 <HAL_RCC_OscConfig+0xf78>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	e027      	b.n	80027c2 <HAL_RCC_OscConfig+0xd0a>
 8002772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002776:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800277a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800277e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	fa93 f2a3 	rbit	r2, r3
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fa93 f2a3 	rbit	r2, r3
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	4b9c      	ldr	r3, [pc, #624]	; (8002a30 <HAL_RCC_OscConfig+0xf78>)
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027ce:	6011      	str	r1, [r2, #0]
 80027d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	fa92 f1a2 	rbit	r1, r2
 80027de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027e6:	6011      	str	r1, [r2, #0]
  return result;
 80027e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	fab2 f282 	clz	r2, r2
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	f002 021f 	and.w	r2, r2, #31
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f202 	lsl.w	r2, r1, r2
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d182      	bne.n	8002714 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280e:	4b88      	ldr	r3, [pc, #544]	; (8002a30 <HAL_RCC_OscConfig+0xf78>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	430b      	orrs	r3, r1
 8002830:	497f      	ldr	r1, [pc, #508]	; (8002a30 <HAL_RCC_OscConfig+0xf78>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
 8002836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800283e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fa93 f2a3 	rbit	r2, r3
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800285a:	601a      	str	r2, [r3, #0]
  return result;
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002864:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	461a      	mov	r2, r3
 8002878:	2301      	movs	r3, #1
 800287a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe f9ea 	bl	8000c54 <HAL_GetTick>
 8002880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002884:	e009      	b.n	800289a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe f9e5 	bl	8000c54 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e144      	b.n	8002b24 <HAL_RCC_OscConfig+0x106c>
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	fa93 f2a3 	rbit	r2, r3
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028be:	601a      	str	r2, [r3, #0]
  return result;
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_OscConfig+0xe2c>
 80028de:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <HAL_RCC_OscConfig+0xf78>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	e027      	b.n	8002934 <HAL_RCC_OscConfig+0xe7c>
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	fa93 f2a3 	rbit	r2, r3
 8002900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002904:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002912:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f2a3 	rbit	r2, r3
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <HAL_RCC_OscConfig+0xf78>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002938:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800293c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002940:	6011      	str	r1, [r2, #0]
 8002942:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002946:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	fa92 f1a2 	rbit	r1, r2
 8002950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002954:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002958:	6011      	str	r1, [r2, #0]
  return result;
 800295a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800295e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	fab2 f282 	clz	r2, r2
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f042 0220 	orr.w	r2, r2, #32
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	f002 021f 	and.w	r2, r2, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f202 	lsl.w	r2, r1, r2
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d082      	beq.n	8002886 <HAL_RCC_OscConfig+0xdce>
 8002980:	e0cf      	b.n	8002b22 <HAL_RCC_OscConfig+0x106a>
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800298a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800298e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029a6:	601a      	str	r2, [r3, #0]
  return result;
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	461a      	mov	r2, r3
 80029c4:	2300      	movs	r3, #0
 80029c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe f944 	bl	8000c54 <HAL_GetTick>
 80029cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d0:	e009      	b.n	80029e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d2:	f7fe f93f 	bl	8000c54 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e09e      	b.n	8002b24 <HAL_RCC_OscConfig+0x106c>
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a0a:	601a      	str	r2, [r3, #0]
  return result;
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d104      	bne.n	8002a34 <HAL_RCC_OscConfig+0xf7c>
 8002a2a:	4b01      	ldr	r3, [pc, #4]	; (8002a30 <HAL_RCC_OscConfig+0xf78>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	e029      	b.n	8002a84 <HAL_RCC_OscConfig+0xfcc>
 8002a30:	40021000 	.word	0x40021000
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a46:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	fa93 f2a3 	rbit	r2, r3
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	fa93 f2a3 	rbit	r2, r3
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_RCC_OscConfig+0x1078>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a88:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a90:	6011      	str	r1, [r2, #0]
 8002a92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a96:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	fa92 f1a2 	rbit	r1, r2
 8002aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002aa8:	6011      	str	r1, [r2, #0]
  return result;
 8002aaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	fab2 f282 	clz	r2, r2
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	f042 0220 	orr.w	r2, r2, #32
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	f002 021f 	and.w	r2, r2, #31
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d180      	bne.n	80029d2 <HAL_RCC_OscConfig+0xf1a>
 8002ad0:	e027      	b.n	8002b22 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e01e      	b.n	8002b24 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_RCC_OscConfig+0x1078>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002af2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d10b      	bne.n	8002b1e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000

08002b34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b09e      	sub	sp, #120	; 0x78
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e162      	b.n	8002e12 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b90      	ldr	r3, [pc, #576]	; (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d910      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b8d      	ldr	r3, [pc, #564]	; (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 0207 	bic.w	r2, r3, #7
 8002b62:	498b      	ldr	r1, [pc, #556]	; (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b89      	ldr	r3, [pc, #548]	; (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e14a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b82      	ldr	r3, [pc, #520]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	497f      	ldr	r1, [pc, #508]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80dc 	beq.w	8002d60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d13c      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xf6>
 8002bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HAL_RCC_ClockConfig+0xa6>
 8002bd4:	4b6f      	ldr	r3, [pc, #444]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	e00f      	b.n	8002bfa <HAL_RCC_ClockConfig+0xc6>
 8002bda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	667b      	str	r3, [r7, #100]	; 0x64
 8002be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bec:	663b      	str	r3, [r7, #96]	; 0x60
 8002bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bf6:	4b67      	ldr	r3, [pc, #412]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bfe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c02:	fa92 f2a2 	rbit	r2, r2
 8002c06:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c0a:	fab2 f282 	clz	r2, r2
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	f042 0220 	orr.w	r2, r2, #32
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f002 021f 	and.w	r2, r2, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d17b      	bne.n	8002d1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0f3      	b.n	8002e12 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d13c      	bne.n	8002cac <HAL_RCC_ClockConfig+0x178>
 8002c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	095b      	lsrs	r3, r3, #5
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d102      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x128>
 8002c56:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	e00f      	b.n	8002c7c <HAL_RCC_ClockConfig+0x148>
 8002c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	647b      	str	r3, [r7, #68]	; 0x44
 8002c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c78:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c80:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c84:	fa92 f2a2 	rbit	r2, r2
 8002c88:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c8c:	fab2 f282 	clz	r2, r2
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	f042 0220 	orr.w	r2, r2, #32
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f002 021f 	and.w	r2, r2, #31
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d13a      	bne.n	8002d1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0b2      	b.n	8002e12 <HAL_RCC_ClockConfig+0x2de>
 8002cac:	2302      	movs	r3, #2
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x1a0>
 8002cce:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	e00d      	b.n	8002cf0 <HAL_RCC_ClockConfig+0x1bc>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	623b      	str	r3, [r7, #32]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	61ba      	str	r2, [r7, #24]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	fa92 f2a2 	rbit	r2, r2
 8002cfa:	617a      	str	r2, [r7, #20]
  return result;
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	fab2 f282 	clz	r2, r2
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f042 0220 	orr.w	r2, r2, #32
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f002 021f 	and.w	r2, r2, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e079      	b.n	8002e12 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f023 0203 	bic.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	491a      	ldr	r1, [pc, #104]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d30:	f7fd ff90 	bl	8000c54 <HAL_GetTick>
 8002d34:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f7fd ff8c 	bl	8000c54 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e061      	b.n	8002e12 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 020c 	and.w	r2, r3, #12
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1eb      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d214      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 0207 	bic.w	r2, r3, #7
 8002d76:	4906      	ldr	r1, [pc, #24]	; (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e040      	b.n	8002e12 <HAL_RCC_ClockConfig+0x2de>
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_RCC_ClockConfig+0x2e8>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	491a      	ldr	r1, [pc, #104]	; (8002e1c <HAL_RCC_ClockConfig+0x2e8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HAL_RCC_ClockConfig+0x2e8>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4912      	ldr	r1, [pc, #72]	; (8002e1c <HAL_RCC_ClockConfig+0x2e8>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dd6:	f000 f829 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002dda:	4601      	mov	r1, r0
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <HAL_RCC_ClockConfig+0x2e8>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de4:	22f0      	movs	r2, #240	; 0xf0
 8002de6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	fa92 f2a2 	rbit	r2, r2
 8002dee:	60fa      	str	r2, [r7, #12]
  return result;
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	fab2 f282 	clz	r2, r2
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	40d3      	lsrs	r3, r2
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x2ec>)
 8002dfc:	5cd3      	ldrb	r3, [r2, r3]
 8002dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_RCC_ClockConfig+0x2f0>)
 8002e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCC_ClockConfig+0x2f4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fede 	bl	8000bcc <HAL_InitTick>
  
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3778      	adds	r7, #120	; 0x78
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	08003b60 	.word	0x08003b60
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d002      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x30>
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d003      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x36>
 8002e5a:	e026      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5e:	613b      	str	r3, [r7, #16]
      break;
 8002e60:	e026      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	0c9b      	lsrs	r3, r3, #18
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e6c:	5cd3      	ldrb	r3, [r2, r3]
 8002e6e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	4a14      	ldr	r2, [pc, #80]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e88:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e004      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	613b      	str	r3, [r7, #16]
      break;
 8002ea8:	e002      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eac:	613b      	str	r3, [r7, #16]
      break;
 8002eae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb0:	693b      	ldr	r3, [r7, #16]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	007a1200 	.word	0x007a1200
 8002ec8:	08003b70 	.word	0x08003b70
 8002ecc:	08003b80 	.word	0x08003b80
 8002ed0:	003d0900 	.word	0x003d0900

08002ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b092      	sub	sp, #72	; 0x48
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80d4 	beq.w	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10e      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f04:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4a4a      	ldr	r2, [pc, #296]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	61d3      	str	r3, [r2, #28]
 8002f10:	4b48      	ldr	r3, [pc, #288]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	4b45      	ldr	r3, [pc, #276]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d118      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2e:	4b42      	ldr	r3, [pc, #264]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a41      	ldr	r2, [pc, #260]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3a:	f7fd fe8b 	bl	8000c54 <HAL_GetTick>
 8002f3e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	e008      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7fd fe87 	bl	8000c54 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b64      	cmp	r3, #100	; 0x64
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e14b      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f60:	4b34      	ldr	r3, [pc, #208]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f68:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 8084 	beq.w	800307a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d07c      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f80:	4b2c      	ldr	r3, [pc, #176]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2301      	movs	r3, #1
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d04b      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fd fe37 	bl	8000c54 <HAL_GetTick>
 8002fe6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fd fe33 	bl	8000c54 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0f5      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003000:	2302      	movs	r3, #2
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	2302      	movs	r3, #2
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	61fb      	str	r3, [r7, #28]
  return result;
 8003018:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d108      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800302e:	4b01      	ldr	r3, [pc, #4]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	e00d      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003034:	40021000 	.word	0x40021000
 8003038:	40007000 	.word	0x40007000
 800303c:	10908100 	.word	0x10908100
 8003040:	2302      	movs	r3, #2
 8003042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	4b69      	ldr	r3, [pc, #420]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	2202      	movs	r2, #2
 8003052:	613a      	str	r2, [r7, #16]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	fa92 f2a2 	rbit	r2, r2
 800305a:	60fa      	str	r2, [r7, #12]
  return result;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	fab2 f282 	clz	r2, r2
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f002 021f 	and.w	r2, r2, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0b7      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800307a:	4b5e      	ldr	r3, [pc, #376]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	495b      	ldr	r1, [pc, #364]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003088:	4313      	orrs	r3, r2
 800308a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800308c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003090:	2b01      	cmp	r3, #1
 8003092:	d105      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003094:	4b57      	ldr	r3, [pc, #348]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	4a56      	ldr	r2, [pc, #344]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800309a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ac:	4b51      	ldr	r3, [pc, #324]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f023 0203 	bic.w	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	494e      	ldr	r1, [pc, #312]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ca:	4b4a      	ldr	r3, [pc, #296]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	f023 0210 	bic.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4947      	ldr	r1, [pc, #284]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80030e8:	4b42      	ldr	r3, [pc, #264]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	493f      	ldr	r1, [pc, #252]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003106:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f023 0220 	bic.w	r2, r3, #32
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	4938      	ldr	r1, [pc, #224]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003114:	4313      	orrs	r3, r2
 8003116:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003124:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	4930      	ldr	r1, [pc, #192]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003132:	4313      	orrs	r3, r2
 8003134:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003142:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4929      	ldr	r1, [pc, #164]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	4921      	ldr	r1, [pc, #132]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800316e:	4313      	orrs	r3, r2
 8003170:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	491a      	ldr	r1, [pc, #104]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800318c:	4313      	orrs	r3, r2
 800318e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800319c:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	4912      	ldr	r1, [pc, #72]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	490b      	ldr	r1, [pc, #44]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3748      	adds	r7, #72	; 0x48
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000

080031f8 <__errno>:
 80031f8:	4b01      	ldr	r3, [pc, #4]	; (8003200 <__errno+0x8>)
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	2000000c 	.word	0x2000000c

08003204 <__libc_init_array>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	4d0d      	ldr	r5, [pc, #52]	; (800323c <__libc_init_array+0x38>)
 8003208:	4c0d      	ldr	r4, [pc, #52]	; (8003240 <__libc_init_array+0x3c>)
 800320a:	1b64      	subs	r4, r4, r5
 800320c:	10a4      	asrs	r4, r4, #2
 800320e:	2600      	movs	r6, #0
 8003210:	42a6      	cmp	r6, r4
 8003212:	d109      	bne.n	8003228 <__libc_init_array+0x24>
 8003214:	4d0b      	ldr	r5, [pc, #44]	; (8003244 <__libc_init_array+0x40>)
 8003216:	4c0c      	ldr	r4, [pc, #48]	; (8003248 <__libc_init_array+0x44>)
 8003218:	f000 fc8e 	bl	8003b38 <_init>
 800321c:	1b64      	subs	r4, r4, r5
 800321e:	10a4      	asrs	r4, r4, #2
 8003220:	2600      	movs	r6, #0
 8003222:	42a6      	cmp	r6, r4
 8003224:	d105      	bne.n	8003232 <__libc_init_array+0x2e>
 8003226:	bd70      	pop	{r4, r5, r6, pc}
 8003228:	f855 3b04 	ldr.w	r3, [r5], #4
 800322c:	4798      	blx	r3
 800322e:	3601      	adds	r6, #1
 8003230:	e7ee      	b.n	8003210 <__libc_init_array+0xc>
 8003232:	f855 3b04 	ldr.w	r3, [r5], #4
 8003236:	4798      	blx	r3
 8003238:	3601      	adds	r6, #1
 800323a:	e7f2      	b.n	8003222 <__libc_init_array+0x1e>
 800323c:	08003bc4 	.word	0x08003bc4
 8003240:	08003bc4 	.word	0x08003bc4
 8003244:	08003bc4 	.word	0x08003bc4
 8003248:	08003bc8 	.word	0x08003bc8

0800324c <memset>:
 800324c:	4402      	add	r2, r0
 800324e:	4603      	mov	r3, r0
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <memset+0xa>
 8003254:	4770      	bx	lr
 8003256:	f803 1b01 	strb.w	r1, [r3], #1
 800325a:	e7f9      	b.n	8003250 <memset+0x4>

0800325c <siprintf>:
 800325c:	b40e      	push	{r1, r2, r3}
 800325e:	b500      	push	{lr}
 8003260:	b09c      	sub	sp, #112	; 0x70
 8003262:	ab1d      	add	r3, sp, #116	; 0x74
 8003264:	9002      	str	r0, [sp, #8]
 8003266:	9006      	str	r0, [sp, #24]
 8003268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800326c:	4809      	ldr	r0, [pc, #36]	; (8003294 <siprintf+0x38>)
 800326e:	9107      	str	r1, [sp, #28]
 8003270:	9104      	str	r1, [sp, #16]
 8003272:	4909      	ldr	r1, [pc, #36]	; (8003298 <siprintf+0x3c>)
 8003274:	f853 2b04 	ldr.w	r2, [r3], #4
 8003278:	9105      	str	r1, [sp, #20]
 800327a:	6800      	ldr	r0, [r0, #0]
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	a902      	add	r1, sp, #8
 8003280:	f000 f868 	bl	8003354 <_svfiprintf_r>
 8003284:	9b02      	ldr	r3, [sp, #8]
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	b01c      	add	sp, #112	; 0x70
 800328c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003290:	b003      	add	sp, #12
 8003292:	4770      	bx	lr
 8003294:	2000000c 	.word	0x2000000c
 8003298:	ffff0208 	.word	0xffff0208

0800329c <__ssputs_r>:
 800329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a0:	688e      	ldr	r6, [r1, #8]
 80032a2:	429e      	cmp	r6, r3
 80032a4:	4682      	mov	sl, r0
 80032a6:	460c      	mov	r4, r1
 80032a8:	4690      	mov	r8, r2
 80032aa:	461f      	mov	r7, r3
 80032ac:	d838      	bhi.n	8003320 <__ssputs_r+0x84>
 80032ae:	898a      	ldrh	r2, [r1, #12]
 80032b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032b4:	d032      	beq.n	800331c <__ssputs_r+0x80>
 80032b6:	6825      	ldr	r5, [r4, #0]
 80032b8:	6909      	ldr	r1, [r1, #16]
 80032ba:	eba5 0901 	sub.w	r9, r5, r1
 80032be:	6965      	ldr	r5, [r4, #20]
 80032c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032c8:	3301      	adds	r3, #1
 80032ca:	444b      	add	r3, r9
 80032cc:	106d      	asrs	r5, r5, #1
 80032ce:	429d      	cmp	r5, r3
 80032d0:	bf38      	it	cc
 80032d2:	461d      	movcc	r5, r3
 80032d4:	0553      	lsls	r3, r2, #21
 80032d6:	d531      	bpl.n	800333c <__ssputs_r+0xa0>
 80032d8:	4629      	mov	r1, r5
 80032da:	f000 fb63 	bl	80039a4 <_malloc_r>
 80032de:	4606      	mov	r6, r0
 80032e0:	b950      	cbnz	r0, 80032f8 <__ssputs_r+0x5c>
 80032e2:	230c      	movs	r3, #12
 80032e4:	f8ca 3000 	str.w	r3, [sl]
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ee:	81a3      	strh	r3, [r4, #12]
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f8:	6921      	ldr	r1, [r4, #16]
 80032fa:	464a      	mov	r2, r9
 80032fc:	f000 fabe 	bl	800387c <memcpy>
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330a:	81a3      	strh	r3, [r4, #12]
 800330c:	6126      	str	r6, [r4, #16]
 800330e:	6165      	str	r5, [r4, #20]
 8003310:	444e      	add	r6, r9
 8003312:	eba5 0509 	sub.w	r5, r5, r9
 8003316:	6026      	str	r6, [r4, #0]
 8003318:	60a5      	str	r5, [r4, #8]
 800331a:	463e      	mov	r6, r7
 800331c:	42be      	cmp	r6, r7
 800331e:	d900      	bls.n	8003322 <__ssputs_r+0x86>
 8003320:	463e      	mov	r6, r7
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	4632      	mov	r2, r6
 8003326:	4641      	mov	r1, r8
 8003328:	f000 fab6 	bl	8003898 <memmove>
 800332c:	68a3      	ldr	r3, [r4, #8]
 800332e:	1b9b      	subs	r3, r3, r6
 8003330:	60a3      	str	r3, [r4, #8]
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	4433      	add	r3, r6
 8003336:	6023      	str	r3, [r4, #0]
 8003338:	2000      	movs	r0, #0
 800333a:	e7db      	b.n	80032f4 <__ssputs_r+0x58>
 800333c:	462a      	mov	r2, r5
 800333e:	f000 fba5 	bl	8003a8c <_realloc_r>
 8003342:	4606      	mov	r6, r0
 8003344:	2800      	cmp	r0, #0
 8003346:	d1e1      	bne.n	800330c <__ssputs_r+0x70>
 8003348:	6921      	ldr	r1, [r4, #16]
 800334a:	4650      	mov	r0, sl
 800334c:	f000 fabe 	bl	80038cc <_free_r>
 8003350:	e7c7      	b.n	80032e2 <__ssputs_r+0x46>
	...

08003354 <_svfiprintf_r>:
 8003354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003358:	4698      	mov	r8, r3
 800335a:	898b      	ldrh	r3, [r1, #12]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	b09d      	sub	sp, #116	; 0x74
 8003360:	4607      	mov	r7, r0
 8003362:	460d      	mov	r5, r1
 8003364:	4614      	mov	r4, r2
 8003366:	d50e      	bpl.n	8003386 <_svfiprintf_r+0x32>
 8003368:	690b      	ldr	r3, [r1, #16]
 800336a:	b963      	cbnz	r3, 8003386 <_svfiprintf_r+0x32>
 800336c:	2140      	movs	r1, #64	; 0x40
 800336e:	f000 fb19 	bl	80039a4 <_malloc_r>
 8003372:	6028      	str	r0, [r5, #0]
 8003374:	6128      	str	r0, [r5, #16]
 8003376:	b920      	cbnz	r0, 8003382 <_svfiprintf_r+0x2e>
 8003378:	230c      	movs	r3, #12
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
 8003380:	e0d1      	b.n	8003526 <_svfiprintf_r+0x1d2>
 8003382:	2340      	movs	r3, #64	; 0x40
 8003384:	616b      	str	r3, [r5, #20]
 8003386:	2300      	movs	r3, #0
 8003388:	9309      	str	r3, [sp, #36]	; 0x24
 800338a:	2320      	movs	r3, #32
 800338c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003390:	f8cd 800c 	str.w	r8, [sp, #12]
 8003394:	2330      	movs	r3, #48	; 0x30
 8003396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003540 <_svfiprintf_r+0x1ec>
 800339a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800339e:	f04f 0901 	mov.w	r9, #1
 80033a2:	4623      	mov	r3, r4
 80033a4:	469a      	mov	sl, r3
 80033a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033aa:	b10a      	cbz	r2, 80033b0 <_svfiprintf_r+0x5c>
 80033ac:	2a25      	cmp	r2, #37	; 0x25
 80033ae:	d1f9      	bne.n	80033a4 <_svfiprintf_r+0x50>
 80033b0:	ebba 0b04 	subs.w	fp, sl, r4
 80033b4:	d00b      	beq.n	80033ce <_svfiprintf_r+0x7a>
 80033b6:	465b      	mov	r3, fp
 80033b8:	4622      	mov	r2, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	4638      	mov	r0, r7
 80033be:	f7ff ff6d 	bl	800329c <__ssputs_r>
 80033c2:	3001      	adds	r0, #1
 80033c4:	f000 80aa 	beq.w	800351c <_svfiprintf_r+0x1c8>
 80033c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033ca:	445a      	add	r2, fp
 80033cc:	9209      	str	r2, [sp, #36]	; 0x24
 80033ce:	f89a 3000 	ldrb.w	r3, [sl]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80a2 	beq.w	800351c <_svfiprintf_r+0x1c8>
 80033d8:	2300      	movs	r3, #0
 80033da:	f04f 32ff 	mov.w	r2, #4294967295
 80033de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033e2:	f10a 0a01 	add.w	sl, sl, #1
 80033e6:	9304      	str	r3, [sp, #16]
 80033e8:	9307      	str	r3, [sp, #28]
 80033ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033ee:	931a      	str	r3, [sp, #104]	; 0x68
 80033f0:	4654      	mov	r4, sl
 80033f2:	2205      	movs	r2, #5
 80033f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f8:	4851      	ldr	r0, [pc, #324]	; (8003540 <_svfiprintf_r+0x1ec>)
 80033fa:	f7fc fee9 	bl	80001d0 <memchr>
 80033fe:	9a04      	ldr	r2, [sp, #16]
 8003400:	b9d8      	cbnz	r0, 800343a <_svfiprintf_r+0xe6>
 8003402:	06d0      	lsls	r0, r2, #27
 8003404:	bf44      	itt	mi
 8003406:	2320      	movmi	r3, #32
 8003408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800340c:	0711      	lsls	r1, r2, #28
 800340e:	bf44      	itt	mi
 8003410:	232b      	movmi	r3, #43	; 0x2b
 8003412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003416:	f89a 3000 	ldrb.w	r3, [sl]
 800341a:	2b2a      	cmp	r3, #42	; 0x2a
 800341c:	d015      	beq.n	800344a <_svfiprintf_r+0xf6>
 800341e:	9a07      	ldr	r2, [sp, #28]
 8003420:	4654      	mov	r4, sl
 8003422:	2000      	movs	r0, #0
 8003424:	f04f 0c0a 	mov.w	ip, #10
 8003428:	4621      	mov	r1, r4
 800342a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800342e:	3b30      	subs	r3, #48	; 0x30
 8003430:	2b09      	cmp	r3, #9
 8003432:	d94e      	bls.n	80034d2 <_svfiprintf_r+0x17e>
 8003434:	b1b0      	cbz	r0, 8003464 <_svfiprintf_r+0x110>
 8003436:	9207      	str	r2, [sp, #28]
 8003438:	e014      	b.n	8003464 <_svfiprintf_r+0x110>
 800343a:	eba0 0308 	sub.w	r3, r0, r8
 800343e:	fa09 f303 	lsl.w	r3, r9, r3
 8003442:	4313      	orrs	r3, r2
 8003444:	9304      	str	r3, [sp, #16]
 8003446:	46a2      	mov	sl, r4
 8003448:	e7d2      	b.n	80033f0 <_svfiprintf_r+0x9c>
 800344a:	9b03      	ldr	r3, [sp, #12]
 800344c:	1d19      	adds	r1, r3, #4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	9103      	str	r1, [sp, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	bfbb      	ittet	lt
 8003456:	425b      	neglt	r3, r3
 8003458:	f042 0202 	orrlt.w	r2, r2, #2
 800345c:	9307      	strge	r3, [sp, #28]
 800345e:	9307      	strlt	r3, [sp, #28]
 8003460:	bfb8      	it	lt
 8003462:	9204      	strlt	r2, [sp, #16]
 8003464:	7823      	ldrb	r3, [r4, #0]
 8003466:	2b2e      	cmp	r3, #46	; 0x2e
 8003468:	d10c      	bne.n	8003484 <_svfiprintf_r+0x130>
 800346a:	7863      	ldrb	r3, [r4, #1]
 800346c:	2b2a      	cmp	r3, #42	; 0x2a
 800346e:	d135      	bne.n	80034dc <_svfiprintf_r+0x188>
 8003470:	9b03      	ldr	r3, [sp, #12]
 8003472:	1d1a      	adds	r2, r3, #4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	9203      	str	r2, [sp, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	bfb8      	it	lt
 800347c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003480:	3402      	adds	r4, #2
 8003482:	9305      	str	r3, [sp, #20]
 8003484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003550 <_svfiprintf_r+0x1fc>
 8003488:	7821      	ldrb	r1, [r4, #0]
 800348a:	2203      	movs	r2, #3
 800348c:	4650      	mov	r0, sl
 800348e:	f7fc fe9f 	bl	80001d0 <memchr>
 8003492:	b140      	cbz	r0, 80034a6 <_svfiprintf_r+0x152>
 8003494:	2340      	movs	r3, #64	; 0x40
 8003496:	eba0 000a 	sub.w	r0, r0, sl
 800349a:	fa03 f000 	lsl.w	r0, r3, r0
 800349e:	9b04      	ldr	r3, [sp, #16]
 80034a0:	4303      	orrs	r3, r0
 80034a2:	3401      	adds	r4, #1
 80034a4:	9304      	str	r3, [sp, #16]
 80034a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034aa:	4826      	ldr	r0, [pc, #152]	; (8003544 <_svfiprintf_r+0x1f0>)
 80034ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034b0:	2206      	movs	r2, #6
 80034b2:	f7fc fe8d 	bl	80001d0 <memchr>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d038      	beq.n	800352c <_svfiprintf_r+0x1d8>
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <_svfiprintf_r+0x1f4>)
 80034bc:	bb1b      	cbnz	r3, 8003506 <_svfiprintf_r+0x1b2>
 80034be:	9b03      	ldr	r3, [sp, #12]
 80034c0:	3307      	adds	r3, #7
 80034c2:	f023 0307 	bic.w	r3, r3, #7
 80034c6:	3308      	adds	r3, #8
 80034c8:	9303      	str	r3, [sp, #12]
 80034ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034cc:	4433      	add	r3, r6
 80034ce:	9309      	str	r3, [sp, #36]	; 0x24
 80034d0:	e767      	b.n	80033a2 <_svfiprintf_r+0x4e>
 80034d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034d6:	460c      	mov	r4, r1
 80034d8:	2001      	movs	r0, #1
 80034da:	e7a5      	b.n	8003428 <_svfiprintf_r+0xd4>
 80034dc:	2300      	movs	r3, #0
 80034de:	3401      	adds	r4, #1
 80034e0:	9305      	str	r3, [sp, #20]
 80034e2:	4619      	mov	r1, r3
 80034e4:	f04f 0c0a 	mov.w	ip, #10
 80034e8:	4620      	mov	r0, r4
 80034ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ee:	3a30      	subs	r2, #48	; 0x30
 80034f0:	2a09      	cmp	r2, #9
 80034f2:	d903      	bls.n	80034fc <_svfiprintf_r+0x1a8>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0c5      	beq.n	8003484 <_svfiprintf_r+0x130>
 80034f8:	9105      	str	r1, [sp, #20]
 80034fa:	e7c3      	b.n	8003484 <_svfiprintf_r+0x130>
 80034fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003500:	4604      	mov	r4, r0
 8003502:	2301      	movs	r3, #1
 8003504:	e7f0      	b.n	80034e8 <_svfiprintf_r+0x194>
 8003506:	ab03      	add	r3, sp, #12
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	462a      	mov	r2, r5
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <_svfiprintf_r+0x1f8>)
 800350e:	a904      	add	r1, sp, #16
 8003510:	4638      	mov	r0, r7
 8003512:	f3af 8000 	nop.w
 8003516:	1c42      	adds	r2, r0, #1
 8003518:	4606      	mov	r6, r0
 800351a:	d1d6      	bne.n	80034ca <_svfiprintf_r+0x176>
 800351c:	89ab      	ldrh	r3, [r5, #12]
 800351e:	065b      	lsls	r3, r3, #25
 8003520:	f53f af2c 	bmi.w	800337c <_svfiprintf_r+0x28>
 8003524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003526:	b01d      	add	sp, #116	; 0x74
 8003528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800352c:	ab03      	add	r3, sp, #12
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	462a      	mov	r2, r5
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <_svfiprintf_r+0x1f8>)
 8003534:	a904      	add	r1, sp, #16
 8003536:	4638      	mov	r0, r7
 8003538:	f000 f87a 	bl	8003630 <_printf_i>
 800353c:	e7eb      	b.n	8003516 <_svfiprintf_r+0x1c2>
 800353e:	bf00      	nop
 8003540:	08003b90 	.word	0x08003b90
 8003544:	08003b9a 	.word	0x08003b9a
 8003548:	00000000 	.word	0x00000000
 800354c:	0800329d 	.word	0x0800329d
 8003550:	08003b96 	.word	0x08003b96

08003554 <_printf_common>:
 8003554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003558:	4616      	mov	r6, r2
 800355a:	4699      	mov	r9, r3
 800355c:	688a      	ldr	r2, [r1, #8]
 800355e:	690b      	ldr	r3, [r1, #16]
 8003560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003564:	4293      	cmp	r3, r2
 8003566:	bfb8      	it	lt
 8003568:	4613      	movlt	r3, r2
 800356a:	6033      	str	r3, [r6, #0]
 800356c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003570:	4607      	mov	r7, r0
 8003572:	460c      	mov	r4, r1
 8003574:	b10a      	cbz	r2, 800357a <_printf_common+0x26>
 8003576:	3301      	adds	r3, #1
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	0699      	lsls	r1, r3, #26
 800357e:	bf42      	ittt	mi
 8003580:	6833      	ldrmi	r3, [r6, #0]
 8003582:	3302      	addmi	r3, #2
 8003584:	6033      	strmi	r3, [r6, #0]
 8003586:	6825      	ldr	r5, [r4, #0]
 8003588:	f015 0506 	ands.w	r5, r5, #6
 800358c:	d106      	bne.n	800359c <_printf_common+0x48>
 800358e:	f104 0a19 	add.w	sl, r4, #25
 8003592:	68e3      	ldr	r3, [r4, #12]
 8003594:	6832      	ldr	r2, [r6, #0]
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	42ab      	cmp	r3, r5
 800359a:	dc26      	bgt.n	80035ea <_printf_common+0x96>
 800359c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035a0:	1e13      	subs	r3, r2, #0
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	bf18      	it	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	0692      	lsls	r2, r2, #26
 80035aa:	d42b      	bmi.n	8003604 <_printf_common+0xb0>
 80035ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035b0:	4649      	mov	r1, r9
 80035b2:	4638      	mov	r0, r7
 80035b4:	47c0      	blx	r8
 80035b6:	3001      	adds	r0, #1
 80035b8:	d01e      	beq.n	80035f8 <_printf_common+0xa4>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	68e5      	ldr	r5, [r4, #12]
 80035be:	6832      	ldr	r2, [r6, #0]
 80035c0:	f003 0306 	and.w	r3, r3, #6
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	bf08      	it	eq
 80035c8:	1aad      	subeq	r5, r5, r2
 80035ca:	68a3      	ldr	r3, [r4, #8]
 80035cc:	6922      	ldr	r2, [r4, #16]
 80035ce:	bf0c      	ite	eq
 80035d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035d4:	2500      	movne	r5, #0
 80035d6:	4293      	cmp	r3, r2
 80035d8:	bfc4      	itt	gt
 80035da:	1a9b      	subgt	r3, r3, r2
 80035dc:	18ed      	addgt	r5, r5, r3
 80035de:	2600      	movs	r6, #0
 80035e0:	341a      	adds	r4, #26
 80035e2:	42b5      	cmp	r5, r6
 80035e4:	d11a      	bne.n	800361c <_printf_common+0xc8>
 80035e6:	2000      	movs	r0, #0
 80035e8:	e008      	b.n	80035fc <_printf_common+0xa8>
 80035ea:	2301      	movs	r3, #1
 80035ec:	4652      	mov	r2, sl
 80035ee:	4649      	mov	r1, r9
 80035f0:	4638      	mov	r0, r7
 80035f2:	47c0      	blx	r8
 80035f4:	3001      	adds	r0, #1
 80035f6:	d103      	bne.n	8003600 <_printf_common+0xac>
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003600:	3501      	adds	r5, #1
 8003602:	e7c6      	b.n	8003592 <_printf_common+0x3e>
 8003604:	18e1      	adds	r1, r4, r3
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	2030      	movs	r0, #48	; 0x30
 800360a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800360e:	4422      	add	r2, r4
 8003610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003618:	3302      	adds	r3, #2
 800361a:	e7c7      	b.n	80035ac <_printf_common+0x58>
 800361c:	2301      	movs	r3, #1
 800361e:	4622      	mov	r2, r4
 8003620:	4649      	mov	r1, r9
 8003622:	4638      	mov	r0, r7
 8003624:	47c0      	blx	r8
 8003626:	3001      	adds	r0, #1
 8003628:	d0e6      	beq.n	80035f8 <_printf_common+0xa4>
 800362a:	3601      	adds	r6, #1
 800362c:	e7d9      	b.n	80035e2 <_printf_common+0x8e>
	...

08003630 <_printf_i>:
 8003630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003634:	7e0f      	ldrb	r7, [r1, #24]
 8003636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003638:	2f78      	cmp	r7, #120	; 0x78
 800363a:	4691      	mov	r9, r2
 800363c:	4680      	mov	r8, r0
 800363e:	460c      	mov	r4, r1
 8003640:	469a      	mov	sl, r3
 8003642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003646:	d807      	bhi.n	8003658 <_printf_i+0x28>
 8003648:	2f62      	cmp	r7, #98	; 0x62
 800364a:	d80a      	bhi.n	8003662 <_printf_i+0x32>
 800364c:	2f00      	cmp	r7, #0
 800364e:	f000 80d8 	beq.w	8003802 <_printf_i+0x1d2>
 8003652:	2f58      	cmp	r7, #88	; 0x58
 8003654:	f000 80a3 	beq.w	800379e <_printf_i+0x16e>
 8003658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800365c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003660:	e03a      	b.n	80036d8 <_printf_i+0xa8>
 8003662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003666:	2b15      	cmp	r3, #21
 8003668:	d8f6      	bhi.n	8003658 <_printf_i+0x28>
 800366a:	a101      	add	r1, pc, #4	; (adr r1, 8003670 <_printf_i+0x40>)
 800366c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003670:	080036c9 	.word	0x080036c9
 8003674:	080036dd 	.word	0x080036dd
 8003678:	08003659 	.word	0x08003659
 800367c:	08003659 	.word	0x08003659
 8003680:	08003659 	.word	0x08003659
 8003684:	08003659 	.word	0x08003659
 8003688:	080036dd 	.word	0x080036dd
 800368c:	08003659 	.word	0x08003659
 8003690:	08003659 	.word	0x08003659
 8003694:	08003659 	.word	0x08003659
 8003698:	08003659 	.word	0x08003659
 800369c:	080037e9 	.word	0x080037e9
 80036a0:	0800370d 	.word	0x0800370d
 80036a4:	080037cb 	.word	0x080037cb
 80036a8:	08003659 	.word	0x08003659
 80036ac:	08003659 	.word	0x08003659
 80036b0:	0800380b 	.word	0x0800380b
 80036b4:	08003659 	.word	0x08003659
 80036b8:	0800370d 	.word	0x0800370d
 80036bc:	08003659 	.word	0x08003659
 80036c0:	08003659 	.word	0x08003659
 80036c4:	080037d3 	.word	0x080037d3
 80036c8:	682b      	ldr	r3, [r5, #0]
 80036ca:	1d1a      	adds	r2, r3, #4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	602a      	str	r2, [r5, #0]
 80036d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036d8:	2301      	movs	r3, #1
 80036da:	e0a3      	b.n	8003824 <_printf_i+0x1f4>
 80036dc:	6820      	ldr	r0, [r4, #0]
 80036de:	6829      	ldr	r1, [r5, #0]
 80036e0:	0606      	lsls	r6, r0, #24
 80036e2:	f101 0304 	add.w	r3, r1, #4
 80036e6:	d50a      	bpl.n	80036fe <_printf_i+0xce>
 80036e8:	680e      	ldr	r6, [r1, #0]
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	2e00      	cmp	r6, #0
 80036ee:	da03      	bge.n	80036f8 <_printf_i+0xc8>
 80036f0:	232d      	movs	r3, #45	; 0x2d
 80036f2:	4276      	negs	r6, r6
 80036f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036f8:	485e      	ldr	r0, [pc, #376]	; (8003874 <_printf_i+0x244>)
 80036fa:	230a      	movs	r3, #10
 80036fc:	e019      	b.n	8003732 <_printf_i+0x102>
 80036fe:	680e      	ldr	r6, [r1, #0]
 8003700:	602b      	str	r3, [r5, #0]
 8003702:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003706:	bf18      	it	ne
 8003708:	b236      	sxthne	r6, r6
 800370a:	e7ef      	b.n	80036ec <_printf_i+0xbc>
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	1d19      	adds	r1, r3, #4
 8003712:	6029      	str	r1, [r5, #0]
 8003714:	0601      	lsls	r1, r0, #24
 8003716:	d501      	bpl.n	800371c <_printf_i+0xec>
 8003718:	681e      	ldr	r6, [r3, #0]
 800371a:	e002      	b.n	8003722 <_printf_i+0xf2>
 800371c:	0646      	lsls	r6, r0, #25
 800371e:	d5fb      	bpl.n	8003718 <_printf_i+0xe8>
 8003720:	881e      	ldrh	r6, [r3, #0]
 8003722:	4854      	ldr	r0, [pc, #336]	; (8003874 <_printf_i+0x244>)
 8003724:	2f6f      	cmp	r7, #111	; 0x6f
 8003726:	bf0c      	ite	eq
 8003728:	2308      	moveq	r3, #8
 800372a:	230a      	movne	r3, #10
 800372c:	2100      	movs	r1, #0
 800372e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003732:	6865      	ldr	r5, [r4, #4]
 8003734:	60a5      	str	r5, [r4, #8]
 8003736:	2d00      	cmp	r5, #0
 8003738:	bfa2      	ittt	ge
 800373a:	6821      	ldrge	r1, [r4, #0]
 800373c:	f021 0104 	bicge.w	r1, r1, #4
 8003740:	6021      	strge	r1, [r4, #0]
 8003742:	b90e      	cbnz	r6, 8003748 <_printf_i+0x118>
 8003744:	2d00      	cmp	r5, #0
 8003746:	d04d      	beq.n	80037e4 <_printf_i+0x1b4>
 8003748:	4615      	mov	r5, r2
 800374a:	fbb6 f1f3 	udiv	r1, r6, r3
 800374e:	fb03 6711 	mls	r7, r3, r1, r6
 8003752:	5dc7      	ldrb	r7, [r0, r7]
 8003754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003758:	4637      	mov	r7, r6
 800375a:	42bb      	cmp	r3, r7
 800375c:	460e      	mov	r6, r1
 800375e:	d9f4      	bls.n	800374a <_printf_i+0x11a>
 8003760:	2b08      	cmp	r3, #8
 8003762:	d10b      	bne.n	800377c <_printf_i+0x14c>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	07de      	lsls	r6, r3, #31
 8003768:	d508      	bpl.n	800377c <_printf_i+0x14c>
 800376a:	6923      	ldr	r3, [r4, #16]
 800376c:	6861      	ldr	r1, [r4, #4]
 800376e:	4299      	cmp	r1, r3
 8003770:	bfde      	ittt	le
 8003772:	2330      	movle	r3, #48	; 0x30
 8003774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003778:	f105 35ff 	addle.w	r5, r5, #4294967295
 800377c:	1b52      	subs	r2, r2, r5
 800377e:	6122      	str	r2, [r4, #16]
 8003780:	f8cd a000 	str.w	sl, [sp]
 8003784:	464b      	mov	r3, r9
 8003786:	aa03      	add	r2, sp, #12
 8003788:	4621      	mov	r1, r4
 800378a:	4640      	mov	r0, r8
 800378c:	f7ff fee2 	bl	8003554 <_printf_common>
 8003790:	3001      	adds	r0, #1
 8003792:	d14c      	bne.n	800382e <_printf_i+0x1fe>
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	b004      	add	sp, #16
 800379a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800379e:	4835      	ldr	r0, [pc, #212]	; (8003874 <_printf_i+0x244>)
 80037a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037a4:	6829      	ldr	r1, [r5, #0]
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80037ac:	6029      	str	r1, [r5, #0]
 80037ae:	061d      	lsls	r5, r3, #24
 80037b0:	d514      	bpl.n	80037dc <_printf_i+0x1ac>
 80037b2:	07df      	lsls	r7, r3, #31
 80037b4:	bf44      	itt	mi
 80037b6:	f043 0320 	orrmi.w	r3, r3, #32
 80037ba:	6023      	strmi	r3, [r4, #0]
 80037bc:	b91e      	cbnz	r6, 80037c6 <_printf_i+0x196>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	f023 0320 	bic.w	r3, r3, #32
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	2310      	movs	r3, #16
 80037c8:	e7b0      	b.n	800372c <_printf_i+0xfc>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	f043 0320 	orr.w	r3, r3, #32
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	2378      	movs	r3, #120	; 0x78
 80037d4:	4828      	ldr	r0, [pc, #160]	; (8003878 <_printf_i+0x248>)
 80037d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037da:	e7e3      	b.n	80037a4 <_printf_i+0x174>
 80037dc:	0659      	lsls	r1, r3, #25
 80037de:	bf48      	it	mi
 80037e0:	b2b6      	uxthmi	r6, r6
 80037e2:	e7e6      	b.n	80037b2 <_printf_i+0x182>
 80037e4:	4615      	mov	r5, r2
 80037e6:	e7bb      	b.n	8003760 <_printf_i+0x130>
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	6826      	ldr	r6, [r4, #0]
 80037ec:	6961      	ldr	r1, [r4, #20]
 80037ee:	1d18      	adds	r0, r3, #4
 80037f0:	6028      	str	r0, [r5, #0]
 80037f2:	0635      	lsls	r5, r6, #24
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	d501      	bpl.n	80037fc <_printf_i+0x1cc>
 80037f8:	6019      	str	r1, [r3, #0]
 80037fa:	e002      	b.n	8003802 <_printf_i+0x1d2>
 80037fc:	0670      	lsls	r0, r6, #25
 80037fe:	d5fb      	bpl.n	80037f8 <_printf_i+0x1c8>
 8003800:	8019      	strh	r1, [r3, #0]
 8003802:	2300      	movs	r3, #0
 8003804:	6123      	str	r3, [r4, #16]
 8003806:	4615      	mov	r5, r2
 8003808:	e7ba      	b.n	8003780 <_printf_i+0x150>
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	1d1a      	adds	r2, r3, #4
 800380e:	602a      	str	r2, [r5, #0]
 8003810:	681d      	ldr	r5, [r3, #0]
 8003812:	6862      	ldr	r2, [r4, #4]
 8003814:	2100      	movs	r1, #0
 8003816:	4628      	mov	r0, r5
 8003818:	f7fc fcda 	bl	80001d0 <memchr>
 800381c:	b108      	cbz	r0, 8003822 <_printf_i+0x1f2>
 800381e:	1b40      	subs	r0, r0, r5
 8003820:	6060      	str	r0, [r4, #4]
 8003822:	6863      	ldr	r3, [r4, #4]
 8003824:	6123      	str	r3, [r4, #16]
 8003826:	2300      	movs	r3, #0
 8003828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800382c:	e7a8      	b.n	8003780 <_printf_i+0x150>
 800382e:	6923      	ldr	r3, [r4, #16]
 8003830:	462a      	mov	r2, r5
 8003832:	4649      	mov	r1, r9
 8003834:	4640      	mov	r0, r8
 8003836:	47d0      	blx	sl
 8003838:	3001      	adds	r0, #1
 800383a:	d0ab      	beq.n	8003794 <_printf_i+0x164>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	079b      	lsls	r3, r3, #30
 8003840:	d413      	bmi.n	800386a <_printf_i+0x23a>
 8003842:	68e0      	ldr	r0, [r4, #12]
 8003844:	9b03      	ldr	r3, [sp, #12]
 8003846:	4298      	cmp	r0, r3
 8003848:	bfb8      	it	lt
 800384a:	4618      	movlt	r0, r3
 800384c:	e7a4      	b.n	8003798 <_printf_i+0x168>
 800384e:	2301      	movs	r3, #1
 8003850:	4632      	mov	r2, r6
 8003852:	4649      	mov	r1, r9
 8003854:	4640      	mov	r0, r8
 8003856:	47d0      	blx	sl
 8003858:	3001      	adds	r0, #1
 800385a:	d09b      	beq.n	8003794 <_printf_i+0x164>
 800385c:	3501      	adds	r5, #1
 800385e:	68e3      	ldr	r3, [r4, #12]
 8003860:	9903      	ldr	r1, [sp, #12]
 8003862:	1a5b      	subs	r3, r3, r1
 8003864:	42ab      	cmp	r3, r5
 8003866:	dcf2      	bgt.n	800384e <_printf_i+0x21e>
 8003868:	e7eb      	b.n	8003842 <_printf_i+0x212>
 800386a:	2500      	movs	r5, #0
 800386c:	f104 0619 	add.w	r6, r4, #25
 8003870:	e7f5      	b.n	800385e <_printf_i+0x22e>
 8003872:	bf00      	nop
 8003874:	08003ba1 	.word	0x08003ba1
 8003878:	08003bb2 	.word	0x08003bb2

0800387c <memcpy>:
 800387c:	440a      	add	r2, r1
 800387e:	4291      	cmp	r1, r2
 8003880:	f100 33ff 	add.w	r3, r0, #4294967295
 8003884:	d100      	bne.n	8003888 <memcpy+0xc>
 8003886:	4770      	bx	lr
 8003888:	b510      	push	{r4, lr}
 800388a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800388e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003892:	4291      	cmp	r1, r2
 8003894:	d1f9      	bne.n	800388a <memcpy+0xe>
 8003896:	bd10      	pop	{r4, pc}

08003898 <memmove>:
 8003898:	4288      	cmp	r0, r1
 800389a:	b510      	push	{r4, lr}
 800389c:	eb01 0402 	add.w	r4, r1, r2
 80038a0:	d902      	bls.n	80038a8 <memmove+0x10>
 80038a2:	4284      	cmp	r4, r0
 80038a4:	4623      	mov	r3, r4
 80038a6:	d807      	bhi.n	80038b8 <memmove+0x20>
 80038a8:	1e43      	subs	r3, r0, #1
 80038aa:	42a1      	cmp	r1, r4
 80038ac:	d008      	beq.n	80038c0 <memmove+0x28>
 80038ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038b6:	e7f8      	b.n	80038aa <memmove+0x12>
 80038b8:	4402      	add	r2, r0
 80038ba:	4601      	mov	r1, r0
 80038bc:	428a      	cmp	r2, r1
 80038be:	d100      	bne.n	80038c2 <memmove+0x2a>
 80038c0:	bd10      	pop	{r4, pc}
 80038c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038ca:	e7f7      	b.n	80038bc <memmove+0x24>

080038cc <_free_r>:
 80038cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ce:	2900      	cmp	r1, #0
 80038d0:	d044      	beq.n	800395c <_free_r+0x90>
 80038d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d6:	9001      	str	r0, [sp, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f1a1 0404 	sub.w	r4, r1, #4
 80038de:	bfb8      	it	lt
 80038e0:	18e4      	addlt	r4, r4, r3
 80038e2:	f000 f913 	bl	8003b0c <__malloc_lock>
 80038e6:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <_free_r+0x94>)
 80038e8:	9801      	ldr	r0, [sp, #4]
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	b933      	cbnz	r3, 80038fc <_free_r+0x30>
 80038ee:	6063      	str	r3, [r4, #4]
 80038f0:	6014      	str	r4, [r2, #0]
 80038f2:	b003      	add	sp, #12
 80038f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038f8:	f000 b90e 	b.w	8003b18 <__malloc_unlock>
 80038fc:	42a3      	cmp	r3, r4
 80038fe:	d908      	bls.n	8003912 <_free_r+0x46>
 8003900:	6825      	ldr	r5, [r4, #0]
 8003902:	1961      	adds	r1, r4, r5
 8003904:	428b      	cmp	r3, r1
 8003906:	bf01      	itttt	eq
 8003908:	6819      	ldreq	r1, [r3, #0]
 800390a:	685b      	ldreq	r3, [r3, #4]
 800390c:	1949      	addeq	r1, r1, r5
 800390e:	6021      	streq	r1, [r4, #0]
 8003910:	e7ed      	b.n	80038ee <_free_r+0x22>
 8003912:	461a      	mov	r2, r3
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	b10b      	cbz	r3, 800391c <_free_r+0x50>
 8003918:	42a3      	cmp	r3, r4
 800391a:	d9fa      	bls.n	8003912 <_free_r+0x46>
 800391c:	6811      	ldr	r1, [r2, #0]
 800391e:	1855      	adds	r5, r2, r1
 8003920:	42a5      	cmp	r5, r4
 8003922:	d10b      	bne.n	800393c <_free_r+0x70>
 8003924:	6824      	ldr	r4, [r4, #0]
 8003926:	4421      	add	r1, r4
 8003928:	1854      	adds	r4, r2, r1
 800392a:	42a3      	cmp	r3, r4
 800392c:	6011      	str	r1, [r2, #0]
 800392e:	d1e0      	bne.n	80038f2 <_free_r+0x26>
 8003930:	681c      	ldr	r4, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	6053      	str	r3, [r2, #4]
 8003936:	4421      	add	r1, r4
 8003938:	6011      	str	r1, [r2, #0]
 800393a:	e7da      	b.n	80038f2 <_free_r+0x26>
 800393c:	d902      	bls.n	8003944 <_free_r+0x78>
 800393e:	230c      	movs	r3, #12
 8003940:	6003      	str	r3, [r0, #0]
 8003942:	e7d6      	b.n	80038f2 <_free_r+0x26>
 8003944:	6825      	ldr	r5, [r4, #0]
 8003946:	1961      	adds	r1, r4, r5
 8003948:	428b      	cmp	r3, r1
 800394a:	bf04      	itt	eq
 800394c:	6819      	ldreq	r1, [r3, #0]
 800394e:	685b      	ldreq	r3, [r3, #4]
 8003950:	6063      	str	r3, [r4, #4]
 8003952:	bf04      	itt	eq
 8003954:	1949      	addeq	r1, r1, r5
 8003956:	6021      	streq	r1, [r4, #0]
 8003958:	6054      	str	r4, [r2, #4]
 800395a:	e7ca      	b.n	80038f2 <_free_r+0x26>
 800395c:	b003      	add	sp, #12
 800395e:	bd30      	pop	{r4, r5, pc}
 8003960:	20000190 	.word	0x20000190

08003964 <sbrk_aligned>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	4e0e      	ldr	r6, [pc, #56]	; (80039a0 <sbrk_aligned+0x3c>)
 8003968:	460c      	mov	r4, r1
 800396a:	6831      	ldr	r1, [r6, #0]
 800396c:	4605      	mov	r5, r0
 800396e:	b911      	cbnz	r1, 8003976 <sbrk_aligned+0x12>
 8003970:	f000 f8bc 	bl	8003aec <_sbrk_r>
 8003974:	6030      	str	r0, [r6, #0]
 8003976:	4621      	mov	r1, r4
 8003978:	4628      	mov	r0, r5
 800397a:	f000 f8b7 	bl	8003aec <_sbrk_r>
 800397e:	1c43      	adds	r3, r0, #1
 8003980:	d00a      	beq.n	8003998 <sbrk_aligned+0x34>
 8003982:	1cc4      	adds	r4, r0, #3
 8003984:	f024 0403 	bic.w	r4, r4, #3
 8003988:	42a0      	cmp	r0, r4
 800398a:	d007      	beq.n	800399c <sbrk_aligned+0x38>
 800398c:	1a21      	subs	r1, r4, r0
 800398e:	4628      	mov	r0, r5
 8003990:	f000 f8ac 	bl	8003aec <_sbrk_r>
 8003994:	3001      	adds	r0, #1
 8003996:	d101      	bne.n	800399c <sbrk_aligned+0x38>
 8003998:	f04f 34ff 	mov.w	r4, #4294967295
 800399c:	4620      	mov	r0, r4
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	20000194 	.word	0x20000194

080039a4 <_malloc_r>:
 80039a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a8:	1ccd      	adds	r5, r1, #3
 80039aa:	f025 0503 	bic.w	r5, r5, #3
 80039ae:	3508      	adds	r5, #8
 80039b0:	2d0c      	cmp	r5, #12
 80039b2:	bf38      	it	cc
 80039b4:	250c      	movcc	r5, #12
 80039b6:	2d00      	cmp	r5, #0
 80039b8:	4607      	mov	r7, r0
 80039ba:	db01      	blt.n	80039c0 <_malloc_r+0x1c>
 80039bc:	42a9      	cmp	r1, r5
 80039be:	d905      	bls.n	80039cc <_malloc_r+0x28>
 80039c0:	230c      	movs	r3, #12
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	2600      	movs	r6, #0
 80039c6:	4630      	mov	r0, r6
 80039c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039cc:	4e2e      	ldr	r6, [pc, #184]	; (8003a88 <_malloc_r+0xe4>)
 80039ce:	f000 f89d 	bl	8003b0c <__malloc_lock>
 80039d2:	6833      	ldr	r3, [r6, #0]
 80039d4:	461c      	mov	r4, r3
 80039d6:	bb34      	cbnz	r4, 8003a26 <_malloc_r+0x82>
 80039d8:	4629      	mov	r1, r5
 80039da:	4638      	mov	r0, r7
 80039dc:	f7ff ffc2 	bl	8003964 <sbrk_aligned>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	4604      	mov	r4, r0
 80039e4:	d14d      	bne.n	8003a82 <_malloc_r+0xde>
 80039e6:	6834      	ldr	r4, [r6, #0]
 80039e8:	4626      	mov	r6, r4
 80039ea:	2e00      	cmp	r6, #0
 80039ec:	d140      	bne.n	8003a70 <_malloc_r+0xcc>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	4631      	mov	r1, r6
 80039f2:	4638      	mov	r0, r7
 80039f4:	eb04 0803 	add.w	r8, r4, r3
 80039f8:	f000 f878 	bl	8003aec <_sbrk_r>
 80039fc:	4580      	cmp	r8, r0
 80039fe:	d13a      	bne.n	8003a76 <_malloc_r+0xd2>
 8003a00:	6821      	ldr	r1, [r4, #0]
 8003a02:	3503      	adds	r5, #3
 8003a04:	1a6d      	subs	r5, r5, r1
 8003a06:	f025 0503 	bic.w	r5, r5, #3
 8003a0a:	3508      	adds	r5, #8
 8003a0c:	2d0c      	cmp	r5, #12
 8003a0e:	bf38      	it	cc
 8003a10:	250c      	movcc	r5, #12
 8003a12:	4629      	mov	r1, r5
 8003a14:	4638      	mov	r0, r7
 8003a16:	f7ff ffa5 	bl	8003964 <sbrk_aligned>
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d02b      	beq.n	8003a76 <_malloc_r+0xd2>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	442b      	add	r3, r5
 8003a22:	6023      	str	r3, [r4, #0]
 8003a24:	e00e      	b.n	8003a44 <_malloc_r+0xa0>
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	1b52      	subs	r2, r2, r5
 8003a2a:	d41e      	bmi.n	8003a6a <_malloc_r+0xc6>
 8003a2c:	2a0b      	cmp	r2, #11
 8003a2e:	d916      	bls.n	8003a5e <_malloc_r+0xba>
 8003a30:	1961      	adds	r1, r4, r5
 8003a32:	42a3      	cmp	r3, r4
 8003a34:	6025      	str	r5, [r4, #0]
 8003a36:	bf18      	it	ne
 8003a38:	6059      	strne	r1, [r3, #4]
 8003a3a:	6863      	ldr	r3, [r4, #4]
 8003a3c:	bf08      	it	eq
 8003a3e:	6031      	streq	r1, [r6, #0]
 8003a40:	5162      	str	r2, [r4, r5]
 8003a42:	604b      	str	r3, [r1, #4]
 8003a44:	4638      	mov	r0, r7
 8003a46:	f104 060b 	add.w	r6, r4, #11
 8003a4a:	f000 f865 	bl	8003b18 <__malloc_unlock>
 8003a4e:	f026 0607 	bic.w	r6, r6, #7
 8003a52:	1d23      	adds	r3, r4, #4
 8003a54:	1af2      	subs	r2, r6, r3
 8003a56:	d0b6      	beq.n	80039c6 <_malloc_r+0x22>
 8003a58:	1b9b      	subs	r3, r3, r6
 8003a5a:	50a3      	str	r3, [r4, r2]
 8003a5c:	e7b3      	b.n	80039c6 <_malloc_r+0x22>
 8003a5e:	6862      	ldr	r2, [r4, #4]
 8003a60:	42a3      	cmp	r3, r4
 8003a62:	bf0c      	ite	eq
 8003a64:	6032      	streq	r2, [r6, #0]
 8003a66:	605a      	strne	r2, [r3, #4]
 8003a68:	e7ec      	b.n	8003a44 <_malloc_r+0xa0>
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	6864      	ldr	r4, [r4, #4]
 8003a6e:	e7b2      	b.n	80039d6 <_malloc_r+0x32>
 8003a70:	4634      	mov	r4, r6
 8003a72:	6876      	ldr	r6, [r6, #4]
 8003a74:	e7b9      	b.n	80039ea <_malloc_r+0x46>
 8003a76:	230c      	movs	r3, #12
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	f000 f84c 	bl	8003b18 <__malloc_unlock>
 8003a80:	e7a1      	b.n	80039c6 <_malloc_r+0x22>
 8003a82:	6025      	str	r5, [r4, #0]
 8003a84:	e7de      	b.n	8003a44 <_malloc_r+0xa0>
 8003a86:	bf00      	nop
 8003a88:	20000190 	.word	0x20000190

08003a8c <_realloc_r>:
 8003a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a90:	4680      	mov	r8, r0
 8003a92:	4614      	mov	r4, r2
 8003a94:	460e      	mov	r6, r1
 8003a96:	b921      	cbnz	r1, 8003aa2 <_realloc_r+0x16>
 8003a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	f7ff bf81 	b.w	80039a4 <_malloc_r>
 8003aa2:	b92a      	cbnz	r2, 8003ab0 <_realloc_r+0x24>
 8003aa4:	f7ff ff12 	bl	80038cc <_free_r>
 8003aa8:	4625      	mov	r5, r4
 8003aaa:	4628      	mov	r0, r5
 8003aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab0:	f000 f838 	bl	8003b24 <_malloc_usable_size_r>
 8003ab4:	4284      	cmp	r4, r0
 8003ab6:	4607      	mov	r7, r0
 8003ab8:	d802      	bhi.n	8003ac0 <_realloc_r+0x34>
 8003aba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003abe:	d812      	bhi.n	8003ae6 <_realloc_r+0x5a>
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	4640      	mov	r0, r8
 8003ac4:	f7ff ff6e 	bl	80039a4 <_malloc_r>
 8003ac8:	4605      	mov	r5, r0
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d0ed      	beq.n	8003aaa <_realloc_r+0x1e>
 8003ace:	42bc      	cmp	r4, r7
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	bf28      	it	cs
 8003ad6:	463a      	movcs	r2, r7
 8003ad8:	f7ff fed0 	bl	800387c <memcpy>
 8003adc:	4631      	mov	r1, r6
 8003ade:	4640      	mov	r0, r8
 8003ae0:	f7ff fef4 	bl	80038cc <_free_r>
 8003ae4:	e7e1      	b.n	8003aaa <_realloc_r+0x1e>
 8003ae6:	4635      	mov	r5, r6
 8003ae8:	e7df      	b.n	8003aaa <_realloc_r+0x1e>
	...

08003aec <_sbrk_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4d06      	ldr	r5, [pc, #24]	; (8003b08 <_sbrk_r+0x1c>)
 8003af0:	2300      	movs	r3, #0
 8003af2:	4604      	mov	r4, r0
 8003af4:	4608      	mov	r0, r1
 8003af6:	602b      	str	r3, [r5, #0]
 8003af8:	f7fc ffe0 	bl	8000abc <_sbrk>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d102      	bne.n	8003b06 <_sbrk_r+0x1a>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	b103      	cbz	r3, 8003b06 <_sbrk_r+0x1a>
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
 8003b08:	20000198 	.word	0x20000198

08003b0c <__malloc_lock>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	; (8003b14 <__malloc_lock+0x8>)
 8003b0e:	f000 b811 	b.w	8003b34 <__retarget_lock_acquire_recursive>
 8003b12:	bf00      	nop
 8003b14:	2000019c 	.word	0x2000019c

08003b18 <__malloc_unlock>:
 8003b18:	4801      	ldr	r0, [pc, #4]	; (8003b20 <__malloc_unlock+0x8>)
 8003b1a:	f000 b80c 	b.w	8003b36 <__retarget_lock_release_recursive>
 8003b1e:	bf00      	nop
 8003b20:	2000019c 	.word	0x2000019c

08003b24 <_malloc_usable_size_r>:
 8003b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b28:	1f18      	subs	r0, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bfbc      	itt	lt
 8003b2e:	580b      	ldrlt	r3, [r1, r0]
 8003b30:	18c0      	addlt	r0, r0, r3
 8003b32:	4770      	bx	lr

08003b34 <__retarget_lock_acquire_recursive>:
 8003b34:	4770      	bx	lr

08003b36 <__retarget_lock_release_recursive>:
 8003b36:	4770      	bx	lr

08003b38 <_init>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr

08003b44 <_fini>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr

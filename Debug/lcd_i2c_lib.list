
lcd_i2c_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000397c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b44  08003b44  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003b44  08003b44  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b44  08003b44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000010  08003b5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003b5c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d92a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d25  00000000  00000000  0002d96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002f690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b945  00000000  00000000  00030fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010116  00000000  00000000  0004c90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3235  00000000  00000000  0005ca23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffc58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  000ffca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003aec 	.word	0x08003aec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003aec 	.word	0x08003aec

080001c8 <_LCD_delay_us>:

LCD_current_pos lcd_pos;

bool LCD_delay_us_first_call = TRUE;

void _LCD_delay_us(uint32_t us, TIM_HandleTypeDef *htim){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	uint32_t apb_freq = HAL_RCC_GetHCLKFreq();
 80001d2:	f002 ffb3 	bl	800313c <HAL_RCC_GetHCLKFreq>
 80001d6:	60f8      	str	r0, [r7, #12]
	uint16_t new_prescaler = (uint16_t)(apb_freq/1000000);
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	4a28      	ldr	r2, [pc, #160]	; (800027c <_LCD_delay_us+0xb4>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	0c9b      	lsrs	r3, r3, #18
 80001e2:	817b      	strh	r3, [r7, #10]
	htim->Instance->PSC = new_prescaler - 1;
 80001e4:	897b      	ldrh	r3, [r7, #10]
 80001e6:	1e5a      	subs	r2, r3, #1
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	629a      	str	r2, [r3, #40]	; 0x28
	htim->Instance->ARR = 0xFFFF - 1;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80001f6:	62da      	str	r2, [r3, #44]	; 0x2c
	if(LCD_delay_us_first_call){
 80001f8:	4b21      	ldr	r3, [pc, #132]	; (8000280 <_LCD_delay_us+0xb8>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d01a      	beq.n	8000236 <_LCD_delay_us+0x6e>
		htim->Instance->PSC = new_prescaler - 1;
 8000200:	897b      	ldrh	r3, [r7, #10]
 8000202:	1e5a      	subs	r2, r3, #1
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	629a      	str	r2, [r3, #40]	; 0x28
		htim->Instance->ARR = 0xFFFF - 1;
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start(htim);
 8000214:	6838      	ldr	r0, [r7, #0]
 8000216:	f003 f987 	bl	8003528 <HAL_TIM_Base_Start>
		__HAL_TIM_SET_COUNTER(htim, 0);
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2200      	movs	r2, #0
 8000220:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim->Instance->CNT < us){}
 8000222:	bf00      	nop
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	429a      	cmp	r2, r3
 800022e:	d8f9      	bhi.n	8000224 <_LCD_delay_us+0x5c>
		HAL_TIM_Base_Stop(htim);
 8000230:	6838      	ldr	r0, [r7, #0]
 8000232:	f003 f9c5 	bl	80035c0 <HAL_TIM_Base_Stop>
	}
	htim->Instance->PSC = new_prescaler - 1;
 8000236:	897b      	ldrh	r3, [r7, #10]
 8000238:	1e5a      	subs	r2, r3, #1
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	629a      	str	r2, [r3, #40]	; 0x28
	htim->Instance->ARR = 0xFFFF - 1;
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000248:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 800024a:	6838      	ldr	r0, [r7, #0]
 800024c:	f003 f96c 	bl	8003528 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2200      	movs	r2, #0
 8000256:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim->Instance->CNT < us){}
 8000258:	bf00      	nop
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	429a      	cmp	r2, r3
 8000264:	d8f9      	bhi.n	800025a <_LCD_delay_us+0x92>
	HAL_TIM_Base_Stop(htim);
 8000266:	6838      	ldr	r0, [r7, #0]
 8000268:	f003 f9aa 	bl	80035c0 <HAL_TIM_Base_Stop>
	LCD_delay_us_first_call = FALSE;
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <_LCD_delay_us+0xb8>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	431bde83 	.word	0x431bde83
 8000280:	20000000 	.word	0x20000000

08000284 <_LCD_get_young_bits>:


uint8_t _LCD_get_young_bits(uint8_t data){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
	data <<= 4;
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	011b      	lsls	r3, r3, #4
 8000292:	71fb      	strb	r3, [r7, #7]
	data &= 0xF0;
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	f023 030f 	bic.w	r3, r3, #15
 800029a:	71fb      	strb	r3, [r7, #7]
	return data;
 800029c:	79fb      	ldrb	r3, [r7, #7]

}
 800029e:	4618      	mov	r0, r3
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <_LCD_get_old_bits>:


uint8_t _LCD_get_old_bits(uint8_t data){
 80002aa:	b480      	push	{r7}
 80002ac:	b083      	sub	sp, #12
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	4603      	mov	r3, r0
 80002b2:	71fb      	strb	r3, [r7, #7]
	return data & 0xF0;
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	f023 030f 	bic.w	r3, r3, #15
 80002ba:	b2db      	uxtb	r3, r3
}
 80002bc:	4618      	mov	r0, r3
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <_LCD_send_command>:

void _LCD_send_command(I2C_HandleTypeDef* hi2c, uint8_t command){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af02      	add	r7, sp, #8
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
	uint8_t send[4] = {
		_LCD_get_old_bits(command) | E_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to high
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ffe7 	bl	80002aa <_LCD_get_old_bits>
 80002dc:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80002de:	f043 030c 	orr.w	r3, r3, #12
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	723b      	strb	r3, [r7, #8]
		_LCD_get_old_bits(command) | BACKLIGHT_ON, // older half of the command byte with E pin set to low
 80002e6:	78fb      	ldrb	r3, [r7, #3]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffde 	bl	80002aa <_LCD_get_old_bits>
 80002ee:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80002f0:	f043 0308 	orr.w	r3, r3, #8
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	727b      	strb	r3, [r7, #9]
		_LCD_get_young_bits(command) | E_PIN_MASK | BACKLIGHT_ON, // younger half of the command byte with E pin set to high
 80002f8:	78fb      	ldrb	r3, [r7, #3]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f7ff ffc2 	bl	8000284 <_LCD_get_young_bits>
 8000300:	4603      	mov	r3, r0
	uint8_t send[4] = {
 8000302:	f043 030c 	orr.w	r3, r3, #12
 8000306:	b2db      	uxtb	r3, r3
 8000308:	72bb      	strb	r3, [r7, #10]
		_LCD_get_young_bits(command) | BACKLIGHT_ON}; // younger half of the command byte with E pin set to low
 800030a:	78fb      	ldrb	r3, [r7, #3]
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffb9 	bl	8000284 <_LCD_get_young_bits>
 8000312:	4603      	mov	r3, r0
	uint8_t send[4] = {
 8000314:	f043 0308 	orr.w	r3, r3, #8
 8000318:	b2db      	uxtb	r3, r3
 800031a:	72fb      	strb	r3, [r7, #11]
	uint16_t send_size = sizeof(send);
 800031c:	2304      	movs	r3, #4
 800031e:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, send_size, 100);
 8000320:	89fb      	ldrh	r3, [r7, #14]
 8000322:	f107 0208 	add.w	r2, r7, #8
 8000326:	2164      	movs	r1, #100	; 0x64
 8000328:	9100      	str	r1, [sp, #0]
 800032a:	214e      	movs	r1, #78	; 0x4e
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	f001 f92d 	bl	800158c <HAL_I2C_Master_Transmit>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <_LCD_startup>:

void _LCD_startup(I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim){
 800033a:	b580      	push	{r7, lr}
 800033c:	b086      	sub	sp, #24
 800033e:	af02      	add	r7, sp, #8
 8000340:	6078      	str	r0, [r7, #4]
 8000342:	6039      	str	r1, [r7, #0]
	//startup needs to use standard HAL_Delay(ms) in places where it needs to  due to displays hardware constrains
	uint8_t send[2] = {
 8000344:	f643 033c 	movw	r3, #14396	; 0x383c
 8000348:	81bb      	strh	r3, [r7, #12]
			STARTUP | E_PIN_MASK | BACKLIGHT_ON,
			STARTUP | BACKLIGHT_ON
	};
	_LCD_delay_us(16000, htim);
 800034a:	6839      	ldr	r1, [r7, #0]
 800034c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000350:	f7ff ff3a 	bl	80001c8 <_LCD_delay_us>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 8000354:	f107 020c 	add.w	r2, r7, #12
 8000358:	2364      	movs	r3, #100	; 0x64
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2302      	movs	r3, #2
 800035e:	214e      	movs	r1, #78	; 0x4e
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f001 f913 	bl	800158c <HAL_I2C_Master_Transmit>
	_LCD_delay_us(4100, htim);
 8000366:	6839      	ldr	r1, [r7, #0]
 8000368:	f241 0004 	movw	r0, #4100	; 0x1004
 800036c:	f7ff ff2c 	bl	80001c8 <_LCD_delay_us>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 8000370:	f107 020c 	add.w	r2, r7, #12
 8000374:	2364      	movs	r3, #100	; 0x64
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2302      	movs	r3, #2
 800037a:	214e      	movs	r1, #78	; 0x4e
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f001 f905 	bl	800158c <HAL_I2C_Master_Transmit>
	_LCD_delay_us(110, htim);
 8000382:	6839      	ldr	r1, [r7, #0]
 8000384:	206e      	movs	r0, #110	; 0x6e
 8000386:	f7ff ff1f 	bl	80001c8 <_LCD_delay_us>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 800038a:	f107 020c 	add.w	r2, r7, #12
 800038e:	2364      	movs	r3, #100	; 0x64
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2302      	movs	r3, #2
 8000394:	214e      	movs	r1, #78	; 0x4e
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f001 f8f8 	bl	800158c <HAL_I2C_Master_Transmit>


}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <_LCD_set_4_bits>:

void _LCD_set_4_bits(I2C_HandleTypeDef* hi2c, uint8_t num_of_lines, TIM_HandleTypeDef* htim){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af02      	add	r7, sp, #8
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	460b      	mov	r3, r1
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	72fb      	strb	r3, [r7, #11]
	uint8_t data[2] = {
 80003b2:	f642 032c 	movw	r3, #10284	; 0x282c
 80003b6:	82bb      	strh	r3, [r7, #20]
			FUNCTION_SET_4_BIT_MODE | E_PIN_MASK | BACKLIGHT_ON,
			FUNCTION_SET_4_BIT_MODE | BACKLIGHT_ON};
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS , data, 2, 100);
 80003b8:	f107 0214 	add.w	r2, r7, #20
 80003bc:	2364      	movs	r3, #100	; 0x64
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2302      	movs	r3, #2
 80003c2:	214e      	movs	r1, #78	; 0x4e
 80003c4:	68f8      	ldr	r0, [r7, #12]
 80003c6:	f001 f8e1 	bl	800158c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 fd78 	bl	8000ec0 <HAL_Delay>
	if(num_of_lines == 2)
 80003d0:	7afb      	ldrb	r3, [r7, #11]
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	d103      	bne.n	80003de <_LCD_set_4_bits+0x3a>
		_LCD_send_command(hi2c, FUNCTION_SET_4_BIT_MODE | TWO_LINES_ENABLE);
 80003d6:	2128      	movs	r1, #40	; 0x28
 80003d8:	68f8      	ldr	r0, [r7, #12]
 80003da:	f7ff ff75 	bl	80002c8 <_LCD_send_command>
}
 80003de:	bf00      	nop
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <LCD_init>:

void LCD_init(I2C_HandleTypeDef* hi2c, uint8_t num_of_lines, TIM_HandleTypeDef* htim){
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b084      	sub	sp, #16
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	60f8      	str	r0, [r7, #12]
 80003ee:	460b      	mov	r3, r1
 80003f0:	607a      	str	r2, [r7, #4]
 80003f2:	72fb      	strb	r3, [r7, #11]
	_LCD_startup(hi2c, htim);
 80003f4:	6879      	ldr	r1, [r7, #4]
 80003f6:	68f8      	ldr	r0, [r7, #12]
 80003f8:	f7ff ff9f 	bl	800033a <_LCD_startup>
	HAL_Delay(1);
 80003fc:	2001      	movs	r0, #1
 80003fe:	f000 fd5f 	bl	8000ec0 <HAL_Delay>
	_LCD_set_4_bits(hi2c, num_of_lines ,htim);
 8000402:	7afb      	ldrb	r3, [r7, #11]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	4619      	mov	r1, r3
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f7ff ffcb 	bl	80003a4 <_LCD_set_4_bits>
	HAL_Delay(1);
 800040e:	2001      	movs	r0, #1
 8000410:	f000 fd56 	bl	8000ec0 <HAL_Delay>
	_LCD_send_command(hi2c, DISPLAY_OFF);
 8000414:	2108      	movs	r1, #8
 8000416:	68f8      	ldr	r0, [r7, #12]
 8000418:	f7ff ff56 	bl	80002c8 <_LCD_send_command>
	HAL_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f000 fd4f 	bl	8000ec0 <HAL_Delay>
	_LCD_send_command(hi2c, CLEAR_DISPLAY);
 8000422:	2101      	movs	r1, #1
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f7ff ff4f 	bl	80002c8 <_LCD_send_command>
	HAL_Delay(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f000 fd48 	bl	8000ec0 <HAL_Delay>
	_LCD_send_command(hi2c, INCREMENT_NO_SHIFT);
 8000430:	2106      	movs	r1, #6
 8000432:	68f8      	ldr	r0, [r7, #12]
 8000434:	f7ff ff48 	bl	80002c8 <_LCD_send_command>
	HAL_Delay(1);
 8000438:	2001      	movs	r0, #1
 800043a:	f000 fd41 	bl	8000ec0 <HAL_Delay>
	_LCD_send_command(hi2c, 0x0C);
 800043e:	210c      	movs	r1, #12
 8000440:	68f8      	ldr	r0, [r7, #12]
 8000442:	f7ff ff41 	bl	80002c8 <_LCD_send_command>
	HAL_Delay(1);
 8000446:	2001      	movs	r0, #1
 8000448:	f000 fd3a 	bl	8000ec0 <HAL_Delay>

}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <LCD_putchar>:

void LCD_putchar(I2C_HandleTypeDef* hi2c, char data){
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af02      	add	r7, sp, #8
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]
	uint8_t send[4] = {
			_LCD_get_old_bits((uint8_t)data) | E_PIN_MASK | RS_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to high
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff21 	bl	80002aa <_LCD_get_old_bits>
 8000468:	4603      	mov	r3, r0
	uint8_t send[4] = {
 800046a:	f043 030d 	orr.w	r3, r3, #13
 800046e:	b2db      	uxtb	r3, r3
 8000470:	723b      	strb	r3, [r7, #8]
			_LCD_get_old_bits((uint8_t)data) | RS_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to low
 8000472:	78fb      	ldrb	r3, [r7, #3]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff18 	bl	80002aa <_LCD_get_old_bits>
 800047a:	4603      	mov	r3, r0
	uint8_t send[4] = {
 800047c:	f043 0309 	orr.w	r3, r3, #9
 8000480:	b2db      	uxtb	r3, r3
 8000482:	727b      	strb	r3, [r7, #9]
			_LCD_get_young_bits((uint8_t)data) | E_PIN_MASK | RS_PIN_MASK | BACKLIGHT_ON, // younger half of the command byte with E pin set to high
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff fefc 	bl	8000284 <_LCD_get_young_bits>
 800048c:	4603      	mov	r3, r0
	uint8_t send[4] = {
 800048e:	f043 030d 	orr.w	r3, r3, #13
 8000492:	b2db      	uxtb	r3, r3
 8000494:	72bb      	strb	r3, [r7, #10]
			_LCD_get_young_bits((uint8_t)data) | RS_PIN_MASK | BACKLIGHT_ON}; // younger half of the command byte with E pin set to low
 8000496:	78fb      	ldrb	r3, [r7, #3]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff fef3 	bl	8000284 <_LCD_get_young_bits>
 800049e:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80004a0:	f043 0309 	orr.w	r3, r3, #9
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	72fb      	strb	r3, [r7, #11]
	int16_t send_size = sizeof(send);
 80004a8:	2304      	movs	r3, #4
 80004aa:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, send_size, 100);
 80004ac:	89fb      	ldrh	r3, [r7, #14]
 80004ae:	f107 0208 	add.w	r2, r7, #8
 80004b2:	2164      	movs	r1, #100	; 0x64
 80004b4:	9100      	str	r1, [sp, #0]
 80004b6:	214e      	movs	r1, #78	; 0x4e
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f001 f867 	bl	800158c <HAL_I2C_Master_Transmit>
}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <LCD_printf>:

void LCD_printf(I2C_HandleTypeDef* hi2c, char *data){
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b084      	sub	sp, #16
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
 80004ce:	6039      	str	r1, [r7, #0]
	//IMPLEMENT \n as NEWLINE
	//IMPLEMENT \t as two spaces
	for(char* i = data; *i != '\0'; i++)
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e008      	b.n	80004e8 <LCD_printf+0x22>
		LCD_putchar(hi2c, *i);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	4619      	mov	r1, r3
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff ffb9 	bl	8000454 <LCD_putchar>
	for(char* i = data; *i != '\0'; i++)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1f2      	bne.n	80004d6 <LCD_printf+0x10>

}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <LCD_set_position>:

void LCD_set_position(I2C_HandleTypeDef* hi2c, uint8_t col, uint8_t row){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
 8000508:	4613      	mov	r3, r2
 800050a:	70bb      	strb	r3, [r7, #2]
	//rows and columns are 0 indexed
	//function omits positions outside of displays memory
	if((col <= 0x27 && col >= 0) && (row <= 1 && row >=0)){
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	2b27      	cmp	r3, #39	; 0x27
 8000510:	d817      	bhi.n	8000542 <LCD_set_position+0x46>
 8000512:	78bb      	ldrb	r3, [r7, #2]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d814      	bhi.n	8000542 <LCD_set_position+0x46>
		uint8_t address = col + row * 0x40;
 8000518:	78bb      	ldrb	r3, [r7, #2]
 800051a:	019b      	lsls	r3, r3, #6
 800051c:	b2da      	uxtb	r2, r3
 800051e:	78fb      	ldrb	r3, [r7, #3]
 8000520:	4413      	add	r3, r2
 8000522:	73fb      	strb	r3, [r7, #15]
		address |= SET_POSITION_MASK;
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800052a:	73fb      	strb	r3, [r7, #15]
		lcd_pos.current_col = col;
 800052c:	4a07      	ldr	r2, [pc, #28]	; (800054c <LCD_set_position+0x50>)
 800052e:	78fb      	ldrb	r3, [r7, #3]
 8000530:	7053      	strb	r3, [r2, #1]
		lcd_pos.current_row = row;
 8000532:	4a06      	ldr	r2, [pc, #24]	; (800054c <LCD_set_position+0x50>)
 8000534:	78bb      	ldrb	r3, [r7, #2]
 8000536:	7013      	strb	r3, [r2, #0]
		_LCD_send_command(hi2c, address);
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	4619      	mov	r1, r3
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff fec3 	bl	80002c8 <_LCD_send_command>

	}

}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	2000002c 	.word	0x2000002c

08000550 <LCD_reset_position>:

void LCD_reset_position(I2C_HandleTypeDef *hi2c){
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	LCD_set_position(hi2c, 0, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f7ff ffcd 	bl	80004fc <LCD_set_position>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <LCD_printf_align>:
	_LCD_send_command(hi2c, 0x0C);
	HAL_Delay(1);
	LCD_set_position(hi2c, lcd_pos.current_col, lcd_pos.current_row);
}

void LCD_printf_align(I2C_HandleTypeDef *hi2c, char *data, uint8_t alignment){
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	4613      	mov	r3, r2
 8000578:	71fb      	strb	r3, [r7, #7]
	//prints given string with left or middle alignment of the text
	//function resets cursor position to (0,0) after execution
	uint16_t len = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	83fb      	strh	r3, [r7, #30]
	for(char* i = data; *i != '\0'; i++, len++);
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	e005      	b.n	8000590 <LCD_printf_align+0x24>
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	3301      	adds	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	8bfb      	ldrh	r3, [r7, #30]
 800058c:	3301      	adds	r3, #1
 800058e:	83fb      	strh	r3, [r7, #30]
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f5      	bne.n	8000584 <LCD_printf_align+0x18>
	switch(alignment){
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d002      	beq.n	80005a4 <LCD_printf_align+0x38>
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d00c      	beq.n	80005bc <LCD_printf_align+0x50>
 80005a2:	e019      	b.n	80005d8 <LCD_printf_align+0x6c>
		case ALIGN_RIGHT:
			LCD_set_position(hi2c, MAX_COLUMN - len + 1, lcd_pos.current_row);
 80005a4:	8bfb      	ldrh	r3, [r7, #30]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f1c3 0310 	rsb	r3, r3, #16
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <LCD_printf_align+0x9c>)
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f7ff ffa1 	bl	80004fc <LCD_set_position>
			break;
 80005ba:	e00d      	b.n	80005d8 <LCD_printf_align+0x6c>
		case ALIGN_MIDDLE:
			LCD_set_position(hi2c, (uint8_t)(floor(MAX_COLUMN + 1)/2) - (uint8_t)(len / 2), lcd_pos.current_row);
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	085b      	lsrs	r3, r3, #1
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	f1c3 0308 	rsb	r3, r3, #8
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <LCD_printf_align+0x9c>)
 80005cc:	7812      	ldrb	r2, [r2, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	f7ff ff93 	bl	80004fc <LCD_set_position>
			break;
 80005d6:	bf00      	nop
	}
	for(char* i = data; *i != '\0'; i++)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e008      	b.n	80005f0 <LCD_printf_align+0x84>
		LCD_putchar(hi2c, *i);
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f7ff ff35 	bl	8000454 <LCD_putchar>
	for(char* i = data; *i != '\0'; i++)
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3301      	adds	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1f2      	bne.n	80005de <LCD_printf_align+0x72>
	LCD_reset_position(hi2c);
 80005f8:	68f8      	ldr	r0, [r7, #12]
 80005fa:	f7ff ffa9 	bl	8000550 <LCD_reset_position>

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000002c 	.word	0x2000002c

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fbef 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f835 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f9e1 	bl	80009e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800061e:	f000 f895 	bl	800074c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000622:	f000 f913 	bl	800084c <MX_I2C3_Init>
  MX_I2C2_Init();
 8000626:	f000 f8d1 	bl	80007cc <MX_I2C2_Init>
  MX_TIM1_Init();
 800062a:	f000 f94f 	bl	80008cc <MX_TIM1_Init>
  MX_TIM6_Init();
 800062e:	f000 f9a1 	bl	8000974 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  LCD_init(&hi2c3, 2, &htim1);
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <main+0x68>)
 8000634:	2102      	movs	r1, #2
 8000636:	4810      	ldr	r0, [pc, #64]	; (8000678 <main+0x6c>)
 8000638:	f7ff fed5 	bl	80003e6 <LCD_init>
  char data[] = "siema";
 800063c:	4a0f      	ldr	r2, [pc, #60]	; (800067c <main+0x70>)
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000646:	6018      	str	r0, [r3, #0]
 8000648:	3304      	adds	r3, #4
 800064a:	8019      	strh	r1, [r3, #0]
  char data2[] = "swiat";
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <main+0x74>)
 800064e:	463b      	mov	r3, r7
 8000650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000654:	6018      	str	r0, [r3, #0]
 8000656:	3304      	adds	r3, #4
 8000658:	8019      	strh	r1, [r3, #0]
  LCD_printf(&hi2c3, data);
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <main+0x6c>)
 8000662:	f7ff ff30 	bl	80004c6 <LCD_printf>
  LCD_printf_align(&hi2c3, data2, ALIGN_RIGHT);
 8000666:	463b      	mov	r3, r7
 8000668:	2201      	movs	r2, #1
 800066a:	4619      	mov	r1, r3
 800066c:	4802      	ldr	r0, [pc, #8]	; (8000678 <main+0x6c>)
 800066e:	f7ff ff7d 	bl	800056c <LCD_printf_align>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0x66>
 8000674:	2000012c 	.word	0x2000012c
 8000678:	200000d8 	.word	0x200000d8
 800067c:	08003b04 	.word	0x08003b04
 8000680:	08003b0c 	.word	0x08003b0c

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09c      	sub	sp, #112	; 0x70
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800068e:	2228      	movs	r2, #40	; 0x28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fa22 	bl	8003adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2234      	movs	r2, #52	; 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fa14 	bl	8003adc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006b4:	2303      	movs	r3, #3
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c2:	2301      	movs	r3, #1
 80006c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c6:	2310      	movs	r3, #16
 80006c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fb1e 	bl	8001d20 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006ea:	f000 f9d3 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fb46 	bl	8002d9c <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000716:	f000 f9bd 	bl	8000a94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 800071a:	f249 0360 	movw	r3, #36960	; 0x9060
 800071e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fd0e 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800073e:	f000 f9a9 	bl	8000a94 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3770      	adds	r7, #112	; 0x70
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <MX_I2C1_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <MX_I2C1_Init+0x7c>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000764:	2201      	movs	r2, #1
 8000766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2C1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000788:	f000 fe65 	bl	8001456 <HAL_I2C_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000792:	f000 f97f 	bl	8000a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <MX_I2C1_Init+0x74>)
 800079a:	f001 fa29 	bl	8001bf0 <HAL_I2CEx_ConfigAnalogFilter>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 f976 	bl	8000a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_I2C1_Init+0x74>)
 80007ac:	f001 fa6b 	bl	8001c86 <HAL_I2CEx_ConfigDigitalFilter>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 f96d 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000030 	.word	0x20000030
 80007c4:	40005400 	.word	0x40005400
 80007c8:	2000090e 	.word	0x2000090e

080007cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_I2C2_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_I2C2_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_I2C2_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_I2C2_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_I2C2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_I2C2_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_I2C2_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_I2C2_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_I2C2_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_I2C2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <MX_I2C2_Init+0x74>)
 8000808:	f000 fe25 	bl	8001456 <HAL_I2C_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 f93f 	bl	8000a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_I2C2_Init+0x74>)
 800081a:	f001 f9e9 	bl	8001bf0 <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 f936 	bl	8000a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_I2C2_Init+0x74>)
 800082c:	f001 fa2b 	bl	8001c86 <HAL_I2CEx_ConfigDigitalFilter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 f92d 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000084 	.word	0x20000084
 8000844:	40005800 	.word	0x40005800
 8000848:	2000090e 	.word	0x2000090e

0800084c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C3_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C3_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C3_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C3_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C3_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C3_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C3_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C3_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C3_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C3_Init+0x74>)
 8000888:	f000 fde5 	bl	8001456 <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f8ff 	bl	8000a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C3_Init+0x74>)
 800089a:	f001 f9a9 	bl	8001bf0 <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f8f6 	bl	8000a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C3_Init+0x74>)
 80008ac:	f001 f9eb 	bl	8001c86 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f8ed 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000d8 	.word	0x200000d8
 80008c4:	40007800 	.word	0x40007800
 80008c8:	2000090e 	.word	0x2000090e

080008cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <MX_TIM1_Init+0xa0>)
 80008ec:	4a20      	ldr	r2, [pc, #128]	; (8000970 <MX_TIM1_Init+0xa4>)
 80008ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_TIM1_Init+0xa0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TIM1_Init+0xa0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_TIM1_Init+0xa0>)
 80008fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000902:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_TIM1_Init+0xa0>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_TIM1_Init+0xa0>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_TIM1_Init+0xa0>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000916:	4815      	ldr	r0, [pc, #84]	; (800096c <MX_TIM1_Init+0xa0>)
 8000918:	f002 fdae 	bl	8003478 <HAL_TIM_Base_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000922:	f000 f8b7 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4619      	mov	r1, r3
 8000932:	480e      	ldr	r0, [pc, #56]	; (800096c <MX_TIM1_Init+0xa0>)
 8000934:	f002 fe6b 	bl	800360e <HAL_TIM_ConfigClockSource>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800093e:	f000 f8a9 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_TIM1_Init+0xa0>)
 8000954:	f003 f838 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800095e:	f000 f899 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000012c 	.word	0x2000012c
 8000970:	40012c00 	.word	0x40012c00

08000974 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MX_TIM6_Init+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_TIM6_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009a6:	f002 fd67 	bl	8003478 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009b0:	f000 f870 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009c2:	f003 f801 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 f862 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000178 	.word	0x20000178
 80009dc:	40001000 	.word	0x40001000

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <MX_GPIO_Init+0xac>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a24      	ldr	r2, [pc, #144]	; (8000a8c <MX_GPIO_Init+0xac>)
 80009fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a48:	6153      	str	r3, [r2, #20]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_GPIO_Init+0xac>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_GPIO_Init+0xb0>)
 8000a6e:	f000 fb5d 	bl	800112c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2028      	movs	r0, #40	; 0x28
 8000a78:	f000 fb21 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a7c:	2028      	movs	r0, #40	; 0x28
 8000a7e:	f000 fb3a 	bl	80010f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000800 	.word	0x48000800

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f000 fae6 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b090      	sub	sp, #64	; 0x40
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a64      	ldr	r2, [pc, #400]	; (8000c98 <HAL_I2C_MspInit+0x1b0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d146      	bne.n	8000b98 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b64      	ldr	r3, [pc, #400]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a63      	ldr	r2, [pc, #396]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	6153      	str	r3, [r2, #20]
 8000b16:	4b61      	ldr	r3, [pc, #388]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	4b5e      	ldr	r3, [pc, #376]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a5d      	ldr	r2, [pc, #372]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	4b5b      	ldr	r3, [pc, #364]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b40:	2312      	movs	r3, #18
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f000 fae7 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b62:	2312      	movs	r3, #18
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b76:	4619      	mov	r1, r3
 8000b78:	4849      	ldr	r0, [pc, #292]	; (8000ca0 <HAL_I2C_MspInit+0x1b8>)
 8000b7a:	f000 fad7 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b7e:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a46      	ldr	r2, [pc, #280]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b96:	e07b      	b.n	8000c90 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a41      	ldr	r2, [pc, #260]	; (8000ca4 <HAL_I2C_MspInit+0x1bc>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12a      	bne.n	8000bf8 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a3d      	ldr	r2, [pc, #244]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	6153      	str	r3, [r2, #20]
 8000bae:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	61fb      	str	r3, [r7, #28]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc0:	2312      	movs	r3, #18
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f000 faa7 	bl	800112c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bde:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
}
 8000bf6:	e04b      	b.n	8000c90 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C3)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ca8 <HAL_I2C_MspInit+0x1c0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d146      	bne.n	8000c90 <HAL_I2C_MspInit+0x1a8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a25      	ldr	r2, [pc, #148]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c38:	2312      	movs	r3, #18
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8000c44:	2303      	movs	r3, #3
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4817      	ldr	r0, [pc, #92]	; (8000cac <HAL_I2C_MspInit+0x1c4>)
 8000c50:	f000 fa6c 	bl	800112c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8000c66:	2303      	movs	r3, #3
 8000c68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f000 fa5a 	bl	800112c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000c82:	61d3      	str	r3, [r2, #28]
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_I2C_MspInit+0x1b4>)
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3740      	adds	r7, #64	; 0x40
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	40005800 	.word	0x40005800
 8000ca8:	40007800 	.word	0x40007800
 8000cac:	48000800 	.word	0x48000800

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_TIM_Base_MspInit+0x5c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d10c      	bne.n	8000cdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ccc:	6193      	str	r3, [r2, #24]
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cda:	e010      	b.n	8000cfe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <HAL_TIM_Base_MspInit+0x64>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10b      	bne.n	8000cfe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40012c00 	.word	0x40012c00
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40001000 	.word	0x40001000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f88c 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d74:	f000 fb4c 	bl	8001410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da4:	f7ff ffea 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f002 fe61 	bl	8003a94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fc1b 	bl	800060c <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dd8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000de4:	08003b4c 	.word	0x08003b4c
  ldr r2, =_sbss
 8000de8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dec:	200001c8 	.word	0x200001c8

08000df0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x28>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x28>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f94f 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe46 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f967 	bl	8001112 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f92f 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000004 	.word	0x20000004
 8000e78:	2000000c 	.word	0x2000000c
 8000e7c:	20000008 	.word	0x20000008

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	2000000c 	.word	0x2000000c
 8000ea4:	200001c4 	.word	0x200001c4

08000ea8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200001c4 	.word	0x200001c4

08000ec0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000000c 	.word	0x2000000c

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e14e      	b.n	80013da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8140 	beq.w	80013d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d005      	beq.n	800116c <HAL_GPIO_Init+0x40>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d130      	bne.n	80011ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a2:	2201      	movs	r2, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	f003 0201 	and.w	r2, r3, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d017      	beq.n	800120a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d123      	bne.n	800125e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0203 	and.w	r2, r3, #3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 809a 	beq.w	80013d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a0:	4b55      	ldr	r3, [pc, #340]	; (80013f8 <HAL_GPIO_Init+0x2cc>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a54      	ldr	r2, [pc, #336]	; (80013f8 <HAL_GPIO_Init+0x2cc>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b52      	ldr	r3, [pc, #328]	; (80013f8 <HAL_GPIO_Init+0x2cc>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b8:	4a50      	ldr	r2, [pc, #320]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012e2:	d013      	beq.n	800130c <HAL_GPIO_Init+0x1e0>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_GPIO_Init+0x2d4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00d      	beq.n	8001308 <HAL_GPIO_Init+0x1dc>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a45      	ldr	r2, [pc, #276]	; (8001404 <HAL_GPIO_Init+0x2d8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0x1d8>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a44      	ldr	r2, [pc, #272]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d101      	bne.n	8001300 <HAL_GPIO_Init+0x1d4>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e006      	b.n	800130e <HAL_GPIO_Init+0x1e2>
 8001300:	2305      	movs	r3, #5
 8001302:	e004      	b.n	800130e <HAL_GPIO_Init+0x1e2>
 8001304:	2302      	movs	r3, #2
 8001306:	e002      	b.n	800130e <HAL_GPIO_Init+0x1e2>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <HAL_GPIO_Init+0x1e2>
 800130c:	2300      	movs	r3, #0
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	f002 0203 	and.w	r2, r2, #3
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	4093      	lsls	r3, r2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131e:	4937      	ldr	r1, [pc, #220]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_GPIO_Init+0x2e0>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001350:	4a2e      	ldr	r2, [pc, #184]	; (800140c <HAL_GPIO_Init+0x2e0>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_GPIO_Init+0x2e0>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800137a:	4a24      	ldr	r2, [pc, #144]	; (800140c <HAL_GPIO_Init+0x2e0>)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_GPIO_Init+0x2e0>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013a4:	4a19      	ldr	r2, [pc, #100]	; (800140c <HAL_GPIO_Init+0x2e0>)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_GPIO_Init+0x2e0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_GPIO_Init+0x2e0>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3301      	adds	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f47f aea9 	bne.w	800113c <HAL_GPIO_Init+0x10>
  }
}
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	48000400 	.word	0x48000400
 8001404:	48000800 	.word	0x48000800
 8001408:	48000c00 	.word	0x48000c00
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f806 	bl	8001440 <HAL_GPIO_EXTI_Callback>
  }
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e08d      	b.n	8001584 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d106      	bne.n	8001482 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fb33 	bl	8000ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2224      	movs	r2, #36	; 0x24
 8001486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0201 	bic.w	r2, r2, #1
 8001498:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d107      	bne.n	80014d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	e006      	b.n	80014de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d108      	bne.n	80014f8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	e007      	b.n	8001508 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001506:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800151a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800152a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69d9      	ldr	r1, [r3, #28]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1a      	ldr	r2, [r3, #32]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	461a      	mov	r2, r3
 8001598:	460b      	mov	r3, r1
 800159a:	817b      	strh	r3, [r7, #10]
 800159c:	4613      	mov	r3, r2
 800159e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	f040 80fd 	bne.w	80017a8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_I2C_Master_Transmit+0x30>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e0f6      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015c4:	f7ff fc70 	bl	8000ea8 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2319      	movs	r3, #25
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f914 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0e1      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2221      	movs	r2, #33	; 0x21
 80015ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2210      	movs	r2, #16
 80015f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	893a      	ldrh	r2, [r7, #8]
 8001606:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001612:	b29b      	uxth	r3, r3
 8001614:	2bff      	cmp	r3, #255	; 0xff
 8001616:	d906      	bls.n	8001626 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	22ff      	movs	r2, #255	; 0xff
 800161c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800161e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e007      	b.n	8001636 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001630:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001634:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163a:	2b00      	cmp	r3, #0
 800163c:	d024      	beq.n	8001688 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	3b01      	subs	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b2da      	uxtb	r2, r3
 8001678:	8979      	ldrh	r1, [r7, #10]
 800167a:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <HAL_I2C_Master_Transmit+0x228>)
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 fa83 	bl	8001b8c <I2C_TransferConfig>
 8001686:	e066      	b.n	8001756 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168c:	b2da      	uxtb	r2, r3
 800168e:	8979      	ldrh	r1, [r7, #10]
 8001690:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <HAL_I2C_Master_Transmit+0x228>)
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 fa78 	bl	8001b8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800169c:	e05b      	b.n	8001756 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	6a39      	ldr	r1, [r7, #32]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f907 	bl	80018b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07b      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d034      	beq.n	8001756 <HAL_I2C_Master_Transmit+0x1ca>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d130      	bne.n	8001756 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	2200      	movs	r2, #0
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f880 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e04d      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001712:	b29b      	uxth	r3, r3
 8001714:	2bff      	cmp	r3, #255	; 0xff
 8001716:	d90e      	bls.n	8001736 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	22ff      	movs	r2, #255	; 0xff
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001722:	b2da      	uxtb	r2, r3
 8001724:	8979      	ldrh	r1, [r7, #10]
 8001726:	2300      	movs	r3, #0
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 fa2c 	bl	8001b8c <I2C_TransferConfig>
 8001734:	e00f      	b.n	8001756 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001744:	b2da      	uxtb	r2, r3
 8001746:	8979      	ldrh	r1, [r7, #10]
 8001748:	2300      	movs	r3, #0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 fa1b 	bl	8001b8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d19e      	bne.n	800169e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	6a39      	ldr	r1, [r7, #32]
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 f8ed 	bl	8001944 <I2C_WaitOnSTOPFlagUntilTimeout>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e01a      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2220      	movs	r2, #32
 800177a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6859      	ldr	r1, [r3, #4]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_I2C_Master_Transmit+0x22c>)
 8001788:	400b      	ands	r3, r1
 800178a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2220      	movs	r2, #32
 8001790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e000      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80017a8:	2302      	movs	r3, #2
  }
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	80002000 	.word	0x80002000
 80017b8:	fe00e800 	.word	0xfe00e800

080017bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d103      	bne.n	80017da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d007      	beq.n	80017f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	619a      	str	r2, [r3, #24]
  }
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001814:	e03b      	b.n	800188e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f8d6 	bl	80019cc <I2C_IsErrorOccurred>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e041      	b.n	80018ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d02d      	beq.n	800188e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001832:	f7ff fb39 	bl	8000ea8 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d302      	bcc.n	8001848 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d122      	bne.n	800188e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	4013      	ands	r3, r2
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	429a      	cmp	r2, r3
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	429a      	cmp	r2, r3
 8001864:	d113      	bne.n	800188e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f043 0220 	orr.w	r2, r3, #32
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2220      	movs	r2, #32
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00f      	b.n	80018ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699a      	ldr	r2, [r3, #24]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4013      	ands	r3, r2
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	429a      	cmp	r2, r3
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d0b4      	beq.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018c2:	e033      	b.n	800192c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f87f 	bl	80019cc <I2C_IsErrorOccurred>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e031      	b.n	800193c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018de:	d025      	beq.n	800192c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018e0:	f7ff fae2 	bl	8000ea8 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d302      	bcc.n	80018f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d11a      	bne.n	800192c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b02      	cmp	r3, #2
 8001902:	d013      	beq.n	800192c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2220      	movs	r2, #32
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e007      	b.n	800193c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b02      	cmp	r3, #2
 8001938:	d1c4      	bne.n	80018c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001950:	e02f      	b.n	80019b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f838 	bl	80019cc <I2C_IsErrorOccurred>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e02d      	b.n	80019c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001966:	f7ff fa9f 	bl	8000ea8 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	429a      	cmp	r2, r3
 8001974:	d302      	bcc.n	800197c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11a      	bne.n	80019b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	2b20      	cmp	r3, #32
 8001988:	d013      	beq.n	80019b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f043 0220 	orr.w	r2, r3, #32
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2220      	movs	r2, #32
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e007      	b.n	80019c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0320 	and.w	r3, r3, #32
 80019bc:	2b20      	cmp	r3, #32
 80019be:	d1c8      	bne.n	8001952 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d068      	beq.n	8001aca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2210      	movs	r2, #16
 80019fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a00:	e049      	b.n	8001a96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a08:	d045      	beq.n	8001a96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a0a:	f7ff fa4d 	bl	8000ea8 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d302      	bcc.n	8001a20 <I2C_IsErrorOccurred+0x54>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d13a      	bne.n	8001a96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a42:	d121      	bne.n	8001a88 <I2C_IsErrorOccurred+0xbc>
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a4a:	d01d      	beq.n	8001a88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001a4c:	7cfb      	ldrb	r3, [r7, #19]
 8001a4e:	2b20      	cmp	r3, #32
 8001a50:	d01a      	beq.n	8001a88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a62:	f7ff fa21 	bl	8000ea8 <HAL_GetTick>
 8001a66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a68:	e00e      	b.n	8001a88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a6a:	f7ff fa1d 	bl	8000ea8 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b19      	cmp	r3, #25
 8001a76:	d907      	bls.n	8001a88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	f043 0320 	orr.w	r3, r3, #32
 8001a7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001a86:	e006      	b.n	8001a96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0320 	and.w	r3, r3, #32
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d1e9      	bne.n	8001a6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d003      	beq.n	8001aac <I2C_IsErrorOccurred+0xe0>
 8001aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0aa      	beq.n	8001a02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d103      	bne.n	8001abc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00b      	beq.n	8001b38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01c      	beq.n	8001b7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff fe3b 	bl	80017bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <I2C_IsErrorOccurred+0x1bc>)
 8001b52:	400b      	ands	r3, r1
 8001b54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	fe00e800 	.word	0xfe00e800

08001b8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	817b      	strh	r3, [r7, #10]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b9e:	897b      	ldrh	r3, [r7, #10]
 8001ba0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ba4:	7a7b      	ldrb	r3, [r7, #9]
 8001ba6:	041b      	lsls	r3, r3, #16
 8001ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	0d5b      	lsrs	r3, r3, #21
 8001bc6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <I2C_TransferConfig+0x60>)
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	ea02 0103 	and.w	r1, r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bde:	bf00      	nop
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	03ff63ff 	.word	0x03ff63ff

08001bf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d138      	bne.n	8001c78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e032      	b.n	8001c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e000      	b.n	8001c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d139      	bne.n	8001d10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e033      	b.n	8001d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2224      	movs	r2, #36	; 0x24
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f001 b823 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 817d 	beq.w	8002056 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d5c:	4bbc      	ldr	r3, [pc, #752]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d00c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d68:	4bb9      	ldr	r3, [pc, #740]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d15c      	bne.n	8001e2e <HAL_RCC_OscConfig+0x10e>
 8001d74:	4bb6      	ldr	r3, [pc, #728]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d155      	bne.n	8001e2e <HAL_RCC_OscConfig+0x10e>
 8001d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_RCC_OscConfig+0x94>
 8001dae:	4ba8      	ldr	r3, [pc, #672]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	e015      	b.n	8001de0 <HAL_RCC_OscConfig+0xc0>
 8001db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001dd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ddc:	4b9c      	ldr	r3, [pc, #624]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001de4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001de8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001dec:	fa92 f2a2 	rbit	r2, r2
 8001df0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001df4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	f042 0220 	orr.w	r2, r2, #32
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	f002 021f 	and.w	r2, r2, #31
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 811f 	beq.w	8002054 <HAL_RCC_OscConfig+0x334>
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8116 	bne.w	8002054 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f000 bfaf 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x12e>
 8001e40:	4b83      	ldr	r3, [pc, #524]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a82      	ldr	r2, [pc, #520]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e036      	b.n	8001ebc <HAL_RCC_OscConfig+0x19c>
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x158>
 8001e5e:	4b7c      	ldr	r3, [pc, #496]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7b      	ldr	r2, [pc, #492]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b79      	ldr	r3, [pc, #484]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a78      	ldr	r2, [pc, #480]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e021      	b.n	8001ebc <HAL_RCC_OscConfig+0x19c>
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x184>
 8001e8a:	4b71      	ldr	r3, [pc, #452]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a70      	ldr	r2, [pc, #448]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6d      	ldr	r2, [pc, #436]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0x19c>
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a69      	ldr	r2, [pc, #420]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b67      	ldr	r3, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a66      	ldr	r2, [pc, #408]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ebc:	4b64      	ldr	r3, [pc, #400]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	f023 020f 	bic.w	r2, r3, #15
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	495f      	ldr	r1, [pc, #380]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d059      	beq.n	8001f9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7fe ffdf 	bl	8000ea8 <HAL_GetTick>
 8001eea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7fe ffda 	bl	8000ea8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	; 0x64
 8001efe:	d902      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	f000 bf43 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 8001f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_OscConfig+0x218>
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	e015      	b.n	8001f64 <HAL_RCC_OscConfig+0x244>
 8001f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f70:	fa92 f2a2 	rbit	r2, r2
 8001f74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f7c:	fab2 f282 	clz	r2, r2
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f042 0220 	orr.w	r2, r2, #32
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f002 021f 	and.w	r2, r2, #31
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ab      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x1d0>
 8001f98:	e05d      	b.n	8002056 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7fe ff85 	bl	8000ea8 <HAL_GetTick>
 8001f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7fe ff80 	bl	8000ea8 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d902      	bls.n	8001fba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	f000 bee9 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 8001fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fbe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001fce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	095b      	lsrs	r3, r3, #5
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_RCC_OscConfig+0x2cc>
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	e015      	b.n	8002018 <HAL_RCC_OscConfig+0x2f8>
 8001fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002004:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002008:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_RCC_OscConfig+0x330>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800201c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002020:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002024:	fa92 f2a2 	rbit	r2, r2
 8002028:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800202c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f042 0220 	orr.w	r2, r2, #32
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f002 021f 	and.w	r2, r2, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ab      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x284>
 800204c:	e003      	b.n	8002056 <HAL_RCC_OscConfig+0x336>
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 817d 	beq.w	8002366 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800206c:	4ba6      	ldr	r3, [pc, #664]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00b      	beq.n	8002090 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002078:	4ba3      	ldr	r3, [pc, #652]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d172      	bne.n	800216a <HAL_RCC_OscConfig+0x44a>
 8002084:	4ba0      	ldr	r3, [pc, #640]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d16c      	bne.n	800216a <HAL_RCC_OscConfig+0x44a>
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d102      	bne.n	80020c0 <HAL_RCC_OscConfig+0x3a0>
 80020ba:	4b93      	ldr	r3, [pc, #588]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	e013      	b.n	80020e8 <HAL_RCC_OscConfig+0x3c8>
 80020c0:	2302      	movs	r3, #2
 80020c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80020e4:	4b88      	ldr	r3, [pc, #544]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	2202      	movs	r2, #2
 80020ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80020ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020f2:	fa92 f2a2 	rbit	r2, r2
 80020f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCC_OscConfig+0x410>
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d002      	beq.n	8002130 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f000 be2e 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b75      	ldr	r3, [pc, #468]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	21f8      	movs	r1, #248	; 0xf8
 8002146:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800214e:	fa91 f1a1 	rbit	r1, r1
 8002152:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002156:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800215a:	fab1 f181 	clz	r1, r1
 800215e:	b2c9      	uxtb	r1, r1
 8002160:	408b      	lsls	r3, r1
 8002162:	4969      	ldr	r1, [pc, #420]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002168:	e0fd      	b.n	8002366 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8088 	beq.w	800228c <HAL_RCC_OscConfig+0x56c>
 800217c:	2301      	movs	r3, #1
 800217e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800218e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800219c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	461a      	mov	r2, r3
 80021a4:	2301      	movs	r3, #1
 80021a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe7e 	bl	8000ea8 <HAL_GetTick>
 80021ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b2:	f7fe fe79 	bl	8000ea8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d902      	bls.n	80021c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	f000 bde2 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 80021c8:	2302      	movs	r3, #2
 80021ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d102      	bne.n	80021f8 <HAL_RCC_OscConfig+0x4d8>
 80021f2:	4b45      	ldr	r3, [pc, #276]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	e013      	b.n	8002220 <HAL_RCC_OscConfig+0x500>
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800220a:	2302      	movs	r3, #2
 800220c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002210:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	2202      	movs	r2, #2
 8002222:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002226:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800222a:	fa92 f2a2 	rbit	r2, r2
 800222e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002232:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f042 0220 	orr.w	r2, r2, #32
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f002 021f 	and.w	r2, r2, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0af      	beq.n	80021b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	21f8      	movs	r1, #248	; 0xf8
 8002268:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002270:	fa91 f1a1 	rbit	r1, r1
 8002274:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002278:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800227c:	fab1 f181 	clz	r1, r1
 8002280:	b2c9      	uxtb	r1, r1
 8002282:	408b      	lsls	r3, r1
 8002284:	4920      	ldr	r1, [pc, #128]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
 800228a:	e06c      	b.n	8002366 <HAL_RCC_OscConfig+0x646>
 800228c:	2301      	movs	r3, #1
 800228e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800229e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	461a      	mov	r2, r3
 80022b4:	2300      	movs	r3, #0
 80022b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe fdf6 	bl	8000ea8 <HAL_GetTick>
 80022bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c2:	f7fe fdf1 	bl	8000ea8 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d902      	bls.n	80022d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	f000 bd5a 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80022ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d104      	bne.n	800230c <HAL_RCC_OscConfig+0x5ec>
 8002302:	4b01      	ldr	r3, [pc, #4]	; (8002308 <HAL_RCC_OscConfig+0x5e8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	e015      	b.n	8002334 <HAL_RCC_OscConfig+0x614>
 8002308:	40021000 	.word	0x40021000
 800230c:	2302      	movs	r3, #2
 800230e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800231e:	2302      	movs	r3, #2
 8002320:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002324:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002330:	4bc8      	ldr	r3, [pc, #800]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	2202      	movs	r2, #2
 8002336:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800233a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800233e:	fa92 f2a2 	rbit	r2, r2
 8002342:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002346:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0220 	orr.w	r2, r2, #32
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1ad      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8110 	beq.w	800259c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d079      	beq.n	8002480 <HAL_RCC_OscConfig+0x760>
 800238c:	2301      	movs	r3, #1
 800238e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800239e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	4bab      	ldr	r3, [pc, #684]	; (8002658 <HAL_RCC_OscConfig+0x938>)
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	461a      	mov	r2, r3
 80023b2:	2301      	movs	r3, #1
 80023b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fd77 	bl	8000ea8 <HAL_GetTick>
 80023ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c0:	f7fe fd72 	bl	8000ea8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d902      	bls.n	80023d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	f000 bcdb 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 80023d6:	2302      	movs	r3, #2
 80023d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023f0:	2202      	movs	r2, #2
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002414:	2202      	movs	r2, #2
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800242e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002430:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 8002432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800243c:	2102      	movs	r1, #2
 800243e:	6019      	str	r1, [r3, #0]
 8002440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002444:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f1a3 	rbit	r1, r3
 800244e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002452:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002456:	6019      	str	r1, [r3, #0]
  return result;
 8002458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0a0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x6a0>
 800247e:	e08d      	b.n	800259c <HAL_RCC_OscConfig+0x87c>
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024a2:	601a      	str	r2, [r3, #0]
  return result;
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b68      	ldr	r3, [pc, #416]	; (8002658 <HAL_RCC_OscConfig+0x938>)
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	461a      	mov	r2, r3
 80024be:	2300      	movs	r3, #0
 80024c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe fcf1 	bl	8000ea8 <HAL_GetTick>
 80024c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024cc:	f7fe fcec 	bl	8000ea8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d902      	bls.n	80024e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	f000 bc55 	b.w	8002d8c <HAL_RCC_OscConfig+0x106c>
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024ea:	2202      	movs	r2, #2
 80024ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800250e:	2202      	movs	r2, #2
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	fa93 f2a3 	rbit	r2, r3
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002532:	2202      	movs	r2, #2
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800254c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254e:	4b41      	ldr	r3, [pc, #260]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 8002550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800255a:	2102      	movs	r1, #2
 800255c:	6019      	str	r1, [r3, #0]
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	fa93 f1a3 	rbit	r1, r3
 800256c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002570:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002574:	6019      	str	r1, [r3, #0]
  return result;
 8002576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d197      	bne.n	80024cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 81a1 	beq.w	80028f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b8:	4b26      	ldr	r3, [pc, #152]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d116      	bne.n	80025f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a22      	ldr	r2, [pc, #136]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_RCC_OscConfig+0x93c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11a      	bne.n	8002634 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <HAL_RCC_OscConfig+0x93c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a16      	ldr	r2, [pc, #88]	; (800265c <HAL_RCC_OscConfig+0x93c>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002608:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260a:	f7fe fc4d 	bl	8000ea8 <HAL_GetTick>
 800260e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	e009      	b.n	8002628 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002614:	f7fe fc48 	bl	8000ea8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b64      	cmp	r3, #100	; 0x64
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e3b1      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_RCC_OscConfig+0x93c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ef      	beq.n	8002614 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d10d      	bne.n	8002660 <HAL_RCC_OscConfig+0x940>
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a02      	ldr	r2, [pc, #8]	; (8002654 <HAL_RCC_OscConfig+0x934>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	e03c      	b.n	80026cc <HAL_RCC_OscConfig+0x9ac>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	10908120 	.word	0x10908120
 800265c:	40007000 	.word	0x40007000
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10c      	bne.n	800268a <HAL_RCC_OscConfig+0x96a>
 8002670:	4bc1      	ldr	r3, [pc, #772]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4ac0      	ldr	r2, [pc, #768]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	4bbe      	ldr	r3, [pc, #760]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4abd      	ldr	r2, [pc, #756]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	e020      	b.n	80026cc <HAL_RCC_OscConfig+0x9ac>
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b05      	cmp	r3, #5
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x994>
 800269a:	4bb7      	ldr	r3, [pc, #732]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4ab6      	ldr	r2, [pc, #728]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	6213      	str	r3, [r2, #32]
 80026a6:	4bb4      	ldr	r3, [pc, #720]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4ab3      	ldr	r2, [pc, #716]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0x9ac>
 80026b4:	4bb0      	ldr	r3, [pc, #704]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4aaf      	ldr	r2, [pc, #700]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	6213      	str	r3, [r2, #32]
 80026c0:	4bad      	ldr	r3, [pc, #692]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4aac      	ldr	r2, [pc, #688]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80026c6:	f023 0304 	bic.w	r3, r3, #4
 80026ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8081 	beq.w	80027e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7fe fbe3 	bl	8000ea8 <HAL_GetTick>
 80026e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7fe fbde 	bl	8000ea8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e345      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002708:	2202      	movs	r2, #2
 800270a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800272c:	2202      	movs	r2, #2
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002746:	601a      	str	r2, [r3, #0]
  return result;
 8002748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002750:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d102      	bne.n	800276c <HAL_RCC_OscConfig+0xa4c>
 8002766:	4b84      	ldr	r3, [pc, #528]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	e013      	b.n	8002794 <HAL_RCC_OscConfig+0xa74>
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002774:	2202      	movs	r2, #2
 8002776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f2a3 	rbit	r2, r3
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	4b79      	ldr	r3, [pc, #484]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002798:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800279c:	2102      	movs	r1, #2
 800279e:	6011      	str	r1, [r2, #0]
 80027a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	fa92 f1a2 	rbit	r1, r2
 80027ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027b6:	6011      	str	r1, [r2, #0]
  return result;
 80027b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	fab2 f282 	clz	r2, r2
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f002 021f 	and.w	r2, r2, #31
 80027d2:	2101      	movs	r1, #1
 80027d4:	fa01 f202 	lsl.w	r2, r1, r2
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d084      	beq.n	80026e8 <HAL_RCC_OscConfig+0x9c8>
 80027de:	e07f      	b.n	80028e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e0:	f7fe fb62 	bl	8000ea8 <HAL_GetTick>
 80027e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00b      	b.n	8002802 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe fb5d 	bl	8000ea8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e2c4      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800280a:	2202      	movs	r2, #2
 800280c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800282e:	2202      	movs	r2, #2
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	fa93 f2a3 	rbit	r2, r3
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002848:	601a      	str	r2, [r3, #0]
  return result;
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002852:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d102      	bne.n	800286e <HAL_RCC_OscConfig+0xb4e>
 8002868:	4b43      	ldr	r3, [pc, #268]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	e013      	b.n	8002896 <HAL_RCC_OscConfig+0xb76>
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002876:	2202      	movs	r2, #2
 8002878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fa93 f2a3 	rbit	r2, r3
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800289a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800289e:	2102      	movs	r1, #2
 80028a0:	6011      	str	r1, [r2, #0]
 80028a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	fa92 f1a2 	rbit	r1, r2
 80028b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028b8:	6011      	str	r1, [r2, #0]
  return result;
 80028ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	fab2 f282 	clz	r2, r2
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f002 021f 	and.w	r2, r2, #31
 80028d4:	2101      	movs	r1, #1
 80028d6:	fa01 f202 	lsl.w	r2, r1, r2
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d184      	bne.n	80027ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8242 	beq.w	8002d8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_RCC_OscConfig+0xc58>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	f000 8213 	beq.w	8002d3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b02      	cmp	r3, #2
 8002922:	f040 8162 	bne.w	8002bea <HAL_RCC_OscConfig+0xeca>
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800292e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800294a:	601a      	str	r2, [r3, #0]
  return result;
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002954:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002960:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	461a      	mov	r2, r3
 8002968:	2300      	movs	r3, #0
 800296a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe fa9c 	bl	8000ea8 <HAL_GetTick>
 8002970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002974:	e00c      	b.n	8002990 <HAL_RCC_OscConfig+0xc70>
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe fa94 	bl	8000ea8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1fd      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002998:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800299c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029b4:	601a      	str	r2, [r3, #0]
  return result;
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d102      	bne.n	80029da <HAL_RCC_OscConfig+0xcba>
 80029d4:	4bb0      	ldr	r3, [pc, #704]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	e027      	b.n	8002a2a <HAL_RCC_OscConfig+0xd0a>
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fa93 f2a3 	rbit	r2, r3
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fa93 f2a3 	rbit	r2, r3
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	4b9c      	ldr	r3, [pc, #624]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a36:	6011      	str	r1, [r2, #0]
 8002a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a3c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	fa92 f1a2 	rbit	r1, r2
 8002a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a4e:	6011      	str	r1, [r2, #0]
  return result;
 8002a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f002 021f 	and.w	r2, r2, #31
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d182      	bne.n	800297c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	430b      	orrs	r3, r1
 8002a98:	497f      	ldr	r1, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	fa93 f2a3 	rbit	r2, r3
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ac2:	601a      	str	r2, [r3, #0]
  return result;
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002acc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe f9e0 	bl	8000ea8 <HAL_GetTick>
 8002ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aec:	e009      	b.n	8002b02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe f9db 	bl	8000ea8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e144      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f2a3 	rbit	r2, r3
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b26:	601a      	str	r2, [r3, #0]
  return result;
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d102      	bne.n	8002b4c <HAL_RCC_OscConfig+0xe2c>
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e027      	b.n	8002b9c <HAL_RCC_OscConfig+0xe7c>
 8002b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ba4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ba8:	6011      	str	r1, [r2, #0]
 8002baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	fa92 f1a2 	rbit	r1, r2
 8002bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bbc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bc0:	6011      	str	r1, [r2, #0]
  return result;
 8002bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	fab2 f282 	clz	r2, r2
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	f042 0220 	orr.w	r2, r2, #32
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f002 021f 	and.w	r2, r2, #31
 8002bdc:	2101      	movs	r1, #1
 8002bde:	fa01 f202 	lsl.w	r2, r1, r2
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d082      	beq.n	8002aee <HAL_RCC_OscConfig+0xdce>
 8002be8:	e0cf      	b.n	8002d8a <HAL_RCC_OscConfig+0x106a>
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c0e:	601a      	str	r2, [r3, #0]
  return result;
 8002c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe f93a 	bl	8000ea8 <HAL_GetTick>
 8002c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c38:	e009      	b.n	8002c4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe f935 	bl	8000ea8 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e09e      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f2a3 	rbit	r2, r3
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c72:	601a      	str	r2, [r3, #0]
  return result;
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d104      	bne.n	8002c9c <HAL_RCC_OscConfig+0xf7c>
 8002c92:	4b01      	ldr	r3, [pc, #4]	; (8002c98 <HAL_RCC_OscConfig+0xf78>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e029      	b.n	8002cec <HAL_RCC_OscConfig+0xfcc>
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	fa93 f2a3 	rbit	r2, r3
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	fa93 f2a3 	rbit	r2, r3
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <HAL_RCC_OscConfig+0x1078>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cf8:	6011      	str	r1, [r2, #0]
 8002cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cfe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	fa92 f1a2 	rbit	r1, r2
 8002d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d10:	6011      	str	r1, [r2, #0]
  return result;
 8002d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f042 0220 	orr.w	r2, r2, #32
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d180      	bne.n	8002c3a <HAL_RCC_OscConfig+0xf1a>
 8002d38:	e027      	b.n	8002d8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e01e      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_RCC_OscConfig+0x1078>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000

08002d9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b09e      	sub	sp, #120	; 0x78
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e162      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b90      	ldr	r3, [pc, #576]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 0207 	bic.w	r2, r3, #7
 8002dca:	498b      	ldr	r1, [pc, #556]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b89      	ldr	r3, [pc, #548]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e14a      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df0:	4b82      	ldr	r3, [pc, #520]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	497f      	ldr	r1, [pc, #508]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80dc 	beq.w	8002fc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d13c      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xf6>
 8002e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xa6>
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	e00f      	b.n	8002e62 <HAL_RCC_ClockConfig+0xc6>
 8002e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e54:	663b      	str	r3, [r7, #96]	; 0x60
 8002e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e66:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e6a:	fa92 f2a2 	rbit	r2, r2
 8002e6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f042 0220 	orr.w	r2, r2, #32
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f002 021f 	and.w	r2, r2, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d17b      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0f3      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d13c      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x178>
 8002e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d102      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x128>
 8002ebe:	4b4f      	ldr	r3, [pc, #316]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	e00f      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x148>
 8002ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee0:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eec:	fa92 f2a2 	rbit	r2, r2
 8002ef0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f042 0220 	orr.w	r2, r2, #32
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f002 021f 	and.w	r2, r2, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d13a      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0b2      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
 8002f14:	2302      	movs	r3, #2
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d102      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x1a0>
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	e00d      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1bc>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	2302      	movs	r3, #2
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2202      	movs	r2, #2
 8002f5a:	61ba      	str	r2, [r7, #24]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	fa92 f2a2 	rbit	r2, r2
 8002f62:	617a      	str	r2, [r7, #20]
  return result;
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	fab2 f282 	clz	r2, r2
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f042 0220 	orr.w	r2, r2, #32
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f002 021f 	and.w	r2, r2, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e079      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	491a      	ldr	r1, [pc, #104]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f98:	f7fd ff86 	bl	8000ea8 <HAL_GetTick>
 8002f9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fd ff82 	bl	8000ea8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e061      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_RCC_ClockConfig+0x260>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 020c 	and.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1eb      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d214      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 0207 	bic.w	r2, r3, #7
 8002fde:	4906      	ldr	r1, [pc, #24]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <HAL_RCC_ClockConfig+0x25c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e040      	b.n	800307a <HAL_RCC_ClockConfig+0x2de>
 8002ff8:	40022000 	.word	0x40022000
 8002ffc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_RCC_ClockConfig+0x2e8>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	491a      	ldr	r1, [pc, #104]	; (8003084 <HAL_RCC_ClockConfig+0x2e8>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <HAL_RCC_ClockConfig+0x2e8>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4912      	ldr	r1, [pc, #72]	; (8003084 <HAL_RCC_ClockConfig+0x2e8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800303e:	f000 f829 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 8003042:	4601      	mov	r1, r0
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_RCC_ClockConfig+0x2e8>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304c:	22f0      	movs	r2, #240	; 0xf0
 800304e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	fa92 f2a2 	rbit	r2, r2
 8003056:	60fa      	str	r2, [r7, #12]
  return result;
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	fab2 f282 	clz	r2, r2
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	40d3      	lsrs	r3, r2
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x2ec>)
 8003064:	5cd3      	ldrb	r3, [r2, r3]
 8003066:	fa21 f303 	lsr.w	r3, r1, r3
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_RCC_ClockConfig+0x2f0>)
 800306c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_RCC_ClockConfig+0x2f4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fed4 	bl	8000e20 <HAL_InitTick>
  
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3778      	adds	r7, #120	; 0x78
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	08003b14 	.word	0x08003b14
 800308c:	20000004 	.word	0x20000004
 8003090:	20000008 	.word	0x20000008

08003094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <HAL_RCC_GetSysClockFreq+0x94>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d002      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x30>
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d003      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x36>
 80030c2:	e026      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCC_GetSysClockFreq+0x98>)
 80030c6:	613b      	str	r3, [r7, #16]
      break;
 80030c8:	e026      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	0c9b      	lsrs	r3, r3, #18
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030d4:	5cd3      	ldrb	r3, [r2, r3]
 80030d6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_RCC_GetSysClockFreq+0x94>)
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	4a14      	ldr	r2, [pc, #80]	; (8003134 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030f0:	4a0e      	ldr	r2, [pc, #56]	; (800312c <HAL_RCC_GetSysClockFreq+0x98>)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	e004      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	613b      	str	r3, [r7, #16]
      break;
 8003110:	e002      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_GetSysClockFreq+0x98>)
 8003114:	613b      	str	r3, [r7, #16]
      break;
 8003116:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003118:	693b      	ldr	r3, [r7, #16]
}
 800311a:	4618      	mov	r0, r3
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	007a1200 	.word	0x007a1200
 8003130:	08003b24 	.word	0x08003b24
 8003134:	08003b34 	.word	0x08003b34
 8003138:	003d0900 	.word	0x003d0900

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b092      	sub	sp, #72	; 0x48
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80d4 	beq.w	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003178:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10e      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003184:	4b4b      	ldr	r3, [pc, #300]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	4a4a      	ldr	r2, [pc, #296]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318e:	61d3      	str	r3, [r2, #28]
 8003190:	4b48      	ldr	r3, [pc, #288]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a2:	4b45      	ldr	r3, [pc, #276]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d118      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ae:	4b42      	ldr	r3, [pc, #264]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ba:	f7fd fe75 	bl	8000ea8 <HAL_GetTick>
 80031be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	e008      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c2:	f7fd fe71 	bl	8000ea8 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b64      	cmp	r3, #100	; 0x64
 80031ce:	d901      	bls.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e14b      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d4:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031e0:	4b34      	ldr	r3, [pc, #208]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8084 	beq.w	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d07c      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003200:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800320a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800320e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	461a      	mov	r2, r3
 800322a:	2301      	movs	r3, #1
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003232:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800323c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	461a      	mov	r2, r3
 800324e:	2300      	movs	r3, #0
 8003250:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003256:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d04b      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fd fe21 	bl	8000ea8 <HAL_GetTick>
 8003266:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fd fe1d 	bl	8000ea8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0f5      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003280:	2302      	movs	r3, #2
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
 800328c:	2302      	movs	r3, #2
 800328e:	623b      	str	r3, [r7, #32]
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	61fb      	str	r3, [r7, #28]
  return result;
 8003298:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d108      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032ae:	4b01      	ldr	r3, [pc, #4]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	e00d      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40007000 	.word	0x40007000
 80032bc:	10908100 	.word	0x10908100
 80032c0:	2302      	movs	r3, #2
 80032c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	4b69      	ldr	r3, [pc, #420]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2202      	movs	r2, #2
 80032d2:	613a      	str	r2, [r7, #16]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	fa92 f2a2 	rbit	r2, r2
 80032da:	60fa      	str	r2, [r7, #12]
  return result;
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	fab2 f282 	clz	r2, r2
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	f002 021f 	and.w	r2, r2, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f202 	lsl.w	r2, r1, r2
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0b7      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032fa:	4b5e      	ldr	r3, [pc, #376]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	495b      	ldr	r1, [pc, #364]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003308:	4313      	orrs	r3, r2
 800330a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800330c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4b57      	ldr	r3, [pc, #348]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	4a56      	ldr	r2, [pc, #344]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800331a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800332c:	4b51      	ldr	r3, [pc, #324]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f023 0203 	bic.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	494e      	ldr	r1, [pc, #312]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800333a:	4313      	orrs	r3, r2
 800333c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800334a:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f023 0210 	bic.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4947      	ldr	r1, [pc, #284]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003358:	4313      	orrs	r3, r2
 800335a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003368:	4b42      	ldr	r3, [pc, #264]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	493f      	ldr	r1, [pc, #252]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f023 0220 	bic.w	r2, r3, #32
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	4938      	ldr	r1, [pc, #224]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003394:	4313      	orrs	r3, r2
 8003396:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033a4:	4b33      	ldr	r3, [pc, #204]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	4930      	ldr	r1, [pc, #192]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033c2:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	4929      	ldr	r1, [pc, #164]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80033e0:	4b24      	ldr	r3, [pc, #144]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4921      	ldr	r1, [pc, #132]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	491a      	ldr	r1, [pc, #104]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800340c:	4313      	orrs	r3, r2
 800340e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800341c:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	4912      	ldr	r1, [pc, #72]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800342a:	4313      	orrs	r3, r2
 800342c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800343a:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	490b      	ldr	r1, [pc, #44]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003448:	4313      	orrs	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	4903      	ldr	r1, [pc, #12]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003466:	4313      	orrs	r3, r2
 8003468:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3748      	adds	r7, #72	; 0x48
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000

08003478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e049      	b.n	800351e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fc06 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f000 f972 	bl	80037a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d001      	beq.n	8003540 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e033      	b.n	80035a8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <HAL_TIM_Base_Start+0x8c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_TIM_Base_Start+0x3e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355a:	d004      	beq.n	8003566 <HAL_TIM_Base_Start+0x3e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <HAL_TIM_Base_Start+0x90>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d115      	bne.n	8003592 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_TIM_Base_Start+0x94>)
 800356e:	4013      	ands	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b06      	cmp	r3, #6
 8003576:	d015      	beq.n	80035a4 <HAL_TIM_Base_Start+0x7c>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357e:	d011      	beq.n	80035a4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003590:	e008      	b.n	80035a4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e000      	b.n	80035a6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40014000 	.word	0x40014000
 80035bc:	00010007 	.word	0x00010007

080035c0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a1a      	ldr	r2, [r3, #32]
 80035ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10f      	bne.n	80035f8 <HAL_TIM_Base_Stop+0x38>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	f240 4344 	movw	r3, #1092	; 0x444
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_Base_Stop+0x38>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_TIM_ConfigClockSource+0x1c>
 8003626:	2302      	movs	r3, #2
 8003628:	e0b6      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x18a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003648:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800364c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003654:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003666:	d03e      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0xd8>
 8003668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366c:	f200 8087 	bhi.w	800377e <HAL_TIM_ConfigClockSource+0x170>
 8003670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003674:	f000 8086 	beq.w	8003784 <HAL_TIM_ConfigClockSource+0x176>
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367c:	d87f      	bhi.n	800377e <HAL_TIM_ConfigClockSource+0x170>
 800367e:	2b70      	cmp	r3, #112	; 0x70
 8003680:	d01a      	beq.n	80036b8 <HAL_TIM_ConfigClockSource+0xaa>
 8003682:	2b70      	cmp	r3, #112	; 0x70
 8003684:	d87b      	bhi.n	800377e <HAL_TIM_ConfigClockSource+0x170>
 8003686:	2b60      	cmp	r3, #96	; 0x60
 8003688:	d050      	beq.n	800372c <HAL_TIM_ConfigClockSource+0x11e>
 800368a:	2b60      	cmp	r3, #96	; 0x60
 800368c:	d877      	bhi.n	800377e <HAL_TIM_ConfigClockSource+0x170>
 800368e:	2b50      	cmp	r3, #80	; 0x50
 8003690:	d03c      	beq.n	800370c <HAL_TIM_ConfigClockSource+0xfe>
 8003692:	2b50      	cmp	r3, #80	; 0x50
 8003694:	d873      	bhi.n	800377e <HAL_TIM_ConfigClockSource+0x170>
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d058      	beq.n	800374c <HAL_TIM_ConfigClockSource+0x13e>
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d86f      	bhi.n	800377e <HAL_TIM_ConfigClockSource+0x170>
 800369e:	2b30      	cmp	r3, #48	; 0x30
 80036a0:	d064      	beq.n	800376c <HAL_TIM_ConfigClockSource+0x15e>
 80036a2:	2b30      	cmp	r3, #48	; 0x30
 80036a4:	d86b      	bhi.n	800377e <HAL_TIM_ConfigClockSource+0x170>
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d060      	beq.n	800376c <HAL_TIM_ConfigClockSource+0x15e>
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d867      	bhi.n	800377e <HAL_TIM_ConfigClockSource+0x170>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d05c      	beq.n	800376c <HAL_TIM_ConfigClockSource+0x15e>
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d05a      	beq.n	800376c <HAL_TIM_ConfigClockSource+0x15e>
 80036b6:	e062      	b.n	800377e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f000 f95e 	bl	8003988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	609a      	str	r2, [r3, #8]
      break;
 80036e4:	e04f      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6899      	ldr	r1, [r3, #8]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f000 f947 	bl	8003988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003708:	609a      	str	r2, [r3, #8]
      break;
 800370a:	e03c      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	461a      	mov	r2, r3
 800371a:	f000 f8bb 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2150      	movs	r1, #80	; 0x50
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f914 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 800372a:	e02c      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	461a      	mov	r2, r3
 800373a:	f000 f8da 	bl	80038f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2160      	movs	r1, #96	; 0x60
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f904 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 800374a:	e01c      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	461a      	mov	r2, r3
 800375a:	f000 f89b 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f8f4 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 800376a:	e00c      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f000 f8eb 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 800377c:	e003      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      break;
 8003782:	e000      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003784:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a34      	ldr	r2, [pc, #208]	; (8003884 <TIM_Base_SetConfig+0xe4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0x20>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037be:	d108      	bne.n	80037d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2b      	ldr	r2, [pc, #172]	; (8003884 <TIM_Base_SetConfig+0xe4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00f      	beq.n	80037fa <TIM_Base_SetConfig+0x5a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d00b      	beq.n	80037fa <TIM_Base_SetConfig+0x5a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a28      	ldr	r2, [pc, #160]	; (8003888 <TIM_Base_SetConfig+0xe8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_Base_SetConfig+0x5a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a27      	ldr	r2, [pc, #156]	; (800388c <TIM_Base_SetConfig+0xec>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_Base_SetConfig+0x5a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a26      	ldr	r2, [pc, #152]	; (8003890 <TIM_Base_SetConfig+0xf0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d108      	bne.n	800380c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a14      	ldr	r2, [pc, #80]	; (8003884 <TIM_Base_SetConfig+0xe4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00b      	beq.n	8003850 <TIM_Base_SetConfig+0xb0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a13      	ldr	r2, [pc, #76]	; (8003888 <TIM_Base_SetConfig+0xe8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d007      	beq.n	8003850 <TIM_Base_SetConfig+0xb0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a12      	ldr	r2, [pc, #72]	; (800388c <TIM_Base_SetConfig+0xec>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_Base_SetConfig+0xb0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a11      	ldr	r2, [pc, #68]	; (8003890 <TIM_Base_SetConfig+0xf0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d103      	bne.n	8003858 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d105      	bne.n	8003876 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f023 0201 	bic.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	611a      	str	r2, [r3, #16]
  }
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40012c00 	.word	0x40012c00
 8003888:	40014000 	.word	0x40014000
 800388c:	40014400 	.word	0x40014400
 8003890:	40014800 	.word	0x40014800

08003894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 030a 	bic.w	r3, r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b087      	sub	sp, #28
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f023 0210 	bic.w	r2, r3, #16
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800391c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	031b      	lsls	r3, r3, #12
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800392e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	f043 0307 	orr.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	021a      	lsls	r2, r3, #8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	609a      	str	r2, [r3, #8]
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039dc:	2302      	movs	r3, #2
 80039de:	e04f      	b.n	8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d108      	bne.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d009      	beq.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d004      	beq.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d10c      	bne.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40014000 	.word	0x40014000

08003a94 <__libc_init_array>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	4d0d      	ldr	r5, [pc, #52]	; (8003acc <__libc_init_array+0x38>)
 8003a98:	4c0d      	ldr	r4, [pc, #52]	; (8003ad0 <__libc_init_array+0x3c>)
 8003a9a:	1b64      	subs	r4, r4, r5
 8003a9c:	10a4      	asrs	r4, r4, #2
 8003a9e:	2600      	movs	r6, #0
 8003aa0:	42a6      	cmp	r6, r4
 8003aa2:	d109      	bne.n	8003ab8 <__libc_init_array+0x24>
 8003aa4:	4d0b      	ldr	r5, [pc, #44]	; (8003ad4 <__libc_init_array+0x40>)
 8003aa6:	4c0c      	ldr	r4, [pc, #48]	; (8003ad8 <__libc_init_array+0x44>)
 8003aa8:	f000 f820 	bl	8003aec <_init>
 8003aac:	1b64      	subs	r4, r4, r5
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	2600      	movs	r6, #0
 8003ab2:	42a6      	cmp	r6, r4
 8003ab4:	d105      	bne.n	8003ac2 <__libc_init_array+0x2e>
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003abc:	4798      	blx	r3
 8003abe:	3601      	adds	r6, #1
 8003ac0:	e7ee      	b.n	8003aa0 <__libc_init_array+0xc>
 8003ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac6:	4798      	blx	r3
 8003ac8:	3601      	adds	r6, #1
 8003aca:	e7f2      	b.n	8003ab2 <__libc_init_array+0x1e>
 8003acc:	08003b44 	.word	0x08003b44
 8003ad0:	08003b44 	.word	0x08003b44
 8003ad4:	08003b44 	.word	0x08003b44
 8003ad8:	08003b48 	.word	0x08003b48

08003adc <memset>:
 8003adc:	4402      	add	r2, r0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <memset+0xa>
 8003ae4:	4770      	bx	lr
 8003ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aea:	e7f9      	b.n	8003ae0 <memset+0x4>

08003aec <_init>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	bf00      	nop
 8003af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af2:	bc08      	pop	{r3}
 8003af4:	469e      	mov	lr, r3
 8003af6:	4770      	bx	lr

08003af8 <_fini>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr

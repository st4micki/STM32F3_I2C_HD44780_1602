
lcd_i2c_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000398c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b58  08003b58  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003b58  08003b58  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b58  08003b58  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000018  08003b78  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003b78  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dac5  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d52  00000000  00000000  0002db0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00030580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b949  00000000  00000000  000311b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010157  00000000  00000000  0004cb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a326e  00000000  00000000  0005cc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003738  00000000  00000000  000fff18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003afc 	.word	0x08003afc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003afc 	.word	0x08003afc

080001c8 <_LCD_delay_us_init>:
typedef enum {FALSE, TRUE} bool;


bool LCD_delay_us_first_call = TRUE;

void _LCD_delay_us_init(TIM_HandleTypeDef *htim){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	//this function initializes user defined timer
	//calling this function during LCD_Init() lets _LCD_Delay_us() generate accurate delays
	uint32_t apb_freq = HAL_RCC_GetHCLKFreq(); //fetch HCLK frequency. It appears that delays work the same no matter what APB bus the timer is connected to.
 80001d0:	f002 ffe2 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 80001d4:	60f8      	str	r0, [r7, #12]
	uint16_t new_prescaler = (uint16_t)(apb_freq/1000000); //timer prescaler is set so every increment of CNT take 1 microsecond
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	4a12      	ldr	r2, [pc, #72]	; (8000224 <_LCD_delay_us_init+0x5c>)
 80001da:	fba2 2303 	umull	r2, r3, r2, r3
 80001de:	0c9b      	lsrs	r3, r3, #18
 80001e0:	817b      	strh	r3, [r7, #10]
	htim->Instance->PSC = new_prescaler - 1;
 80001e2:	897b      	ldrh	r3, [r7, #10]
 80001e4:	1e5a      	subs	r2, r3, #1
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	629a      	str	r2, [r3, #40]	; 0x28
	htim->Instance->ARR = 0xFFFF - 1;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80001f4:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CNT = 0; //just to be sure that timer starts counting from 0,  CNT is reseted here
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2200      	movs	r2, #0
 80001fc:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(htim);
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f003 f9c0 	bl	8003584 <HAL_TIM_Base_Start>
	while(htim->Instance->CNT < US_BETWEEN_COMMANDS){} //while is blocking until right ammonunt of time elapses
 8000204:	bf00      	nop
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800020c:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8000210:	d3f9      	bcc.n	8000206 <_LCD_delay_us_init+0x3e>
	htim->Instance->CNT = 0;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2200      	movs	r2, #0
 8000218:	625a      	str	r2, [r3, #36]	; 0x24

}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	431bde83 	.word	0x431bde83

08000228 <_LCD_delay_us>:

void _LCD_delay_us(uint32_t us, TIM_HandleTypeDef *htim){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	//this a blocking delay funcions that generates delays measured in microseconds
	uint32_t apb_freq = HAL_RCC_GetHCLKFreq();
 8000232:	f002 ffb1 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 8000236:	60f8      	str	r0, [r7, #12]
	uint16_t new_prescaler = (uint16_t)(apb_freq/1000000); //timer prescaler is set so every increment of CNT take 1 microsecond
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	4a0f      	ldr	r2, [pc, #60]	; (8000278 <_LCD_delay_us+0x50>)
 800023c:	fba2 2303 	umull	r2, r3, r2, r3
 8000240:	0c9b      	lsrs	r3, r3, #18
 8000242:	817b      	strh	r3, [r7, #10]
	htim->Instance->PSC = new_prescaler - 1;
 8000244:	897b      	ldrh	r3, [r7, #10]
 8000246:	1e5a      	subs	r2, r3, #1
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	629a      	str	r2, [r3, #40]	; 0x28
	htim->Instance->ARR = 0xFFFF - 1;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000256:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CNT = 0;
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2200      	movs	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim->Instance->CNT < us){}
 8000260:	bf00      	nop
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	429a      	cmp	r2, r3
 800026c:	d8f9      	bhi.n	8000262 <_LCD_delay_us+0x3a>

}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	3710      	adds	r7, #16
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	431bde83 	.word	0x431bde83

0800027c <_LCD_get_young_bits>:


uint8_t _LCD_get_young_bits(uint8_t data){
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
	//shifts data's bits to the right by 4 places and masks 4 most significant bits
	data <<= 4;
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	011b      	lsls	r3, r3, #4
 800028a:	71fb      	strb	r3, [r7, #7]
	data &= 0xF0;
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	f023 030f 	bic.w	r3, r3, #15
 8000292:	71fb      	strb	r3, [r7, #7]
	return data;
 8000294:	79fb      	ldrb	r3, [r7, #7]

}
 8000296:	4618      	mov	r0, r3
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <_LCD_get_old_bits>:


uint8_t _LCD_get_old_bits(uint8_t data){
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	4603      	mov	r3, r0
 80002aa:	71fb      	strb	r3, [r7, #7]
	//masks 4 most significant bits, clears 4 less significant bits
	return data & 0xF0;
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	f023 030f 	bic.w	r3, r3, #15
 80002b2:	b2db      	uxtb	r3, r3
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <_LCD_send_command>:

void _LCD_send_command(LCD_HandleTypeDef* lcd,  uint8_t command){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af02      	add	r7, sp, #8
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
	//sends 8-bit command to the display. Command is split into two 4 bit commands.
	//every 4-bit command has to be sent with E_pin enabled and later disabled
	I2C_HandleTypeDef* hi2c = lcd->hi2c;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	617b      	str	r3, [r7, #20]
	uint8_t address = lcd->i2c_address;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	7a1b      	ldrb	r3, [r3, #8]
 80002d6:	74fb      	strb	r3, [r7, #19]
	uint8_t send[4] = {
		_LCD_get_old_bits(command) | E_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to high
 80002d8:	78fb      	ldrb	r3, [r7, #3]
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ffe1 	bl	80002a2 <_LCD_get_old_bits>
 80002e0:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80002e2:	f043 030c 	orr.w	r3, r3, #12
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	733b      	strb	r3, [r7, #12]
		_LCD_get_old_bits(command) | BACKLIGHT_ON, // older half of the command byte with E pin set to low
 80002ea:	78fb      	ldrb	r3, [r7, #3]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ffd8 	bl	80002a2 <_LCD_get_old_bits>
 80002f2:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80002f4:	f043 0308 	orr.w	r3, r3, #8
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	737b      	strb	r3, [r7, #13]
		_LCD_get_young_bits(command) | E_PIN_MASK | BACKLIGHT_ON, // younger half of the command byte with E pin set to high
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ffbc 	bl	800027c <_LCD_get_young_bits>
 8000304:	4603      	mov	r3, r0
	uint8_t send[4] = {
 8000306:	f043 030c 	orr.w	r3, r3, #12
 800030a:	b2db      	uxtb	r3, r3
 800030c:	73bb      	strb	r3, [r7, #14]
		_LCD_get_young_bits(command) | BACKLIGHT_ON}; // younger half of the command byte with E pin set to low
 800030e:	78fb      	ldrb	r3, [r7, #3]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffb3 	bl	800027c <_LCD_get_young_bits>
 8000316:	4603      	mov	r3, r0
	uint8_t send[4] = {
 8000318:	f043 0308 	orr.w	r3, r3, #8
 800031c:	b2db      	uxtb	r3, r3
 800031e:	73fb      	strb	r3, [r7, #15]
	uint16_t send_size = sizeof(send);
 8000320:	2304      	movs	r3, #4
 8000322:	823b      	strh	r3, [r7, #16]
	HAL_I2C_Master_Transmit(hi2c, address, send, send_size, 100); //data is transmitted through I2C interface using HAL library function
 8000324:	7cfb      	ldrb	r3, [r7, #19]
 8000326:	b299      	uxth	r1, r3
 8000328:	8a3b      	ldrh	r3, [r7, #16]
 800032a:	f107 020c 	add.w	r2, r7, #12
 800032e:	2064      	movs	r0, #100	; 0x64
 8000330:	9000      	str	r0, [sp, #0]
 8000332:	6978      	ldr	r0, [r7, #20]
 8000334:	f001 f958 	bl	80015e8 <HAL_I2C_Master_Transmit>
}
 8000338:	bf00      	nop
 800033a:	3718      	adds	r7, #24
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <_LCD_startup>:

void _LCD_startup(LCD_HandleTypeDef* lcd){
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af02      	add	r7, sp, #8
 8000346:	6078      	str	r0, [r7, #4]
	/*Initializing display by instruction. According to HD44780's data sheet "If the power supply conditions for correctly operating the internal reset circuit are not met, initialization by
	instructions becomes necessary" this is done just in case*/
	TIM_HandleTypeDef* htim = lcd->htim;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	617b      	str	r3, [r7, #20]
	I2C_HandleTypeDef* hi2c = lcd->hi2c;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	613b      	str	r3, [r7, #16]
	uint8_t send[2] = {
 8000354:	f643 033c 	movw	r3, #14396	; 0x383c
 8000358:	81bb      	strh	r3, [r7, #12]
			STARTUP | E_PIN_MASK | BACKLIGHT_ON,
			STARTUP | BACKLIGHT_ON
	};
	_LCD_delay_us(16000, htim);
 800035a:	6979      	ldr	r1, [r7, #20]
 800035c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000360:	f7ff ff62 	bl	8000228 <_LCD_delay_us>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 8000364:	f107 020c 	add.w	r2, r7, #12
 8000368:	2364      	movs	r3, #100	; 0x64
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2302      	movs	r3, #2
 800036e:	214e      	movs	r1, #78	; 0x4e
 8000370:	6938      	ldr	r0, [r7, #16]
 8000372:	f001 f939 	bl	80015e8 <HAL_I2C_Master_Transmit>
	_LCD_delay_us(4100, htim);
 8000376:	6979      	ldr	r1, [r7, #20]
 8000378:	f241 0004 	movw	r0, #4100	; 0x1004
 800037c:	f7ff ff54 	bl	8000228 <_LCD_delay_us>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 8000380:	f107 020c 	add.w	r2, r7, #12
 8000384:	2364      	movs	r3, #100	; 0x64
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2302      	movs	r3, #2
 800038a:	214e      	movs	r1, #78	; 0x4e
 800038c:	6938      	ldr	r0, [r7, #16]
 800038e:	f001 f92b 	bl	80015e8 <HAL_I2C_Master_Transmit>
	_LCD_delay_us(110, htim);
 8000392:	6979      	ldr	r1, [r7, #20]
 8000394:	206e      	movs	r0, #110	; 0x6e
 8000396:	f7ff ff47 	bl	8000228 <_LCD_delay_us>
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS, send, 2, 100);
 800039a:	f107 020c 	add.w	r2, r7, #12
 800039e:	2364      	movs	r3, #100	; 0x64
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	2302      	movs	r3, #2
 80003a4:	214e      	movs	r1, #78	; 0x4e
 80003a6:	6938      	ldr	r0, [r7, #16]
 80003a8:	f001 f91e 	bl	80015e8 <HAL_I2C_Master_Transmit>


}
 80003ac:	bf00      	nop
 80003ae:	3718      	adds	r7, #24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <_LCD_set_4_bits>:

void _LCD_set_4_bits(LCD_HandleTypeDef* lcd){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af02      	add	r7, sp, #8
 80003ba:	6078      	str	r0, [r7, #4]
	//sets a mode that lets the display take 4-bit commands by sending 8-bit command first
	I2C_HandleTypeDef* hi2c = lcd->hi2c;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	60fb      	str	r3, [r7, #12]
	uint8_t num_of_lines = lcd->num_of_rows;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	7adb      	ldrb	r3, [r3, #11]
 80003c6:	72fb      	strb	r3, [r7, #11]
	uint8_t data[2] = {
 80003c8:	f642 032c 	movw	r3, #10284	; 0x282c
 80003cc:	813b      	strh	r3, [r7, #8]
			FUNCTION_SET_4_BIT_MODE | E_PIN_MASK | BACKLIGHT_ON,
			FUNCTION_SET_4_BIT_MODE | BACKLIGHT_ON};
	HAL_I2C_Master_Transmit(hi2c, MODULE_ADDRESS , data, 2, 100);
 80003ce:	f107 0208 	add.w	r2, r7, #8
 80003d2:	2364      	movs	r3, #100	; 0x64
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	2302      	movs	r3, #2
 80003d8:	214e      	movs	r1, #78	; 0x4e
 80003da:	68f8      	ldr	r0, [r7, #12]
 80003dc:	f001 f904 	bl	80015e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 fda5 	bl	8000f30 <HAL_Delay>
	if(num_of_lines == 2)
 80003e6:	7afb      	ldrb	r3, [r7, #11]
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	d103      	bne.n	80003f4 <_LCD_set_4_bits+0x40>
		// it is possible to 2 lines of text on the display command is sent with special mask
		_LCD_send_command(lcd, FUNCTION_SET_4_BIT_MODE | TWO_LINES_ENABLE);
 80003ec:	2128      	movs	r1, #40	; 0x28
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff ff66 	bl	80002c0 <_LCD_send_command>
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <LCD_init>:

void LCD_init(LCD_HandleTypeDef* lcd){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	//initializes lcd using LCD_HandleTypeDef
	TIM_HandleTypeDef* htim = lcd->htim;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	60fb      	str	r3, [r7, #12]
	_LCD_delay_us_init(htim);
 800040a:	68f8      	ldr	r0, [r7, #12]
 800040c:	f7ff fedc 	bl	80001c8 <_LCD_delay_us_init>
	_LCD_startup(lcd);
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f7ff ff95 	bl	8000340 <_LCD_startup>
	_LCD_delay_us(US_BETWEEN_COMMANDS, htim);
 8000416:	68f9      	ldr	r1, [r7, #12]
 8000418:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800041c:	f7ff ff04 	bl	8000228 <_LCD_delay_us>
	_LCD_set_4_bits(lcd);
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f7ff ffc7 	bl	80003b4 <_LCD_set_4_bits>
	_LCD_delay_us(US_BETWEEN_COMMANDS, htim);
 8000426:	68f9      	ldr	r1, [r7, #12]
 8000428:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800042c:	f7ff fefc 	bl	8000228 <_LCD_delay_us>
	_LCD_send_command(lcd, DISPLAY_OFF);
 8000430:	2108      	movs	r1, #8
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ff44 	bl	80002c0 <_LCD_send_command>
	_LCD_delay_us(US_BETWEEN_COMMANDS, htim);
 8000438:	68f9      	ldr	r1, [r7, #12]
 800043a:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800043e:	f7ff fef3 	bl	8000228 <_LCD_delay_us>
	_LCD_send_command(lcd, CLEAR_DISPLAY);
 8000442:	2101      	movs	r1, #1
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff3b 	bl	80002c0 <_LCD_send_command>
	_LCD_delay_us(US_BETWEEN_COMMANDS, htim);
 800044a:	68f9      	ldr	r1, [r7, #12]
 800044c:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8000450:	f7ff feea 	bl	8000228 <_LCD_delay_us>
	_LCD_send_command(lcd, INCREMENT_NO_SHIFT);
 8000454:	2106      	movs	r1, #6
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff ff32 	bl	80002c0 <_LCD_send_command>
	_LCD_delay_us(US_BETWEEN_COMMANDS, htim);
 800045c:	68f9      	ldr	r1, [r7, #12]
 800045e:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8000462:	f7ff fee1 	bl	8000228 <_LCD_delay_us>
	_LCD_send_command(lcd, 0x0C);
 8000466:	210c      	movs	r1, #12
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f7ff ff29 	bl	80002c0 <_LCD_send_command>
	_LCD_delay_us(US_BETWEEN_COMMANDS, htim);
 800046e:	68f9      	ldr	r1, [r7, #12]
 8000470:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8000474:	f7ff fed8 	bl	8000228 <_LCD_delay_us>

}
 8000478:	bf00      	nop
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <LCD_putchar>:

void LCD_putchar(LCD_HandleTypeDef* lcd, char data){
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af02      	add	r7, sp, #8
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	70fb      	strb	r3, [r7, #3]
	//prints a single character in cursors position
	I2C_HandleTypeDef* hi2c = lcd->hi2c;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	617b      	str	r3, [r7, #20]
	uint8_t address = lcd->i2c_address;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	7a1b      	ldrb	r3, [r3, #8]
 8000496:	74fb      	strb	r3, [r7, #19]
	uint8_t send[4] = {
			_LCD_get_old_bits((uint8_t)data) | E_PIN_MASK | RS_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to high
 8000498:	78fb      	ldrb	r3, [r7, #3]
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff01 	bl	80002a2 <_LCD_get_old_bits>
 80004a0:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80004a2:	f043 030d 	orr.w	r3, r3, #13
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	733b      	strb	r3, [r7, #12]
			_LCD_get_old_bits((uint8_t)data) | RS_PIN_MASK | BACKLIGHT_ON, // older half of the command byte with E pin set to low
 80004aa:	78fb      	ldrb	r3, [r7, #3]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fef8 	bl	80002a2 <_LCD_get_old_bits>
 80004b2:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80004b4:	f043 0309 	orr.w	r3, r3, #9
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	737b      	strb	r3, [r7, #13]
			_LCD_get_young_bits((uint8_t)data) | E_PIN_MASK | RS_PIN_MASK | BACKLIGHT_ON, // younger half of the command byte with E pin set to high
 80004bc:	78fb      	ldrb	r3, [r7, #3]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff fedc 	bl	800027c <_LCD_get_young_bits>
 80004c4:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80004c6:	f043 030d 	orr.w	r3, r3, #13
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	73bb      	strb	r3, [r7, #14]
			_LCD_get_young_bits((uint8_t)data) | RS_PIN_MASK | BACKLIGHT_ON}; // younger half of the command byte with E pin set to low
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff fed3 	bl	800027c <_LCD_get_young_bits>
 80004d6:	4603      	mov	r3, r0
	uint8_t send[4] = {
 80004d8:	f043 0309 	orr.w	r3, r3, #9
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	73fb      	strb	r3, [r7, #15]
	int16_t send_size = sizeof(send);
 80004e0:	2304      	movs	r3, #4
 80004e2:	823b      	strh	r3, [r7, #16]
	HAL_I2C_Master_Transmit(hi2c, address, send, send_size, 100);
 80004e4:	7cfb      	ldrb	r3, [r7, #19]
 80004e6:	b299      	uxth	r1, r3
 80004e8:	8a3b      	ldrh	r3, [r7, #16]
 80004ea:	f107 020c 	add.w	r2, r7, #12
 80004ee:	2064      	movs	r0, #100	; 0x64
 80004f0:	9000      	str	r0, [sp, #0]
 80004f2:	6978      	ldr	r0, [r7, #20]
 80004f4:	f001 f878 	bl	80015e8 <HAL_I2C_Master_Transmit>
}
 80004f8:	bf00      	nop
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <LCD_printf>:

void LCD_printf(LCD_HandleTypeDef* lcd, char *data){
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	//prints a string starting at cursors position
	//IMPLEMENT \n as NEWLINE
	//IMPLEMENT \t as two spaces
	for(char* i = data; *i != '\0'; i++)
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	e008      	b.n	8000522 <LCD_printf+0x22>
		LCD_putchar(lcd, *i);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ffb2 	bl	8000480 <LCD_putchar>
	for(char* i = data; *i != '\0'; i++)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1f2      	bne.n	8000510 <LCD_printf+0x10>

}
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <LCD_set_position>:

void LCD_set_position(LCD_HandleTypeDef* lcd, uint8_t col, uint8_t row){
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
 8000540:	4613      	mov	r3, r2
 8000542:	70bb      	strb	r3, [r7, #2]
	//rows and columns are 0 indexed
	//function omits positions outside of displays memory
	if((col <= 0x27 && col >= 0) && (row <= 1 && row >=0)){
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	2b27      	cmp	r3, #39	; 0x27
 8000548:	d817      	bhi.n	800057a <LCD_set_position+0x46>
 800054a:	78bb      	ldrb	r3, [r7, #2]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d814      	bhi.n	800057a <LCD_set_position+0x46>
		uint8_t address = col + row * 0x40;
 8000550:	78bb      	ldrb	r3, [r7, #2]
 8000552:	019b      	lsls	r3, r3, #6
 8000554:	b2da      	uxtb	r2, r3
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	4413      	add	r3, r2
 800055a:	73fb      	strb	r3, [r7, #15]
		address |= SET_POSITION_MASK;
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000562:	73fb      	strb	r3, [r7, #15]
		lcd->current_col = col;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	78fa      	ldrb	r2, [r7, #3]
 8000568:	725a      	strb	r2, [r3, #9]
		lcd->current_row = row;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	78ba      	ldrb	r2, [r7, #2]
 800056e:	729a      	strb	r2, [r3, #10]
		_LCD_send_command(lcd, address);
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	4619      	mov	r1, r3
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f7ff fea3 	bl	80002c0 <_LCD_send_command>

	}

}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <LCD_reset_position>:

void LCD_reset_position(LCD_HandleTypeDef* lcd){
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
	//sets cursors position to (0,0)
	LCD_set_position(lcd, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff ffd0 	bl	8000534 <LCD_set_position>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <LCD_printf_align>:
	_LCD_send_command(lcd, 0x0C);
	_LCD_delay_us(US_BETWEEN_COMMANDS, htim);
	LCD_set_position(lcd, lcd->current_col, lcd->current_row);
}

void LCD_printf_align(LCD_HandleTypeDef* lcd, char *data, uint8_t alignment){
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4613      	mov	r3, r2
 80005a8:	71fb      	strb	r3, [r7, #7]
	//prints given string with left or middle alignment of the text
	//function resets cursor position to (0,0) after execution
	uint16_t len = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	83fb      	strh	r3, [r7, #30]
	for(char* i = data; *i != '\0'; i++, len++);
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	61bb      	str	r3, [r7, #24]
 80005b2:	e005      	b.n	80005c0 <LCD_printf_align+0x24>
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	3301      	adds	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
 80005ba:	8bfb      	ldrh	r3, [r7, #30]
 80005bc:	3301      	adds	r3, #1
 80005be:	83fb      	strh	r3, [r7, #30]
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f5      	bne.n	80005b4 <LCD_printf_align+0x18>
	switch(alignment){
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d002      	beq.n	80005d4 <LCD_printf_align+0x38>
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d00c      	beq.n	80005ec <LCD_printf_align+0x50>
 80005d2:	e019      	b.n	8000608 <LCD_printf_align+0x6c>
		case ALIGN_RIGHT:
			LCD_set_position(lcd, MAX_COLUMN - len + 1, lcd->current_row);
 80005d4:	8bfb      	ldrh	r3, [r7, #30]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f1c3 0310 	rsb	r3, r3, #16
 80005dc:	b2d9      	uxtb	r1, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	7a9b      	ldrb	r3, [r3, #10]
 80005e2:	461a      	mov	r2, r3
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f7ff ffa5 	bl	8000534 <LCD_set_position>
			break;
 80005ea:	e00d      	b.n	8000608 <LCD_printf_align+0x6c>
		case ALIGN_MIDDLE:
			LCD_set_position(lcd, (uint8_t)(floor(MAX_COLUMN + 1)/2) - (uint8_t)(len / 2), lcd->current_row);
 80005ec:	8bfb      	ldrh	r3, [r7, #30]
 80005ee:	085b      	lsrs	r3, r3, #1
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f1c3 0308 	rsb	r3, r3, #8
 80005f8:	b2d9      	uxtb	r1, r3
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	7a9b      	ldrb	r3, [r3, #10]
 80005fe:	461a      	mov	r2, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f7ff ff97 	bl	8000534 <LCD_set_position>
			break;
 8000606:	bf00      	nop
	}
	for(char* i = data; *i != '\0'; i++)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	e008      	b.n	8000620 <LCD_printf_align+0x84>
		LCD_putchar(lcd, *i);
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f7ff ff33 	bl	8000480 <LCD_putchar>
	for(char* i = data; *i != '\0'; i++)
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f2      	bne.n	800060e <LCD_printf_align+0x72>
	LCD_reset_position(lcd);
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	f7ff ffaa 	bl	8000582 <LCD_reset_position>

}
 800062e:	bf00      	nop
 8000630:	3720      	adds	r7, #32
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

LCD_HandleTypeDef my_display = {&hi2c3, &htim1, MODULE_ADDRESS, 0, 0, 2};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	80fb      	strh	r3, [r7, #6]


}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fc07 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f84d 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f9f9 	bl	8000a50 <MX_GPIO_Init>
  MX_I2C1_Init();
 800065e:	f000 f8ad 	bl	80007bc <MX_I2C1_Init>
  MX_I2C3_Init();
 8000662:	f000 f92b 	bl	80008bc <MX_I2C3_Init>
  MX_I2C2_Init();
 8000666:	f000 f8e9 	bl	800083c <MX_I2C2_Init>
  MX_TIM1_Init();
 800066a:	f000 f967 	bl	800093c <MX_TIM1_Init>
  MX_TIM6_Init();
 800066e:	f000 f9b9 	bl	80009e4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  LCD_init(&my_display);
 8000672:	481b      	ldr	r0, [pc, #108]	; (80006e0 <main+0x94>)
 8000674:	f7ff fec2 	bl	80003fc <LCD_init>
  char data[] = "HD44780";
 8000678:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <main+0x98>)
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000682:	e883 0003 	stmia.w	r3, {r0, r1}
  char data2[] = "I2C";
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <main+0x9c>)
 8000688:	617b      	str	r3, [r7, #20]
  char data3[] = "by:";
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <main+0xa0>)
 800068c:	613b      	str	r3, [r7, #16]
  char data4[] = "st4micki";
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <main+0xa4>)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	ca07      	ldmia	r2, {r0, r1, r2}
 8000694:	c303      	stmia	r3!, {r0, r1}
 8000696:	701a      	strb	r2, [r3, #0]
  LCD_set_position(&my_display, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	4810      	ldr	r0, [pc, #64]	; (80006e0 <main+0x94>)
 800069e:	f7ff ff49 	bl	8000534 <LCD_set_position>
  LCD_printf(&my_display, data);
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	4619      	mov	r1, r3
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <main+0x94>)
 80006aa:	f7ff ff29 	bl	8000500 <LCD_printf>
  LCD_printf_align(&my_display, data2, ALIGN_RIGHT);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2201      	movs	r2, #1
 80006b4:	4619      	mov	r1, r3
 80006b6:	480a      	ldr	r0, [pc, #40]	; (80006e0 <main+0x94>)
 80006b8:	f7ff ff70 	bl	800059c <LCD_printf_align>
  LCD_set_position(&my_display, 0, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2100      	movs	r1, #0
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <main+0x94>)
 80006c2:	f7ff ff37 	bl	8000534 <LCD_set_position>
  LCD_printf(&my_display, data3);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <main+0x94>)
 80006ce:	f7ff ff17 	bl	8000500 <LCD_printf>
  LCD_printf_align(&my_display, data4, ALIGN_MIDDLE);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2202      	movs	r2, #2
 80006d6:	4619      	mov	r1, r3
 80006d8:	4801      	ldr	r0, [pc, #4]	; (80006e0 <main+0x94>)
 80006da:	f7ff ff5f 	bl	800059c <LCD_printf_align>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006de:	e7fe      	b.n	80006de <main+0x92>
 80006e0:	20000000 	.word	0x20000000
 80006e4:	08003b14 	.word	0x08003b14
 80006e8:	00433249 	.word	0x00433249
 80006ec:	003a7962 	.word	0x003a7962
 80006f0:	08003b1c 	.word	0x08003b1c

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09c      	sub	sp, #112	; 0x70
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006fe:	2228      	movs	r2, #40	; 0x28
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 f9f2 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2234      	movs	r2, #52	; 0x34
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 f9e4 	bl	8003aec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000724:	2303      	movs	r3, #3
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000736:	2310      	movs	r3, #16
 8000738:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000742:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000744:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000748:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fb14 	bl	8001d7c <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800075a:	f000 f9d3 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fb3c 	bl	8002df8 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000786:	f000 f9bd 	bl	8000b04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 800078a:	f249 0360 	movw	r3, #36960	; 0x9060
 800078e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fd04 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007ae:	f000 f9a9 	bl	8000b04 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3770      	adds	r7, #112	; 0x70
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_I2C1_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_I2C1_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_I2C1_Init+0x74>)
 80007c8:	4a1b      	ldr	r2, [pc, #108]	; (8000838 <MX_I2C1_Init+0x7c>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_I2C1_Init+0x74>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_I2C1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_I2C1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <MX_I2C1_Init+0x74>)
 80007f8:	f000 fe5a 	bl	80014b0 <HAL_I2C_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000802:	f000 f97f 	bl	8000b04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <MX_I2C1_Init+0x74>)
 800080a:	f001 fa1f 	bl	8001c4c <HAL_I2CEx_ConfigAnalogFilter>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000814:	f000 f976 	bl	8000b04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000818:	2100      	movs	r1, #0
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_I2C1_Init+0x74>)
 800081c:	f001 fa61 	bl	8001ce2 <HAL_I2CEx_ConfigDigitalFilter>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 f96d 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000034 	.word	0x20000034
 8000834:	40005400 	.word	0x40005400
 8000838:	2000090e 	.word	0x2000090e

0800083c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <MX_I2C2_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <MX_I2C2_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000854:	2201      	movs	r2, #1
 8000856:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000878:	f000 fe1a 	bl	80014b0 <HAL_I2C_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000882:	f000 f93f 	bl	8000b04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <MX_I2C2_Init+0x74>)
 800088a:	f001 f9df 	bl	8001c4c <HAL_I2CEx_ConfigAnalogFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000894:	f000 f936 	bl	8000b04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_I2C2_Init+0x74>)
 800089c:	f001 fa21 	bl	8001ce2 <HAL_I2CEx_ConfigDigitalFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f92d 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000088 	.word	0x20000088
 80008b4:	40005800 	.word	0x40005800
 80008b8:	2000090e 	.word	0x2000090e

080008bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_I2C3_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_I2C3_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_I2C3_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <MX_I2C3_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_I2C3_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_I2C3_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_I2C3_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_I2C3_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C3_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C3_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C3_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <MX_I2C3_Init+0x74>)
 80008f8:	f000 fdda 	bl	80014b0 <HAL_I2C_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000902:	f000 f8ff 	bl	8000b04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <MX_I2C3_Init+0x74>)
 800090a:	f001 f99f 	bl	8001c4c <HAL_I2CEx_ConfigAnalogFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000914:	f000 f8f6 	bl	8000b04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_I2C3_Init+0x74>)
 800091c:	f001 f9e1 	bl	8001ce2 <HAL_I2CEx_ConfigDigitalFilter>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 f8ed 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000dc 	.word	0x200000dc
 8000934:	40007800 	.word	0x40007800
 8000938:	2000090e 	.word	0x2000090e

0800093c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_TIM1_Init+0xa0>)
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <MX_TIM1_Init+0xa4>)
 800095e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_TIM1_Init+0xa0>)
 800096e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000972:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_TIM1_Init+0xa0>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000986:	4815      	ldr	r0, [pc, #84]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000988:	f002 fda4 	bl	80034d4 <HAL_TIM_Base_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000992:	f000 f8b7 	bl	8000b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <MX_TIM1_Init+0xa0>)
 80009a4:	f002 fe3a 	bl	800361c <HAL_TIM_ConfigClockSource>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009ae:	f000 f8a9 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_TIM1_Init+0xa0>)
 80009c4:	f003 f808 	bl	80039d8 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009ce:	f000 f899 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000130 	.word	0x20000130
 80009e0:	40012c00 	.word	0x40012c00

080009e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_TIM6_Init+0x64>)
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <MX_TIM6_Init+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_TIM6_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_TIM6_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_TIM6_Init+0x64>)
 8000a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_TIM6_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_TIM6_Init+0x64>)
 8000a16:	f002 fd5d 	bl	80034d4 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a20:	f000 f870 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_TIM6_Init+0x64>)
 8000a32:	f002 ffd1 	bl	80039d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f000 f862 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000017c 	.word	0x2000017c
 8000a4c:	40001000 	.word	0x40001000

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <MX_GPIO_Init+0xac>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a24      	ldr	r2, [pc, #144]	; (8000afc <MX_GPIO_Init+0xac>)
 8000a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <MX_GPIO_Init+0xac>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_GPIO_Init+0xac>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <MX_GPIO_Init+0xac>)
 8000a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a88:	6153      	str	r3, [r2, #20]
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_GPIO_Init+0xac>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_GPIO_Init+0xac>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <MX_GPIO_Init+0xac>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_GPIO_Init+0xac>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_GPIO_Init+0xac>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_GPIO_Init+0xac>)
 8000ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_GPIO_Init+0xac>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000acc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000ade:	f000 fb5d 	bl	800119c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2028      	movs	r0, #40	; 0x28
 8000ae8:	f000 fb21 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aec:	2028      	movs	r0, #40	; 0x28
 8000aee:	f000 fb3a 	bl	8001166 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000800 	.word	0x48000800

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_MspInit+0x44>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_MspInit+0x44>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x44>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x44>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b46:	2007      	movs	r0, #7
 8000b48:	f000 fae6 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b090      	sub	sp, #64	; 0x40
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a64      	ldr	r2, [pc, #400]	; (8000d08 <HAL_I2C_MspInit+0x1b0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d146      	bne.n	8000c08 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b64      	ldr	r3, [pc, #400]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a63      	ldr	r2, [pc, #396]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b61      	ldr	r3, [pc, #388]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b5e      	ldr	r3, [pc, #376]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a5d      	ldr	r2, [pc, #372]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b5b      	ldr	r3, [pc, #364]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb0:	2312      	movs	r3, #18
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f000 fae7 	bl	800119c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd2:	2312      	movs	r3, #18
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bde:	2304      	movs	r3, #4
 8000be0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be6:	4619      	mov	r1, r3
 8000be8:	4849      	ldr	r0, [pc, #292]	; (8000d10 <HAL_I2C_MspInit+0x1b8>)
 8000bea:	f000 fad7 	bl	800119c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bee:	4b47      	ldr	r3, [pc, #284]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a46      	ldr	r2, [pc, #280]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000bf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b44      	ldr	r3, [pc, #272]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c02:	623b      	str	r3, [r7, #32]
 8000c04:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000c06:	e07b      	b.n	8000d00 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a41      	ldr	r2, [pc, #260]	; (8000d14 <HAL_I2C_MspInit+0x1bc>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12a      	bne.n	8000c68 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a3d      	ldr	r2, [pc, #244]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b3b      	ldr	r3, [pc, #236]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c30:	2312      	movs	r3, #18
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f000 faa7 	bl	800119c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	4a2e      	ldr	r2, [pc, #184]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c58:	61d3      	str	r3, [r2, #28]
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
}
 8000c66:	e04b      	b.n	8000d00 <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a2a      	ldr	r2, [pc, #168]	; (8000d18 <HAL_I2C_MspInit+0x1c0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d146      	bne.n	8000d00 <HAL_I2C_MspInit+0x1a8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4817      	ldr	r0, [pc, #92]	; (8000d1c <HAL_I2C_MspInit+0x1c4>)
 8000cc0:	f000 fa6c 	bl	800119c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cca:	2312      	movs	r3, #18
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce4:	f000 fa5a 	bl	800119c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000cee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000cf2:	61d3      	str	r3, [r2, #28]
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_I2C_MspInit+0x1b4>)
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3740      	adds	r7, #64	; 0x40
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	40005800 	.word	0x40005800
 8000d18:	40007800 	.word	0x40007800
 8000d1c:	48000800 	.word	0x48000800

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_TIM_Base_MspInit+0x5c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d10c      	bne.n	8000d4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d4a:	e010      	b.n	8000d6e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <HAL_TIM_Base_MspInit+0x64>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10b      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	61d3      	str	r3, [r2, #28]
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_TIM_Base_MspInit+0x60>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40012c00 	.word	0x40012c00
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40001000 	.word	0x40001000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 f88c 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000de0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000de4:	f000 fb4c 	bl	8001480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff ffea 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	; (8000e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <LoopForever+0xe>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	; (8000e5c <LoopForever+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f002 fe31 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e42:	f7ff fc03 	bl	800064c <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e48:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e54:	08003b60 	.word	0x08003b60
  ldr r2, =_sbss
 8000e58:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e5c:	200001cc 	.word	0x200001cc

08000e60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x28>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x28>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f94f 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fe46 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f967 	bl	8001182 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f92f 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	20000014 	.word	0x20000014
 8000eec:	20000010 	.word	0x20000010

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000014 	.word	0x20000014
 8000f14:	200001c8 	.word	0x200001c8

08000f18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200001c8 	.word	0x200001c8

08000f30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000014 	.word	0x20000014

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4907      	ldr	r1, [pc, #28]	; (8001014 <__NVIC_EnableIRQ+0x38>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff29 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff3e 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff31 	bl	8000fdc <__NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffa2 	bl	80010d4 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	e14e      	b.n	800144a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8140 	beq.w	8001444 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d005      	beq.n	80011dc <HAL_GPIO_Init+0x40>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d130      	bne.n	800123e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001212:	2201      	movs	r2, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 0201 	and.w	r2, r3, #1
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b03      	cmp	r3, #3
 8001248:	d017      	beq.n	800127a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d123      	bne.n	80012ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	691a      	ldr	r2, [r3, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	08da      	lsrs	r2, r3, #3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3208      	adds	r2, #8
 80012c8:	6939      	ldr	r1, [r7, #16]
 80012ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0203 	and.w	r2, r3, #3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 809a 	beq.w	8001444 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001310:	4b55      	ldr	r3, [pc, #340]	; (8001468 <HAL_GPIO_Init+0x2cc>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a54      	ldr	r2, [pc, #336]	; (8001468 <HAL_GPIO_Init+0x2cc>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b52      	ldr	r3, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x2cc>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001328:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_GPIO_Init+0x2d0>)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001352:	d013      	beq.n	800137c <HAL_GPIO_Init+0x1e0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a46      	ldr	r2, [pc, #280]	; (8001470 <HAL_GPIO_Init+0x2d4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d00d      	beq.n	8001378 <HAL_GPIO_Init+0x1dc>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a45      	ldr	r2, [pc, #276]	; (8001474 <HAL_GPIO_Init+0x2d8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d007      	beq.n	8001374 <HAL_GPIO_Init+0x1d8>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a44      	ldr	r2, [pc, #272]	; (8001478 <HAL_GPIO_Init+0x2dc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d101      	bne.n	8001370 <HAL_GPIO_Init+0x1d4>
 800136c:	2303      	movs	r3, #3
 800136e:	e006      	b.n	800137e <HAL_GPIO_Init+0x1e2>
 8001370:	2305      	movs	r3, #5
 8001372:	e004      	b.n	800137e <HAL_GPIO_Init+0x1e2>
 8001374:	2302      	movs	r3, #2
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x1e2>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_GPIO_Init+0x1e2>
 800137c:	2300      	movs	r3, #0
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	f002 0203 	and.w	r2, r2, #3
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	4093      	lsls	r3, r2
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800138e:	4937      	ldr	r1, [pc, #220]	; (800146c <HAL_GPIO_Init+0x2d0>)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139c:	4b37      	ldr	r3, [pc, #220]	; (800147c <HAL_GPIO_Init+0x2e0>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013c0:	4a2e      	ldr	r2, [pc, #184]	; (800147c <HAL_GPIO_Init+0x2e0>)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_GPIO_Init+0x2e0>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ea:	4a24      	ldr	r2, [pc, #144]	; (800147c <HAL_GPIO_Init+0x2e0>)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <HAL_GPIO_Init+0x2e0>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_GPIO_Init+0x2e0>)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_GPIO_Init+0x2e0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_GPIO_Init+0x2e0>)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	f47f aea9 	bne.w	80011ac <HAL_GPIO_Init+0x10>
  }
}
 800145a:	bf00      	nop
 800145c:	bf00      	nop
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	48000400 	.word	0x48000400
 8001474:	48000800 	.word	0x48000800
 8001478:	48000c00 	.word	0x48000c00
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f8c9 	bl	8000636 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e08d      	b.n	80015de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d106      	bne.n	80014dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fb3e 	bl	8000b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2224      	movs	r2, #36	; 0x24
 80014e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001500:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001510:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	e006      	b.n	8001538 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001536:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d108      	bne.n	8001552 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	e007      	b.n	8001562 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001560:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001574:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001584:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69d9      	ldr	r1, [r3, #28]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2220      	movs	r2, #32
 80015ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	461a      	mov	r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	817b      	strh	r3, [r7, #10]
 80015f8:	4613      	mov	r3, r2
 80015fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b20      	cmp	r3, #32
 8001606:	f040 80fd 	bne.w	8001804 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_I2C_Master_Transmit+0x30>
 8001614:	2302      	movs	r3, #2
 8001616:	e0f6      	b.n	8001806 <HAL_I2C_Master_Transmit+0x21e>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001620:	f7ff fc7a 	bl	8000f18 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2319      	movs	r3, #25
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f914 	bl	8001860 <I2C_WaitOnFlagUntilTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0e1      	b.n	8001806 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2221      	movs	r2, #33	; 0x21
 8001646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2210      	movs	r2, #16
 800164e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	893a      	ldrh	r2, [r7, #8]
 8001662:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166e:	b29b      	uxth	r3, r3
 8001670:	2bff      	cmp	r3, #255	; 0xff
 8001672:	d906      	bls.n	8001682 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	22ff      	movs	r2, #255	; 0xff
 8001678:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800167a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e007      	b.n	8001692 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800168c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001690:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001696:	2b00      	cmp	r3, #0
 8001698:	d024      	beq.n	80016e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	8979      	ldrh	r1, [r7, #10]
 80016d6:	4b4e      	ldr	r3, [pc, #312]	; (8001810 <HAL_I2C_Master_Transmit+0x228>)
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 fa83 	bl	8001be8 <I2C_TransferConfig>
 80016e2:	e066      	b.n	80017b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	8979      	ldrh	r1, [r7, #10]
 80016ec:	4b48      	ldr	r3, [pc, #288]	; (8001810 <HAL_I2C_Master_Transmit+0x228>)
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fa78 	bl	8001be8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016f8:	e05b      	b.n	80017b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	6a39      	ldr	r1, [r7, #32]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f907 	bl	8001912 <I2C_WaitOnTXISFlagUntilTimeout>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07b      	b.n	8001806 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	781a      	ldrb	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001736:	3b01      	subs	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d034      	beq.n	80017b2 <HAL_I2C_Master_Transmit+0x1ca>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d130      	bne.n	80017b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	2200      	movs	r2, #0
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f880 	bl	8001860 <I2C_WaitOnFlagUntilTimeout>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e04d      	b.n	8001806 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176e:	b29b      	uxth	r3, r3
 8001770:	2bff      	cmp	r3, #255	; 0xff
 8001772:	d90e      	bls.n	8001792 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	22ff      	movs	r2, #255	; 0xff
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177e:	b2da      	uxtb	r2, r3
 8001780:	8979      	ldrh	r1, [r7, #10]
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 fa2c 	bl	8001be8 <I2C_TransferConfig>
 8001790:	e00f      	b.n	80017b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	8979      	ldrh	r1, [r7, #10]
 80017a4:	2300      	movs	r3, #0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 fa1b 	bl	8001be8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d19e      	bne.n	80016fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	6a39      	ldr	r1, [r7, #32]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f8ed 	bl	80019a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e01a      	b.n	8001806 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2220      	movs	r2, #32
 80017d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6859      	ldr	r1, [r3, #4]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_I2C_Master_Transmit+0x22c>)
 80017e4:	400b      	ands	r3, r1
 80017e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2220      	movs	r2, #32
 80017ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	e000      	b.n	8001806 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001804:	2302      	movs	r3, #2
  }
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	80002000 	.word	0x80002000
 8001814:	fe00e800 	.word	0xfe00e800

08001818 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b02      	cmp	r3, #2
 800182c:	d103      	bne.n	8001836 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d007      	beq.n	8001854 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	619a      	str	r2, [r3, #24]
  }
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001870:	e03b      	b.n	80018ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	6839      	ldr	r1, [r7, #0]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f8d6 	bl	8001a28 <I2C_IsErrorOccurred>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e041      	b.n	800190a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d02d      	beq.n	80018ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188e:	f7ff fb43 	bl	8000f18 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d302      	bcc.n	80018a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d122      	bne.n	80018ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699a      	ldr	r2, [r3, #24]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	4013      	ands	r3, r2
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	bf0c      	ite	eq
 80018b4:	2301      	moveq	r3, #1
 80018b6:	2300      	movne	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d113      	bne.n	80018ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f043 0220 	orr.w	r2, r3, #32
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699a      	ldr	r2, [r3, #24]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4013      	ands	r3, r2
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	bf0c      	ite	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	2300      	movne	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	429a      	cmp	r2, r3
 8001906:	d0b4      	beq.n	8001872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800191e:	e033      	b.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 f87f 	bl	8001a28 <I2C_IsErrorOccurred>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e031      	b.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193a:	d025      	beq.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193c:	f7ff faec 	bl	8000f18 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	429a      	cmp	r2, r3
 800194a:	d302      	bcc.n	8001952 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d11a      	bne.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b02      	cmp	r3, #2
 800195e:	d013      	beq.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	f043 0220 	orr.w	r2, r3, #32
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e007      	b.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d1c4      	bne.n	8001920 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ac:	e02f      	b.n	8001a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f838 	bl	8001a28 <I2C_IsErrorOccurred>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e02d      	b.n	8001a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c2:	f7ff faa9 	bl	8000f18 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d302      	bcc.n	80019d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d11a      	bne.n	8001a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	d013      	beq.n	8001a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f043 0220 	orr.w	r2, r3, #32
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e007      	b.n	8001a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d1c8      	bne.n	80019ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d068      	beq.n	8001b26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a5c:	e049      	b.n	8001af2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d045      	beq.n	8001af2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a66:	f7ff fa57 	bl	8000f18 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d302      	bcc.n	8001a7c <I2C_IsErrorOccurred+0x54>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d13a      	bne.n	8001af2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9e:	d121      	bne.n	8001ae4 <I2C_IsErrorOccurred+0xbc>
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aa6:	d01d      	beq.n	8001ae4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001aa8:	7cfb      	ldrb	r3, [r7, #19]
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d01a      	beq.n	8001ae4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001abc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001abe:	f7ff fa2b 	bl	8000f18 <HAL_GetTick>
 8001ac2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ac4:	e00e      	b.n	8001ae4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ac6:	f7ff fa27 	bl	8000f18 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b19      	cmp	r3, #25
 8001ad2:	d907      	bls.n	8001ae4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	f043 0320 	orr.w	r3, r3, #32
 8001ada:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001ae2:	e006      	b.n	8001af2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	d1e9      	bne.n	8001ac6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0320 	and.w	r3, r3, #32
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d003      	beq.n	8001b08 <I2C_IsErrorOccurred+0xe0>
 8001b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0aa      	beq.n	8001a5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d103      	bne.n	8001b18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2220      	movs	r2, #32
 8001b16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00b      	beq.n	8001b50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01c      	beq.n	8001bd6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7ff fe3b 	bl	8001818 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <I2C_IsErrorOccurred+0x1bc>)
 8001bae:	400b      	ands	r3, r1
 8001bb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	fe00e800 	.word	0xfe00e800

08001be8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	817b      	strh	r3, [r7, #10]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bfa:	897b      	ldrh	r3, [r7, #10]
 8001bfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c00:	7a7b      	ldrb	r3, [r7, #9]
 8001c02:	041b      	lsls	r3, r3, #16
 8001c04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	0d5b      	lsrs	r3, r3, #21
 8001c22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <I2C_TransferConfig+0x60>)
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	ea02 0103 	and.w	r1, r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	03ff63ff 	.word	0x03ff63ff

08001c4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	d138      	bne.n	8001cd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e032      	b.n	8001cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
  }
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b085      	sub	sp, #20
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d139      	bne.n	8001d6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e033      	b.n	8001d6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2224      	movs	r2, #36	; 0x24
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e000      	b.n	8001d6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d6c:	2302      	movs	r3, #2
  }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f001 b823 	b.w	8002de8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 817d 	beq.w	80020b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001db8:	4bbc      	ldr	r3, [pc, #752]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d00c      	beq.n	8001dde <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc4:	4bb9      	ldr	r3, [pc, #740]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d15c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x10e>
 8001dd0:	4bb6      	ldr	r3, [pc, #728]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ddc:	d155      	bne.n	8001e8a <HAL_RCC_OscConfig+0x10e>
 8001dde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_OscConfig+0x94>
 8001e0a:	4ba8      	ldr	r3, [pc, #672]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	e015      	b.n	8001e3c <HAL_RCC_OscConfig+0xc0>
 8001e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e14:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e28:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e2c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e38:	4b9c      	ldr	r3, [pc, #624]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e40:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e44:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e48:	fa92 f2a2 	rbit	r2, r2
 8001e4c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e50:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e54:	fab2 f282 	clz	r2, r2
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f042 0220 	orr.w	r2, r2, #32
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f002 021f 	and.w	r2, r2, #31
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 811f 	beq.w	80020b0 <HAL_RCC_OscConfig+0x334>
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 8116 	bne.w	80020b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f000 bfaf 	b.w	8002de8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12e>
 8001e9c:	4b83      	ldr	r3, [pc, #524]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a82      	ldr	r2, [pc, #520]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	e036      	b.n	8001f18 <HAL_RCC_OscConfig+0x19c>
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x158>
 8001eba:	4b7c      	ldr	r3, [pc, #496]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a7b      	ldr	r2, [pc, #492]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b79      	ldr	r3, [pc, #484]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a78      	ldr	r2, [pc, #480]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e021      	b.n	8001f18 <HAL_RCC_OscConfig+0x19c>
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x184>
 8001ee6:	4b71      	ldr	r3, [pc, #452]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a70      	ldr	r2, [pc, #448]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b6e      	ldr	r3, [pc, #440]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6d      	ldr	r2, [pc, #436]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0x19c>
 8001f00:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a69      	ldr	r2, [pc, #420]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a66      	ldr	r2, [pc, #408]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f16:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f18:	4b64      	ldr	r3, [pc, #400]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f023 020f 	bic.w	r2, r3, #15
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	495f      	ldr	r1, [pc, #380]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d059      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe ffe9 	bl	8000f18 <HAL_GetTick>
 8001f46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7fe ffe4 	bl	8000f18 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	; 0x64
 8001f5a:	d902      	bls.n	8001f62 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	f000 bf43 	b.w	8002de8 <HAL_RCC_OscConfig+0x106c>
 8001f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f66:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f76:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	095b      	lsrs	r3, r3, #5
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d102      	bne.n	8001f94 <HAL_RCC_OscConfig+0x218>
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	e015      	b.n	8001fc0 <HAL_RCC_OscConfig+0x244>
 8001f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f98:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fb0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fc4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fc8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fcc:	fa92 f2a2 	rbit	r2, r2
 8001fd0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fd4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fd8:	fab2 f282 	clz	r2, r2
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f042 0220 	orr.w	r2, r2, #32
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f002 021f 	and.w	r2, r2, #31
 8001fe8:	2101      	movs	r1, #1
 8001fea:	fa01 f202 	lsl.w	r2, r1, r2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ab      	beq.n	8001f4c <HAL_RCC_OscConfig+0x1d0>
 8001ff4:	e05d      	b.n	80020b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7fe ff8f 	bl	8000f18 <HAL_GetTick>
 8001ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002000:	f7fe ff8a 	bl	8000f18 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b64      	cmp	r3, #100	; 0x64
 800200e:	d902      	bls.n	8002016 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	f000 bee9 	b.w	8002de8 <HAL_RCC_OscConfig+0x106c>
 8002016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800201a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800202a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d102      	bne.n	8002048 <HAL_RCC_OscConfig+0x2cc>
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	e015      	b.n	8002074 <HAL_RCC_OscConfig+0x2f8>
 8002048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800205c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002060:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002064:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_RCC_OscConfig+0x330>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002078:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800207c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002080:	fa92 f2a2 	rbit	r2, r2
 8002084:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002088:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800208c:	fab2 f282 	clz	r2, r2
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f002 021f 	and.w	r2, r2, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ab      	bne.n	8002000 <HAL_RCC_OscConfig+0x284>
 80020a8:	e003      	b.n	80020b2 <HAL_RCC_OscConfig+0x336>
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 817d 	beq.w	80023c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020c8:	4ba6      	ldr	r3, [pc, #664]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00b      	beq.n	80020ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020d4:	4ba3      	ldr	r3, [pc, #652]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d172      	bne.n	80021c6 <HAL_RCC_OscConfig+0x44a>
 80020e0:	4ba0      	ldr	r3, [pc, #640]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d16c      	bne.n	80021c6 <HAL_RCC_OscConfig+0x44a>
 80020ec:	2302      	movs	r3, #2
 80020ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_RCC_OscConfig+0x3a0>
 8002116:	4b93      	ldr	r3, [pc, #588]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	e013      	b.n	8002144 <HAL_RCC_OscConfig+0x3c8>
 800211c:	2302      	movs	r3, #2
 800211e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800212e:	2302      	movs	r3, #2
 8002130:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002134:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002140:	4b88      	ldr	r3, [pc, #544]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2202      	movs	r2, #2
 8002146:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800214a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800214e:	fa92 f2a2 	rbit	r2, r2
 8002152:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002156:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f042 0220 	orr.w	r2, r2, #32
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCC_OscConfig+0x410>
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d002      	beq.n	800218c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	f000 be2e 	b.w	8002de8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b75      	ldr	r3, [pc, #468]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	21f8      	movs	r1, #248	; 0xf8
 80021a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021aa:	fa91 f1a1 	rbit	r1, r1
 80021ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021b6:	fab1 f181 	clz	r1, r1
 80021ba:	b2c9      	uxtb	r1, r1
 80021bc:	408b      	lsls	r3, r1
 80021be:	4969      	ldr	r1, [pc, #420]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c4:	e0fd      	b.n	80023c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8088 	beq.w	80022e8 <HAL_RCC_OscConfig+0x56c>
 80021d8:	2301      	movs	r3, #1
 80021da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	461a      	mov	r2, r3
 8002200:	2301      	movs	r3, #1
 8002202:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7fe fe88 	bl	8000f18 <HAL_GetTick>
 8002208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220e:	f7fe fe83 	bl	8000f18 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d902      	bls.n	8002224 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	f000 bde2 	b.w	8002de8 <HAL_RCC_OscConfig+0x106c>
 8002224:	2302      	movs	r3, #2
 8002226:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002236:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d102      	bne.n	8002254 <HAL_RCC_OscConfig+0x4d8>
 800224e:	4b45      	ldr	r3, [pc, #276]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	e013      	b.n	800227c <HAL_RCC_OscConfig+0x500>
 8002254:	2302      	movs	r3, #2
 8002256:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002266:	2302      	movs	r3, #2
 8002268:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800226c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002278:	4b3a      	ldr	r3, [pc, #232]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	2202      	movs	r2, #2
 800227e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002282:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002286:	fa92 f2a2 	rbit	r2, r2
 800228a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800228e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002292:	fab2 f282 	clz	r2, r2
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f002 021f 	and.w	r2, r2, #31
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0af      	beq.n	800220e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ae:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	21f8      	movs	r1, #248	; 0xf8
 80022c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022cc:	fa91 f1a1 	rbit	r1, r1
 80022d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022d8:	fab1 f181 	clz	r1, r1
 80022dc:	b2c9      	uxtb	r1, r1
 80022de:	408b      	lsls	r3, r1
 80022e0:	4920      	ldr	r1, [pc, #128]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
 80022e6:	e06c      	b.n	80023c2 <HAL_RCC_OscConfig+0x646>
 80022e8:	2301      	movs	r3, #1
 80022ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002308:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	461a      	mov	r2, r3
 8002310:	2300      	movs	r3, #0
 8002312:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe fe00 	bl	8000f18 <HAL_GetTick>
 8002318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800231e:	f7fe fdfb 	bl	8000f18 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d902      	bls.n	8002334 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	f000 bd5a 	b.w	8002de8 <HAL_RCC_OscConfig+0x106c>
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d104      	bne.n	8002368 <HAL_RCC_OscConfig+0x5ec>
 800235e:	4b01      	ldr	r3, [pc, #4]	; (8002364 <HAL_RCC_OscConfig+0x5e8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	e015      	b.n	8002390 <HAL_RCC_OscConfig+0x614>
 8002364:	40021000 	.word	0x40021000
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800237a:	2302      	movs	r3, #2
 800237c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002380:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800238c:	4bc8      	ldr	r3, [pc, #800]	; (80026b0 <HAL_RCC_OscConfig+0x934>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2202      	movs	r2, #2
 8002392:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002396:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800239a:	fa92 f2a2 	rbit	r2, r2
 800239e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80023a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80023a6:	fab2 f282 	clz	r2, r2
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	f042 0220 	orr.w	r2, r2, #32
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	f002 021f 	and.w	r2, r2, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f202 	lsl.w	r2, r1, r2
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1ad      	bne.n	800231e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8110 	beq.w	80025f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d079      	beq.n	80024dc <HAL_RCC_OscConfig+0x760>
 80023e8:	2301      	movs	r3, #1
 80023ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4bab      	ldr	r3, [pc, #684]	; (80026b4 <HAL_RCC_OscConfig+0x938>)
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	461a      	mov	r2, r3
 800240e:	2301      	movs	r3, #1
 8002410:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7fe fd81 	bl	8000f18 <HAL_GetTick>
 8002416:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e00a      	b.n	8002432 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241c:	f7fe fd7c 	bl	8000f18 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d902      	bls.n	8002432 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	f000 bcdb 	b.w	8002de8 <HAL_RCC_OscConfig+0x106c>
 8002432:	2302      	movs	r3, #2
 8002434:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800244c:	2202      	movs	r2, #2
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002470:	2202      	movs	r2, #2
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	fa93 f2a3 	rbit	r2, r3
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800248a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248c:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <HAL_RCC_OscConfig+0x934>)
 800248e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002498:	2102      	movs	r1, #2
 800249a:	6019      	str	r1, [r3, #0]
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fa93 f1a3 	rbit	r1, r3
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024b2:	6019      	str	r1, [r3, #0]
  return result;
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0a0      	beq.n	800241c <HAL_RCC_OscConfig+0x6a0>
 80024da:	e08d      	b.n	80025f8 <HAL_RCC_OscConfig+0x87c>
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	fa93 f2a3 	rbit	r2, r3
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024fe:	601a      	str	r2, [r3, #0]
  return result;
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002508:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <HAL_RCC_OscConfig+0x938>)
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	461a      	mov	r2, r3
 800251a:	2300      	movs	r3, #0
 800251c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7fe fcfb 	bl	8000f18 <HAL_GetTick>
 8002522:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002526:	e00a      	b.n	800253e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe fcf6 	bl	8000f18 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d902      	bls.n	800253e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	f000 bc55 	b.w	8002de8 <HAL_RCC_OscConfig+0x106c>
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002546:	2202      	movs	r2, #2
 8002548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800256a:	2202      	movs	r2, #2
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800258e:	2202      	movs	r2, #2
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025aa:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_RCC_OscConfig+0x934>)
 80025ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025b6:	2102      	movs	r1, #2
 80025b8:	6019      	str	r1, [r3, #0]
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	fa93 f1a3 	rbit	r1, r3
 80025c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025d0:	6019      	str	r1, [r3, #0]
  return result;
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d197      	bne.n	8002528 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 81a1 	beq.w	8002950 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002614:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <HAL_RCC_OscConfig+0x934>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d116      	bne.n	800264e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002620:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_RCC_OscConfig+0x934>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <HAL_RCC_OscConfig+0x934>)
 8002626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262a:	61d3      	str	r3, [r2, #28]
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_OscConfig+0x934>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002646:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_RCC_OscConfig+0x93c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11a      	bne.n	8002690 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_RCC_OscConfig+0x93c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <HAL_RCC_OscConfig+0x93c>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7fe fc57 	bl	8000f18 <HAL_GetTick>
 800266a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	e009      	b.n	8002684 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002670:	f7fe fc52 	bl	8000f18 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b64      	cmp	r3, #100	; 0x64
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e3b1      	b.n	8002de8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_RCC_OscConfig+0x93c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ef      	beq.n	8002670 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002694:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10d      	bne.n	80026bc <HAL_RCC_OscConfig+0x940>
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_RCC_OscConfig+0x934>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4a02      	ldr	r2, [pc, #8]	; (80026b0 <HAL_RCC_OscConfig+0x934>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6213      	str	r3, [r2, #32]
 80026ac:	e03c      	b.n	8002728 <HAL_RCC_OscConfig+0x9ac>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	10908120 	.word	0x10908120
 80026b8:	40007000 	.word	0x40007000
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCC_OscConfig+0x96a>
 80026cc:	4bc1      	ldr	r3, [pc, #772]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4ac0      	ldr	r2, [pc, #768]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	6213      	str	r3, [r2, #32]
 80026d8:	4bbe      	ldr	r3, [pc, #760]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4abd      	ldr	r2, [pc, #756]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 80026de:	f023 0304 	bic.w	r3, r3, #4
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	e020      	b.n	8002728 <HAL_RCC_OscConfig+0x9ac>
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x994>
 80026f6:	4bb7      	ldr	r3, [pc, #732]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4ab6      	ldr	r2, [pc, #728]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	4bb4      	ldr	r3, [pc, #720]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4ab3      	ldr	r2, [pc, #716]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_OscConfig+0x9ac>
 8002710:	4bb0      	ldr	r3, [pc, #704]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4aaf      	ldr	r2, [pc, #700]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	4bad      	ldr	r3, [pc, #692]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4aac      	ldr	r2, [pc, #688]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 8002722:	f023 0304 	bic.w	r3, r3, #4
 8002726:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8081 	beq.w	800283c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273a:	f7fe fbed 	bl	8000f18 <HAL_GetTick>
 800273e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe fbe8 	bl	8000f18 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e345      	b.n	8002de8 <HAL_RCC_OscConfig+0x106c>
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002764:	2202      	movs	r2, #2
 8002766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002788:	2202      	movs	r2, #2
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fa93 f2a3 	rbit	r2, r3
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027a2:	601a      	str	r2, [r3, #0]
  return result;
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d102      	bne.n	80027c8 <HAL_RCC_OscConfig+0xa4c>
 80027c2:	4b84      	ldr	r3, [pc, #528]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	e013      	b.n	80027f0 <HAL_RCC_OscConfig+0xa74>
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027d0:	2202      	movs	r2, #2
 80027d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	fa93 f2a3 	rbit	r2, r3
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	4b79      	ldr	r3, [pc, #484]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027f8:	2102      	movs	r1, #2
 80027fa:	6011      	str	r1, [r2, #0]
 80027fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002800:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	fa92 f1a2 	rbit	r1, r2
 800280a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800280e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002812:	6011      	str	r1, [r2, #0]
  return result;
 8002814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002818:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	fab2 f282 	clz	r2, r2
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f002 021f 	and.w	r2, r2, #31
 800282e:	2101      	movs	r1, #1
 8002830:	fa01 f202 	lsl.w	r2, r1, r2
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d084      	beq.n	8002744 <HAL_RCC_OscConfig+0x9c8>
 800283a:	e07f      	b.n	800293c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283c:	f7fe fb6c 	bl	8000f18 <HAL_GetTick>
 8002840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	e00b      	b.n	800285e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe fb67 	bl	8000f18 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e2c4      	b.n	8002de8 <HAL_RCC_OscConfig+0x106c>
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002866:	2202      	movs	r2, #2
 8002868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	fa93 f2a3 	rbit	r2, r3
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800288a:	2202      	movs	r2, #2
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	fa93 f2a3 	rbit	r2, r3
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028a4:	601a      	str	r2, [r3, #0]
  return result;
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_OscConfig+0xb4e>
 80028c4:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	e013      	b.n	80028f2 <HAL_RCC_OscConfig+0xb76>
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028d2:	2202      	movs	r2, #2
 80028d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	fa93 f2a3 	rbit	r2, r3
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028fa:	2102      	movs	r1, #2
 80028fc:	6011      	str	r1, [r2, #0]
 80028fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002902:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	fa92 f1a2 	rbit	r1, r2
 800290c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002910:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002914:	6011      	str	r1, [r2, #0]
  return result;
 8002916:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800291a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	fab2 f282 	clz	r2, r2
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f002 021f 	and.w	r2, r2, #31
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f202 	lsl.w	r2, r1, r2
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d184      	bne.n	8002846 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800293c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 800294a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8242 	beq.w	8002de6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <HAL_RCC_OscConfig+0xc58>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b08      	cmp	r3, #8
 800296c:	f000 8213 	beq.w	8002d96 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	2b02      	cmp	r3, #2
 800297e:	f040 8162 	bne.w	8002c46 <HAL_RCC_OscConfig+0xeca>
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800298a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800298e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029a6:	601a      	str	r2, [r3, #0]
  return result;
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	461a      	mov	r2, r3
 80029c4:	2300      	movs	r3, #0
 80029c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe faa6 	bl	8000f18 <HAL_GetTick>
 80029cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d0:	e00c      	b.n	80029ec <HAL_RCC_OscConfig+0xc70>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe fa9e 	bl	8000f18 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1fd      	b.n	8002de8 <HAL_RCC_OscConfig+0x106c>
 80029ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a10:	601a      	str	r2, [r3, #0]
  return result;
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d102      	bne.n	8002a36 <HAL_RCC_OscConfig+0xcba>
 8002a30:	4bb0      	ldr	r3, [pc, #704]	; (8002cf4 <HAL_RCC_OscConfig+0xf78>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	e027      	b.n	8002a86 <HAL_RCC_OscConfig+0xd0a>
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	fa93 f2a3 	rbit	r2, r3
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	4b9c      	ldr	r3, [pc, #624]	; (8002cf4 <HAL_RCC_OscConfig+0xf78>)
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a8a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a92:	6011      	str	r1, [r2, #0]
 8002a94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a98:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	fa92 f1a2 	rbit	r1, r2
 8002aa2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002aaa:	6011      	str	r1, [r2, #0]
  return result;
 8002aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	fab2 f282 	clz	r2, r2
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	f042 0220 	orr.w	r2, r2, #32
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	f002 021f 	and.w	r2, r2, #31
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d182      	bne.n	80029d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad2:	4b88      	ldr	r3, [pc, #544]	; (8002cf4 <HAL_RCC_OscConfig+0xf78>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	430b      	orrs	r3, r1
 8002af4:	497f      	ldr	r1, [pc, #508]	; (8002cf4 <HAL_RCC_OscConfig+0xf78>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fa93 f2a3 	rbit	r2, r3
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b1e:	601a      	str	r2, [r3, #0]
  return result;
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b28:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe f9ea 	bl	8000f18 <HAL_GetTick>
 8002b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b48:	e009      	b.n	8002b5e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe f9e5 	bl	8000f18 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e144      	b.n	8002de8 <HAL_RCC_OscConfig+0x106c>
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	fa93 f2a3 	rbit	r2, r3
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b82:	601a      	str	r2, [r3, #0]
  return result;
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d102      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xe2c>
 8002ba2:	4b54      	ldr	r3, [pc, #336]	; (8002cf4 <HAL_RCC_OscConfig+0xf78>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	e027      	b.n	8002bf8 <HAL_RCC_OscConfig+0xe7c>
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fa93 f2a3 	rbit	r2, r3
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	fa93 f2a3 	rbit	r2, r3
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_RCC_OscConfig+0xf78>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bfc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c04:	6011      	str	r1, [r2, #0]
 8002c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c0a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	fa92 f1a2 	rbit	r1, r2
 8002c14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c1c:	6011      	str	r1, [r2, #0]
  return result;
 8002c1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c22:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	fab2 f282 	clz	r2, r2
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	f042 0220 	orr.w	r2, r2, #32
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	f002 021f 	and.w	r2, r2, #31
 8002c38:	2101      	movs	r1, #1
 8002c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d082      	beq.n	8002b4a <HAL_RCC_OscConfig+0xdce>
 8002c44:	e0cf      	b.n	8002de6 <HAL_RCC_OscConfig+0x106a>
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c6a:	601a      	str	r2, [r3, #0]
  return result;
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	461a      	mov	r2, r3
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f944 	bl	8000f18 <HAL_GetTick>
 8002c90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c94:	e009      	b.n	8002caa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe f93f 	bl	8000f18 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e09e      	b.n	8002de8 <HAL_RCC_OscConfig+0x106c>
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cce:	601a      	str	r2, [r3, #0]
  return result;
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d104      	bne.n	8002cf8 <HAL_RCC_OscConfig+0xf7c>
 8002cee:	4b01      	ldr	r3, [pc, #4]	; (8002cf4 <HAL_RCC_OscConfig+0xf78>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	e029      	b.n	8002d48 <HAL_RCC_OscConfig+0xfcc>
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	fa93 f2a3 	rbit	r2, r3
 8002d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d30:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	fa93 f2a3 	rbit	r2, r3
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <HAL_RCC_OscConfig+0x1078>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d4c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d54:	6011      	str	r1, [r2, #0]
 8002d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d5a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	fa92 f1a2 	rbit	r1, r2
 8002d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d6c:	6011      	str	r1, [r2, #0]
  return result;
 8002d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d72:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	fab2 f282 	clz	r2, r2
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f042 0220 	orr.w	r2, r2, #32
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f002 021f 	and.w	r2, r2, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d180      	bne.n	8002c96 <HAL_RCC_OscConfig+0xf1a>
 8002d94:	e027      	b.n	8002de6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e01e      	b.n	8002de8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_RCC_OscConfig+0x1078>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002db2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002db6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d10b      	bne.n	8002de2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002dca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000

08002df8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b09e      	sub	sp, #120	; 0x78
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e162      	b.n	80030d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e10:	4b90      	ldr	r3, [pc, #576]	; (8003054 <HAL_RCC_ClockConfig+0x25c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d910      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b8d      	ldr	r3, [pc, #564]	; (8003054 <HAL_RCC_ClockConfig+0x25c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 0207 	bic.w	r2, r3, #7
 8002e26:	498b      	ldr	r1, [pc, #556]	; (8003054 <HAL_RCC_ClockConfig+0x25c>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b89      	ldr	r3, [pc, #548]	; (8003054 <HAL_RCC_ClockConfig+0x25c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e14a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b82      	ldr	r3, [pc, #520]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	497f      	ldr	r1, [pc, #508]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80dc 	beq.w	8003024 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d13c      	bne.n	8002eee <HAL_RCC_ClockConfig+0xf6>
 8002e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d102      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xa6>
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	e00f      	b.n	8002ebe <HAL_RCC_ClockConfig+0xc6>
 8002e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	667b      	str	r3, [r7, #100]	; 0x64
 8002eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eba:	4b67      	ldr	r3, [pc, #412]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ec2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ec6:	fa92 f2a2 	rbit	r2, r2
 8002eca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ece:	fab2 f282 	clz	r2, r2
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f042 0220 	orr.w	r2, r2, #32
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	f002 021f 	and.w	r2, r2, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d17b      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0f3      	b.n	80030d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d13c      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x178>
 8002ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002efa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x128>
 8002f1a:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	e00f      	b.n	8002f40 <HAL_RCC_ClockConfig+0x148>
 8002f20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f32:	643b      	str	r3, [r7, #64]	; 0x40
 8002f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3c:	4b46      	ldr	r3, [pc, #280]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f44:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f48:	fa92 f2a2 	rbit	r2, r2
 8002f4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f50:	fab2 f282 	clz	r2, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f042 0220 	orr.w	r2, r2, #32
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	f002 021f 	and.w	r2, r2, #31
 8002f60:	2101      	movs	r1, #1
 8002f62:	fa01 f202 	lsl.w	r2, r1, r2
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d13a      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0b2      	b.n	80030d6 <HAL_RCC_ClockConfig+0x2de>
 8002f70:	2302      	movs	r3, #2
 8002f72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x1a0>
 8002f92:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	e00d      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1bc>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	61ba      	str	r2, [r7, #24]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	fa92 f2a2 	rbit	r2, r2
 8002fbe:	617a      	str	r2, [r7, #20]
  return result;
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	fab2 f282 	clz	r2, r2
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f042 0220 	orr.w	r2, r2, #32
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f002 021f 	and.w	r2, r2, #31
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e079      	b.n	80030d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f023 0203 	bic.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	491a      	ldr	r1, [pc, #104]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff4:	f7fd ff90 	bl	8000f18 <HAL_GetTick>
 8002ff8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffc:	f7fd ff8c 	bl	8000f18 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e061      	b.n	80030d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_ClockConfig+0x260>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 020c 	and.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	429a      	cmp	r2, r3
 8003022:	d1eb      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_ClockConfig+0x25c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d214      	bcs.n	800305c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <HAL_RCC_ClockConfig+0x25c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 0207 	bic.w	r2, r3, #7
 800303a:	4906      	ldr	r1, [pc, #24]	; (8003054 <HAL_RCC_ClockConfig+0x25c>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b04      	ldr	r3, [pc, #16]	; (8003054 <HAL_RCC_ClockConfig+0x25c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e040      	b.n	80030d6 <HAL_RCC_ClockConfig+0x2de>
 8003054:	40022000 	.word	0x40022000
 8003058:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCC_ClockConfig+0x2e8>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	491a      	ldr	r1, [pc, #104]	; (80030e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4912      	ldr	r1, [pc, #72]	; (80030e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800309a:	f000 f829 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 800309e:	4601      	mov	r1, r0
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_RCC_ClockConfig+0x2e8>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a8:	22f0      	movs	r2, #240	; 0xf0
 80030aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	fa92 f2a2 	rbit	r2, r2
 80030b2:	60fa      	str	r2, [r7, #12]
  return result;
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	fab2 f282 	clz	r2, r2
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	40d3      	lsrs	r3, r2
 80030be:	4a09      	ldr	r2, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x2ec>)
 80030c0:	5cd3      	ldrb	r3, [r2, r3]
 80030c2:	fa21 f303 	lsr.w	r3, r1, r3
 80030c6:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <HAL_RCC_ClockConfig+0x2f0>)
 80030c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <HAL_RCC_ClockConfig+0x2f4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fede 	bl	8000e90 <HAL_InitTick>
  
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3778      	adds	r7, #120	; 0x78
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	08003b28 	.word	0x08003b28
 80030e8:	2000000c 	.word	0x2000000c
 80030ec:	20000010 	.word	0x20000010

080030f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800310a:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <HAL_RCC_GetSysClockFreq+0x94>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b04      	cmp	r3, #4
 8003118:	d002      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x30>
 800311a:	2b08      	cmp	r3, #8
 800311c:	d003      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0x36>
 800311e:	e026      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_RCC_GetSysClockFreq+0x98>)
 8003122:	613b      	str	r3, [r7, #16]
      break;
 8003124:	e026      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	0c9b      	lsrs	r3, r3, #18
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_RCC_GetSysClockFreq+0x94>)
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_RCC_GetSysClockFreq+0xa0>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800314c:	4a0e      	ldr	r2, [pc, #56]	; (8003188 <HAL_RCC_GetSysClockFreq+0x98>)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	fbb2 f2f3 	udiv	r2, r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e004      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	613b      	str	r3, [r7, #16]
      break;
 800316c:	e002      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_GetSysClockFreq+0x98>)
 8003170:	613b      	str	r3, [r7, #16]
      break;
 8003172:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003174:	693b      	ldr	r3, [r7, #16]
}
 8003176:	4618      	mov	r0, r3
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	007a1200 	.word	0x007a1200
 800318c:	08003b38 	.word	0x08003b38
 8003190:	08003b48 	.word	0x08003b48
 8003194:	003d0900 	.word	0x003d0900

08003198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <HAL_RCC_GetHCLKFreq+0x14>)
 800319e:	681b      	ldr	r3, [r3, #0]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	2000000c 	.word	0x2000000c

080031b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b092      	sub	sp, #72	; 0x48
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80d4 	beq.w	800337c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d4:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10e      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e0:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ea:	61d3      	str	r3, [r2, #28]
 80031ec:	4b48      	ldr	r3, [pc, #288]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b45      	ldr	r3, [pc, #276]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4b42      	ldr	r3, [pc, #264]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a41      	ldr	r2, [pc, #260]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fd fe7f 	bl	8000f18 <HAL_GetTick>
 800321a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fd fe7b 	bl	8000f18 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d901      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e14b      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8084 	beq.w	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003258:	429a      	cmp	r2, r3
 800325a:	d07c      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800325c:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800326a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	461a      	mov	r2, r3
 8003286:	2301      	movs	r3, #1
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800328e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	461a      	mov	r2, r3
 80032aa:	2300      	movs	r3, #0
 80032ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04b      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fd fe2b 	bl	8000f18 <HAL_GetTick>
 80032c2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fd fe27 	bl	8000f18 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0f5      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80032dc:	2302      	movs	r3, #2
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
 80032e8:	2302      	movs	r3, #2
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	61fb      	str	r3, [r7, #28]
  return result;
 80032f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d108      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800330a:	4b01      	ldr	r3, [pc, #4]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	e00d      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
 8003318:	10908100 	.word	0x10908100
 800331c:	2302      	movs	r3, #2
 800331e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	4b69      	ldr	r3, [pc, #420]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2202      	movs	r2, #2
 800332e:	613a      	str	r2, [r7, #16]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	60fa      	str	r2, [r7, #12]
  return result;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0b7      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003356:	4b5e      	ldr	r3, [pc, #376]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	495b      	ldr	r1, [pc, #364]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003364:	4313      	orrs	r3, r2
 8003366:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003368:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003370:	4b57      	ldr	r3, [pc, #348]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4a56      	ldr	r2, [pc, #344]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003388:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f023 0203 	bic.w	r2, r3, #3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	494e      	ldr	r1, [pc, #312]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003396:	4313      	orrs	r3, r2
 8003398:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033a6:	4b4a      	ldr	r3, [pc, #296]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f023 0210 	bic.w	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4947      	ldr	r1, [pc, #284]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033c4:	4b42      	ldr	r3, [pc, #264]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	493f      	ldr	r1, [pc, #252]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f023 0220 	bic.w	r2, r3, #32
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	4938      	ldr	r1, [pc, #224]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003400:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	4930      	ldr	r1, [pc, #192]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800340e:	4313      	orrs	r3, r2
 8003410:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800341e:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4929      	ldr	r1, [pc, #164]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800343c:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	4921      	ldr	r1, [pc, #132]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800344a:	4313      	orrs	r3, r2
 800344c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	491a      	ldr	r1, [pc, #104]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003468:	4313      	orrs	r3, r2
 800346a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	4912      	ldr	r1, [pc, #72]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003486:	4313      	orrs	r3, r2
 8003488:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	490b      	ldr	r1, [pc, #44]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3748      	adds	r7, #72	; 0x48
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000

080034d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e049      	b.n	800357a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fc10 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f000 f94c 	bl	80037b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d001      	beq.n	800359c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e033      	b.n	8003604 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_TIM_Base_Start+0x8c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d009      	beq.n	80035c2 <HAL_TIM_Base_Start+0x3e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b6:	d004      	beq.n	80035c2 <HAL_TIM_Base_Start+0x3e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a15      	ldr	r2, [pc, #84]	; (8003614 <HAL_TIM_Base_Start+0x90>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d115      	bne.n	80035ee <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_TIM_Base_Start+0x94>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b06      	cmp	r3, #6
 80035d2:	d015      	beq.n	8003600 <HAL_TIM_Base_Start+0x7c>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035da:	d011      	beq.n	8003600 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ec:	e008      	b.n	8003600 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e000      	b.n	8003602 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003600:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40014000 	.word	0x40014000
 8003618:	00010007 	.word	0x00010007

0800361c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIM_ConfigClockSource+0x1c>
 8003634:	2302      	movs	r3, #2
 8003636:	e0b6      	b.n	80037a6 <HAL_TIM_ConfigClockSource+0x18a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800365a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003674:	d03e      	beq.n	80036f4 <HAL_TIM_ConfigClockSource+0xd8>
 8003676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367a:	f200 8087 	bhi.w	800378c <HAL_TIM_ConfigClockSource+0x170>
 800367e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003682:	f000 8086 	beq.w	8003792 <HAL_TIM_ConfigClockSource+0x176>
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368a:	d87f      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x170>
 800368c:	2b70      	cmp	r3, #112	; 0x70
 800368e:	d01a      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0xaa>
 8003690:	2b70      	cmp	r3, #112	; 0x70
 8003692:	d87b      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x170>
 8003694:	2b60      	cmp	r3, #96	; 0x60
 8003696:	d050      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x11e>
 8003698:	2b60      	cmp	r3, #96	; 0x60
 800369a:	d877      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x170>
 800369c:	2b50      	cmp	r3, #80	; 0x50
 800369e:	d03c      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xfe>
 80036a0:	2b50      	cmp	r3, #80	; 0x50
 80036a2:	d873      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x170>
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d058      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x13e>
 80036a8:	2b40      	cmp	r3, #64	; 0x40
 80036aa:	d86f      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x170>
 80036ac:	2b30      	cmp	r3, #48	; 0x30
 80036ae:	d064      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x15e>
 80036b0:	2b30      	cmp	r3, #48	; 0x30
 80036b2:	d86b      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x170>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d060      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x15e>
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d867      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x170>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d05c      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x15e>
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d05a      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x15e>
 80036c4:	e062      	b.n	800378c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6899      	ldr	r1, [r3, #8]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f000 f95f 	bl	8003998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	609a      	str	r2, [r3, #8]
      break;
 80036f2:	e04f      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6899      	ldr	r1, [r3, #8]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f000 f948 	bl	8003998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003716:	609a      	str	r2, [r3, #8]
      break;
 8003718:	e03c      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	461a      	mov	r2, r3
 8003728:	f000 f8bc 	bl	80038a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2150      	movs	r1, #80	; 0x50
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f915 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 8003738:	e02c      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	461a      	mov	r2, r3
 8003748:	f000 f8db 	bl	8003902 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2160      	movs	r1, #96	; 0x60
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f905 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 8003758:	e01c      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6859      	ldr	r1, [r3, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	461a      	mov	r2, r3
 8003768:	f000 f89c 	bl	80038a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2140      	movs	r1, #64	; 0x40
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f8f5 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 8003778:	e00c      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4619      	mov	r1, r3
 8003784:	4610      	mov	r0, r2
 8003786:	f000 f8ec 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 800378a:	e003      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e000      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a34      	ldr	r2, [pc, #208]	; (8003894 <TIM_Base_SetConfig+0xe4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_Base_SetConfig+0x20>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d108      	bne.n	80037e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a2b      	ldr	r2, [pc, #172]	; (8003894 <TIM_Base_SetConfig+0xe4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00f      	beq.n	800380a <TIM_Base_SetConfig+0x5a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d00b      	beq.n	800380a <TIM_Base_SetConfig+0x5a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a28      	ldr	r2, [pc, #160]	; (8003898 <TIM_Base_SetConfig+0xe8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <TIM_Base_SetConfig+0x5a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a27      	ldr	r2, [pc, #156]	; (800389c <TIM_Base_SetConfig+0xec>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <TIM_Base_SetConfig+0x5a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <TIM_Base_SetConfig+0xf0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d108      	bne.n	800381c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a14      	ldr	r2, [pc, #80]	; (8003894 <TIM_Base_SetConfig+0xe4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00b      	beq.n	8003860 <TIM_Base_SetConfig+0xb0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a13      	ldr	r2, [pc, #76]	; (8003898 <TIM_Base_SetConfig+0xe8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <TIM_Base_SetConfig+0xb0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <TIM_Base_SetConfig+0xec>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_Base_SetConfig+0xb0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <TIM_Base_SetConfig+0xf0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d103      	bne.n	8003868 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f023 0201 	bic.w	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	611a      	str	r2, [r3, #16]
  }
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40014000 	.word	0x40014000
 800389c:	40014400 	.word	0x40014400
 80038a0:	40014800 	.word	0x40014800

080038a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f023 0201 	bic.w	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f023 030a 	bic.w	r3, r3, #10
 80038e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	621a      	str	r2, [r3, #32]
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003902:	b480      	push	{r7}
 8003904:	b087      	sub	sp, #28
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f023 0210 	bic.w	r2, r3, #16
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800392c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	031b      	lsls	r3, r3, #12
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800393e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	f043 0307 	orr.w	r3, r3, #7
 8003984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	609a      	str	r2, [r3, #8]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	021a      	lsls	r2, r3, #8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	bf00      	nop
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e04f      	b.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a21      	ldr	r2, [pc, #132]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d004      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d10c      	bne.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40014000 	.word	0x40014000

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	4d0d      	ldr	r5, [pc, #52]	; (8003adc <__libc_init_array+0x38>)
 8003aa8:	4c0d      	ldr	r4, [pc, #52]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aaa:	1b64      	subs	r4, r4, r5
 8003aac:	10a4      	asrs	r4, r4, #2
 8003aae:	2600      	movs	r6, #0
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	4d0b      	ldr	r5, [pc, #44]	; (8003ae4 <__libc_init_array+0x40>)
 8003ab6:	4c0c      	ldr	r4, [pc, #48]	; (8003ae8 <__libc_init_array+0x44>)
 8003ab8:	f000 f820 	bl	8003afc <_init>
 8003abc:	1b64      	subs	r4, r4, r5
 8003abe:	10a4      	asrs	r4, r4, #2
 8003ac0:	2600      	movs	r6, #0
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08003b58 	.word	0x08003b58
 8003ae0:	08003b58 	.word	0x08003b58
 8003ae4:	08003b58 	.word	0x08003b58
 8003ae8:	08003b5c 	.word	0x08003b5c

08003aec <memset>:
 8003aec:	4402      	add	r2, r0
 8003aee:	4603      	mov	r3, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <_init>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	bf00      	nop
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr

08003b08 <_fini>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr
